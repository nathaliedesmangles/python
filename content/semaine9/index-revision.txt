+++
title = "Révision"
weight = 109
draft = true
+++

<!--

[Bloc-notes de départ](https://python-a25.netlify.app/blocnotes/exercices_revision.ipynb)

## Exercice 1 : Neutralisation acide-base (chimie)

**Notions** : conditions, boucles, dictionnaire, fonctions
**Contexte** : Un technicien doit ajuster progressivement le volume d’une base versée dans une solution acide pour atteindre un pH proche de 7.

**Tâche** :
* Simule une titration acide-base par paliers de 0.5 mL.
* Utilise la formule `p = 3 + 4 x (1 - 2.718^(-0.8 x v))` (à coder, où `p` est le pH et `v` le volume).
* Arrête la simulation dès que le pH est compris entre 6.8 et 7.2.
* Affiche tous les volumes testés avec leur pH.
* Représente les valeurs sur un graphique volume vs pH pour visualiser le point d'équivalence.


***Résultats attendus*** :
```
Volume = 0.0 mL --> pH = 3.00
Volume = 0.5 mL --> pH = 4.32
Volume = 1.0 mL --> pH = 5.20
Volume = 1.5 mL --> pH = 5.80
Volume = 2.0 mL --> pH = 6.19
Volume = 2.5 mL --> pH = 6.46
Volume = 3.0 mL --> pH = 6.64
Volume = 3.5 mL --> pH = 6.76
Volume = 4.0 mL --> pH = 6.84
```
![Graphique exo 1](./exercice1.png?width=35vw)


## Exercice 2 : Série de désintégrations radioactives

**Notions** : boucles, listes, math, NumPy, fonctions
**Contexte** : Une substance radioactive se désintègre au fil du temps, et on veut modéliser la quantité restante.
**Tâche** :

* Simule la désintégration d’un isotope avec une demi-vie donnée.
* Crée une fonction `quantite_restante(q0, t, demivie)` qui retourne la quantité après t secondes.
* Génère et affiche la liste des quantités pour t = 0 à 60 s par pas de 5.
* Trace la courbe avec `matplotlib`.

> **Variante** : Ajouter un bruit expérimental (± 5%) et comparer avec la courbe théorique.

***Résultats attendus*** :
```
Quantités restantes : [np.float64(100.0), np.float64(84.08964152537145), np.float64(70.71067811865476), np.float64(59.46035575013605), np.float64(50.0), np.float64(42.044820762685724), np.float64(35.35533905932738), np.float64(29.730177875068026), np.float64(25.0), np.float64(21.022410381342862), np.float64(17.67766952966369), np.float64(14.865088937534013), np.float64(12.5)]
```
![Graphique exo 2](./exercice2.png?width=35vw)

**Variante** :
![Graphique exo 2 variante](./exercice2_var.png?width=35vw)


## Exercice 3 : Titrage par conductimétrie

[Fichier à utiliser: conductivite.csv](./conductivite.csv)

**Notions** : dictionnaire, csv, matplotlib, compréhension de données
**Contexte** : Une série de mesures de conductivité sont enregistrées à chaque ajout de 1 mL de réactif.
**Tâche** :

* Lis un fichier `conductivite.csv` contenant deux colonnes : `volume`, `conductivite`.
* Affiche les données et trace le graphique.
* Calcule la pente moyenne avant et après l’équivalence pour déterminer approximativement le volume d’équivalence.
* Affiche ce volume estimé.

> **Variante** : Ajouter une estimation par interpolation entre deux points.

***Résultats attendus*** :
```
volume  conductivite
0        0           250
1        1           240
2        2           228
3        3           215
4        4           200
5        5           185
6        6           170
7        7           158
8        8           145
9        9           135
10      10           128
11      11           133
12      12           140
13      13           150
14      14           165
15      15           180
16      16           195
17      17           210
18      18           230
19      19           245
20      20           260

Pente avant équivalence : -12.20 µS/mL
Pente après équivalence : 14.11 µS/mL
Le point d'équivalence est estimé autour de 10-11 mL.
```
![Graphique exo 3](./exercice3.png?width=40vw)

**Variante** :
```
Volume équivalent estimé par interpolation : 10.50 mL
```


## Exercice 4 : Suivi d’un indicateur coloré (absorbance)

**Notions** : fonctions, tableaux NumPy, matplotlib, régression linéaire
**Contexte** : L’absorbance d’un indicateur est mesurée pour plusieurs concentrations connues (loi de Beer-Lambert).
**Tâche** :

* Enregistre les valeurs de concentration (mol/L) et d’absorbance dans des tableaux.
* Trace le nuage de points.
* Calcule la pente et l’ordonnée à l’origine de la droite de régression.
* Utilise la droite pour estimer la concentration d’une solution inconnue.
* Ajouter les barres d’erreur sur l’absorbance.

***Résultats attendus*** :
```
y = 2.45x + -0.00
Concentration estimée : 0.226 mol/L
```
![Graphique exo 4](./exercice4.png?width=35vw)


## Exercice 5 : Simulation de friction sur une rampe inclinée (physique)

**Notions** : input, conditions, boucles, fonctions, matplotlib
**Contexte** : Un objet glisse sur une rampe inclinée avec ou sans friction.
**Tâche** :

* Demande à l’utilisateur l’angle, la masse et le coefficient de friction.
* Calcule la force nette et l’accélération.
* Simule la position et la vitesse sur 10 secondes (delta t = 0.1 s).
* Affiche les positions et trace la courbe position vs temps.

> **Variante** : Comparer les trajectoires avec et sans friction sur un même graphique.

***Résultats attendus*** :
```
Accélération nette : 3.21 m/s²
```
![Graphique exo 5](./exercice5.png?width=35vw)

**Variante** :

![Graphique exo 5 variante](./exercice5_var.png?width=35vw)

---

## 2. Atelier : Effet de la température sur le taux de croissance d'une algue

[Bloc-notes de départ](https://python-a25.netlify.app/blocnotes/atelier_revision.ipynb)

[Fichier à utiliser: croissance_algues.csv](./croissance_algues.csv)

### Objectif

Réviser les compétences clés :

* **Listes, chaînes, boucles, conditions**
* **Dictionnaires**
* **Tableaux NumPy et fonctions `np.*`**
* **Lecture de fichiers `.csv` avec `pandas`**
* **Visualisation de données avec `matplotlib`**
* **Régression linéaire avec `numpy`**

---

Une équipe scientifique a mené une étude pour comprendre comment **la température de l’eau** influence **le taux de croissance** d’une **algue d’eau douce**. Les données ont été collectées avec différents capteurs, à différentes dates, et contiennent les colonnes suivantes :

* **Température (°C)** : température de l’eau,
* **Taux de croissance (mm/jour)** : croissance moyenne de l’algue,
* **Espèce** : nom de l’espèce de l’algue,
* **Capteur** : nom du capteur utilisé,
* **Date** : date de la mesure (YYYY-MM-DD).

Les données sont enregistrées dans un fichier CSV nommé : `croissance_algues.csv`.

### Aperçu du contenu du fichier croissance_algues.csv

```csv
Température,Taux,Espèce,Capteur,Date
15.0,2.3,Cladophora,Capteur_A,2025-07-01
18.2,2.9,Cladophora,Capteur_B,2025-07-01
20.0,3.5,Spirogyra,Capteur_A,2025-07-02
21.1,3.7,Cladophora,Capteur_C,2025-07-03
22.5,4.0,Spirogyra,Capteur_A,2025-07-04
25.0,4.6,Cladophora,Capteur_B,2025-07-04
26.8,4.9,Spirogyra,Capteur_A,2025-07-05
28.0,5.1,Cladophora,Capteur_C,2025-07-06
30.2,5.3,Spirogyra,Capteur_A,2025-07-07
...
```

### Étape 1 – Lecture et préparation des donées

1. Lire le fichier avec `pandas`.
2. Vérifier la présence de valeurs manquantes.
3. Convertir les colonnes `Température` et `Taux` en tableaux NumPy.

### Étape 2 – Analyse par espèce

1. Créer un dictionnaire : `{espèce : [liste des taux mesurés]}`.
2. Pour chaque espèce, afficher :

   * Le nombre de mesures,
   * La moyenne du taux,
   * L’écart-type du taux.

### Étape 3 – Visualisation

1. Afficher un **nuage de points** température vs taux, avec une **couleur différente par espèce**.
2. Ajouter une **droite de régression linéaire** pour chaque espèce (utilisez `np.polyfit` et `np.polyval`).
3. Ajouter une légende, des titres, et sauvegarder le graphique sous le nom `croissance_regression.png`.

### Étape 4 – Recherche par capteur

1. Demander à l’utilisateur d’entrer un nom de capteur (`input()`).
2. Afficher toutes les mesures associées à ce capteur : date, espèce, température et taux.


***Exemple de résultats attendus avec le capteur A*** :
```
Température    0
Taux           0
Espèce         0
Capteur        0
Date           0
dtype: int64
Résumé par espèce :
Cladophora -> {'nb': 26, 'moyenne': np.float64(4.2), 'ecart_type': np.float64(0.9856665062476565)}
Spirogyra -> {'nb': 24, 'moyenne': np.float64(4.333333333333333), 'ecart_type': np.float64(0.9218037872683221)}
```
![Graphique Croissance_regression](./croissance_regression.png?width=35vw)

-->
