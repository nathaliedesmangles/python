+++
chapter = true
pre = "<b>Semaine 1.</b>"
title = "Introduction √† Python et √† l'algorithmie"
weight = 10
+++

## Objectifs de la le√ßon

- Comprendre ce qu‚Äôest un langage de programmation
- Identifier les types de donn√©es de base en Python
- √âcrire des expressions simples en Python
- Cr√©er des scripts simples avec des calculs scientifiques
- S‚Äôinitier √† la logique algorithmique

--- 

## Plan de la le√ßon

| Section | Dur√©e (approx.) |
|--------|:--------:|
| 1. Pourquoi Python ? | 2 min |
| 2. Pr√©sentation d‚ÄôAnaconda et Jupyter | 5 min |
| 3. Variables et types de base | 10 min |
| 4. Op√©rations math√©matiques de base | 5 min |
| 5. Fonctions int√©gr√©es utiles | 15 min |
| 6. Qu‚Äôest-ce qu‚Äôun algorithme ? | 10 min |
| **Pause** | **10 min** |
| 7. Activit√© pratique en classe | 1h50 |
| 8. Activit√© √† faire √† la maison | 3h |

---

## 1. Pourquoi apprendre Python en science ?

- **Polyvalence** : utilis√© en bio, chimie, physique, m√©t√©o, environnement, IA.
- **Lisibilit√©** : syntaxe claire = moins de stress pour les d√©butants.
- **Gratuit** et support√© par une **grande communaut√©** scientifique.
- Nombreux modules utiles : `numpy`, `matplotlib`, `pandas`, etc.

üìå **Exemple** : _afficher le r√©sultat d‚Äôun calcul_  
```python
print(9.81 * 2)
```

## 2. Pr√©sentation de l‚Äôenvironnement (Anaconda et Jupyter) 

- Lancer ***Anaconda Navigator*** ‚Üí ouvrir ***Jupyter Notebook***
- Avantages de Jupyter :
  - M√©lange de texte, de code, de graphiques
  - Tr√®s utilis√© dans les labos pour documenter les exp√©riences

üí° Cellule code vs cellule texte dans un notebook.

## 3. Variables et types de base

Une **variable** est une zone de la m√©moire de l‚Äôordinateur dans laquelle une valeur est stock√©e. 

### 3.1 Nommer une variable

### 3.2 Types principaux de base

| Type | Exemple | Description |
|-------|---------|-------------|
| `int` | `5` | entier |
| `float` | `3.14` | nombre d√©cimal |
| `str` | `"bonjour"` ou `'bonjour'` | cha√Æne de caract√®res |
| `bool` | `True`, `False` | valeur logique |

### 3.3 Cr√©ation d‚Äôune variable

- Pour stocker un valeur dans une variable, on utilise le symbole **√©gal** (`=`) 

#### 3.3.1 R√®gles pour nommer une variable

- Utiliser des noms significatifs: le nom doit permettre de savoir quelle information elle contient.
- Commencer par une lettre ou un underscore (`_`)
- Ensuite, utiliser des lettres, des chiffres et/ou des underscores
   <span style="color:red;"><b>NB</b>: Ne jamais utiliser de lettres accentu√©es, ni de caract√®res sp√©ciaux</span>.
- Respecter la casse (en Python, `prenom` et `Prenom` sont deux variables diff√©rentes.
- Ne pas utiliser les mots appartenant au langage Python (ex: `print`, `input`, etc.)

üìå **Exemples de noms valides**

```python
temperature_celsius = 22   # int
prenom = "Nathalie"	       # str
impot2025 = 1234.5         # float
coursReussi = True         # bool
```

> [!Warning]
> Une fois qu'on a cr√©√© une variable, **on utilise son nom √† la place de la valeur** qu'elle contient.

## 4. Op√©rations math√©matiques de base

```python
# Addition
a = 5 + 2    # 7

# Soustraction
b = 10 - 4   # 6

# Multiplication
c = 3 * 4    # 12

# Divisions
d = 8 / 2    # 4.0 pas 4
e = 10 // 3  # 3 pas 3.0 ni 3.3333

# Puissance
f = 2 ** 3   # 8

# Modulo (reste)
g = 10 % 3   # 1
```

## 5. Fonctions int√©gr√©es utiles

| Fonction | Utilit√© | Exemple |
|----------|--------|---------|
| `print()` | Afficher √† l‚Äô√©cran | `print("Bonjour !")` |
| `type()` | Voir le type d‚Äôune variable | `type(3.14)` |
| `round()` | Arrondir | `round(3.14159, 2)` ‚Üí `3.14` |
| `input()` | Entr√©e utilisateur (√† venir plus tard) | `input("Ton nom ?")` |

üìå **Exemple 1** : afficher √† l'√©cran avec `print()` :
```python
prenom = "Nathalie"
print("Bonjour", prenom, "et bienvenue dans le monde de Python !")
```

üìå **Exemple 2** : pr√©dire le type avec `type()` :
```python
type(22)
type("python")
type(3.0)
type(True)
```

üìå **Exemple 3** : arrondir avec `round()` :

**Arrondir √† l'entier le plus proche**
```python
resultat = 10 / 3   # 3.333333333333333
resultat_arrondi = round(resultat)
print(resultat_arrondi)
3

nombre = 3.567
nombre_arrondi = round(nombre)
print(nombre_arrondi)
4
```

**Arrondir √† 2 d√©cimales**
```python
nombre = 3.567
nombre_arrondi = round(nombre,2)
print(nombre_arrondi)
3.57
```

üìå **Exemple 4** : obtenir une donn√©e saisie au clavier avec `input()` :

**Capture de nombres saisis au clavier**
```python
nombre1 = int(input("Entrez un premier nombre entier")
nombre2 = int(input("Entrez un deuxi√®me nombre entier")
somme = nombre1 + nombre2
print(nombre1, " + ", nombre2, " = ", somme)
```


## 6. Qu‚Äôest-ce qu‚Äôun algorithme ?

- **D√©finition simple** : une suite d‚Äôinstructions ordonn√©es pour r√©soudre un probl√®me.
- **Lien avec les sciences** : les exp√©riences sont souvent des suites d‚Äô√©tapes.
- Exemples quotidiens :
  - Recette de cuisine
  - Mode d‚Äôemploi
  - Protocole exp√©rimental

## 6.1. Exemples d'algorithmes simples

üìå **Exemple 1** : Pseudo-algorithme de conversion Celsius ‚Üí Fahrenheit :
```
1. Lire la temp√©rature en Celsius
2. Multiplier par 9
3. Diviser par 5
4. Ajouter 32
5. Afficher le r√©sultat
```

**Traduit en Python**
```python
c = 25
f = c * 9 / 5 + 32
print(c, "¬∞C = ", f, "¬∞F¬∞")
```

üìå **Exemple 2** : Calcul de l'aire d‚Äôun cercle
```
1. Lire le rayon du cercle.
2. Multiplier la valeur de Pi(3.14) au rayon¬≤
3. Afficher le r√©sultat.
```

**Traduit en Python**
```python
rayon = 3
aire = 3.14 * rayon ** 2
print("L'aire du cercle est de", aire, "cm¬≤")
```

---

## 7. Activit√© pratique en classe

**Contexte scientifique** : L‚ÄôIMC est utilis√© pour √©valuer la corpulence d‚Äôune personne. Ce n‚Äôest pas un indicateur parfait, mais il est utile √† grande √©chelle.
```
Formule : IMC = poids (kg) / (taille (m))¬≤
```

>Utiliser le fichier semaine1.ipynb se trouvant sur Moodle/Teams

---

## 8. Activit√©s √† faire √† la maison

- R√©viser la mati√®re d'aujourd'hui, refaites les exemples et modifier ou ajouter des variables afin
- Gestion des fichiers et dossiers 
- Lecture du plan de cours (quiz oralement au prochain cours)

 