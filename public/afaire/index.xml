<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>√Ä FAIRE :: 420-SN1-RE</title>
    <link>http://localhost:1313/afaire/index.html</link>
    <description>Semaine 1 Cours Mettre √† jour infos tableau planification de cours Pr√©parer la d√©mo sur Anaconda et Jupyter Pr√©parer guide installation sur Windows 11: https://www.datacamp.com/fr/tutorial/installing-anaconda-windows Semaine 2 Cours R√©viser Activit√© 2.1 Cr√©er ipynb Activit√© 2.2 Contexte √† confirmer Mise en forme des formule V√©rifier ipynb Semaine 3 Cours Activit√© 3 Semaine 4 Cours Activit√© 4 Semaine 5 Cours Activit√© 5 Semaine 6 Cours Activit√© 6</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="http://localhost:1313/afaire/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Boucles while et for</title>
      <link>http://localhost:1313/afaire/boucles/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/afaire/boucles/index.html</guid>
      <description>Objectifs de la s√©ance R√©viser les structures conditionnelles (if, elif, else) Comprendre les boucles (while, for) Appliquer ces notions √† des situations scientifiques simples (physique, chimie, biologie) Plan de la s√©ance 0. Accueil et mise en contexte (10 min) Pr√©sentation des objectifs Br√®ve discussion sur ce que les √©tudiants trouvent difficile Partage d‚Äôun fichier Jupyter Notebook ou Google Colab 1. R√©vision des structures conditionnelles (30 min) Th√©orie (10 min) Rappel syntaxe : temp = 36.</description>
    </item>
    <item>
      <title>Fonctions personnalis√©es, docstring et test unitaires et Maths</title>
      <link>http://localhost:1313/afaire/fonctions/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/afaire/fonctions/index.html</guid>
      <description>Contenu :&#xA;Les fonctions personnalis√©es La documentation (docstring) Les tests unitaires avec PyTest Les fonctions arithm√©tiques int√©gr√©es (min, max, sum, abs, etc.) Le module math Objectifs de la s√©ance (2 heures) √Ä la fin de cette s√©ance, l‚Äô√©tudiant(e) sera capable de :&#xA;Utiliser les fonctions arithm√©tiques int√©gr√©es et du module math Cr√©er ses propres fonctions avec param√®tres et valeurs de retour Documenter ses fonctions avec des docstrings √âcrire des tests unitaires simples avec pytest D√©roulement de la s√©ance üîπ 0:00 ‚Äì 0:10 | Accueil et plan de la s√©ance Br√®ve discussion : Pourquoi utiliser des fonctions ?</description>
    </item>
    <item>
      <title>Planification</title>
      <link>http://localhost:1313/afaire/plan/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/afaire/plan/index.html</guid>
      <description>semaine 1: Cours et environnement de travail semaine 2: intro Python (variables, types, affichage, conversion et input) semaine 3: structures conditionnelles semaine 4: boucles semaine 5: introduction aux listes (base liste sans boucle, test #1 15% ‚Äì&gt; Semaines 1 √† 4 incl.)&#xA;semaine 6: liste et boucles semaine 7: dictionnaires semaine 8: intro aux fonctions (fn int√©gr√©es Math) et into aux graphiques semaine 9: tableaux Numpy semaine 10: test #2 20% ‚Äì&gt; Semaines 5 √† 9 incl.</description>
    </item>
    <item>
      <title>break, continue, liste et boucle</title>
      <link>http://localhost:1313/afaire/break_continue_liste/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/afaire/break_continue_liste/index.html</guid>
      <description>Objectifs de la s√©ance Apprendre √† arr√™ter une boucle selon une condition. Apprendre √† cr√©er et manipuler une liste. Apprendre √† parcourir des listes ou des cha√Ænes de caract√®res avec la boucle for. Partie 1 ‚Äì Arr√™ter une boucle selon une condition Explication Une boucle while ou for continue tant qu‚Äôune condition est vraie. On peut aussi utiliser break pour arr√™ter manuellement une boucle. D√©monstration : boucle while valeur = 0 while valeur &lt; 100: print(&#34;Valeur actuelle :&#34;, valeur) if valeur == 50: break # Arr√™te la boucle valeur += 1&#xD;D√©monstration : boucle for for i in range(11):&#x9;# i prends les valeurs 0,1,2,3,4,5,6,7,8,9,10 if i == 5: break&#x9;# Arr√™te la boucle print(i) # Affiche: 0, 1, 2, 3, 4&#xD;Exercice 1 Demander √† l‚Äôutilisateur de saisir des temp√©ratures (float).</description>
    </item>
    <item>
      <title>D√©bogage pas √† pas</title>
      <link>http://localhost:1313/afaire/debogage/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/afaire/debogage/index.html</guid>
      <description>Objectifs de la s√©ance (2h) Comprendre comment fonctionne le d√©bogueur dans PyCharm. Apprendre √† utiliser les points d‚Äôarr√™t (breakpoints), la fen√™tre des variables, les options Step Over, Step Into, Evaluate Expression, etc. R√©viser les structures conditionnelles (if/elif/else) et les boucles (for, while) en les testant pas √† pas. Apprendre √† identifier les erreurs logiques classiques en sciences (unit√©s, ordre des op√©rations, initialisation incorrecte, etc.). Plan de la s√©ance (2h) Temps Activit√© 0:00-0:15 Introduction au d√©bogueur PyCharm (d√©monstration) 0:15-0:35 Exemple guid√© 1 : if/elif/else ‚Äì temp√©rature de changement d‚Äô√©tat 0:35-1:00 Exercice 1 : Identifier les erreurs dans un mod√®le de dilatation thermique 1:00-1:20 Exemple guid√© 2 : boucle for ‚Äì somme des masses d‚Äô√©chantillons 1:20-1:40 Exercice 2 : Corriger une boucle while mal conditionn√©e (demi-vie radioactive) 1:40-2:00 D√©fi final : simulation simplifi√©e de chute libre avec erreur √† trouver Outils PyCharm install√©.</description>
    </item>
    <item>
      <title>Calendrier</title>
      <link>http://localhost:1313/afaire/plancours/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/afaire/plancours/index.html</guid>
      <description>Voici la version compl√®te mise √† jour du plan de cours de Programmation en sciences pour des √©tudiants de 1re session en sciences de la nature, int√©grant toutes tes demandes (pas de cr√©ation de fonctions, pas de participation √©valu√©e, projet individuel avec donn√©es diff√©rentes, √©valuation 1 bien int√©gr√©e dans la semaine 6, etc.).&#xA;Plan de cours ‚Äì Programmation en sciences (1re session ‚Äì Sciences de la nature) Dur√©e : 15 semaines Horaire hebdomadaire : 2h40 (3 p√©riodes de 50 minutes incluant 10 min de pause) Structure :</description>
    </item>
    <item>
      <title>√âcrire un notebook Python bien structur√©</title>
      <link>http://localhost:1313/afaire/markdown/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/afaire/markdown/index.html</guid>
      <description>Voici une le√ßon concise et essentielle sur la r√©daction d‚Äôun notebook Jupyter clair et bien structur√© en Python, avec des explications adapt√©es √† des √©tudiants de premi√®re session en sciences de la nature.&#xA;üßæ Le√ßon : üéØ Objectifs Utiliser le Markdown pour structurer les sections du notebook S√©parer clairement la th√©orie, le code et l‚Äôinterpr√©tation Ajouter des commentaires dans le code S‚Äôassurer que toutes les cellules s‚Äôex√©cutent sans erreur, du haut vers le bas 1.</description>
    </item>
    <item>
      <title>L‚Äô√©criture et la lecture de donn√©es (csv)</title>
      <link>http://localhost:1313/afaire/lecture_ecriture_csv_numpy/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/afaire/lecture_ecriture_csv_numpy/index.html</guid>
      <description>Programmation scientifique en Python ‚Äî Le√ßon : Fichiers, Tableaux et Visualisation 1. Lire et √©crire des fichiers de donn√©es (.csv) Les fichiers .csv (Comma-Separated Values) permettent de stocker des tableaux de donn√©es.&#xA;√âcrire un fichier .csv with open(&#34;donnees.csv&#34;, &#34;w&#34;) as f: f.write(&#34;Nom,√Çge\n&#34;) f.write(&#34;Alice,20\n&#34;) f.write(&#34;Bob,22\n&#34;)&#xD;Lire un fichier .csv with open(&#34;donnees.csv&#34;, &#34;r&#34;) as f: contenu = f.read() print(contenu)&#xD;Pour des donn√©es num√©riques, on peut utiliser numpy.savetxt() et numpy.loadtxt() : import numpy as np # Sauvegarder un tableau tableau = np.</description>
    </item>
    <item>
      <title>Boucler sur un tableau 2D</title>
      <link>http://localhost:1313/afaire/boucler_tableaux2d/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/afaire/boucler_tableaux2d/index.html</guid>
      <description>Qu‚Äôest-ce qu‚Äôun tableau 2D ? C‚Äôest une liste de listes.&#xA;Exemple d‚Äôun tableau 3 lignes √ó 4 colonnes rempli de 0 :&#xA;tableau = [ [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0] ]&#xD;Chaque sous-liste repr√©sente une ligne.&#xA;Boucler sur les lignes (1 niveau) for ligne in tableau: print(ligne)&#xD;‚û° On affiche chaque ligne enti√®re.&#xA;Boucler sur chaque √©l√©ment (2 niveaux) Pour acc√©der √† chaque case du tableau, on utilise deux boucles imbriqu√©es :</description>
    </item>
    <item>
      <title>Pr√©sentation du cours (en bref)</title>
      <link>http://localhost:1313/afaire/anciens/presentation_cours/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/afaire/anciens/presentation_cours/index.html</guid>
      <description>1. Programmation en sciences (avec Python) Dur√©e : 15 semaines&#xA;Horaire : 1 s√©ance hebdomadaire de 2h40 (50 min d√©mo + 1h50 pratique supervis√©e)&#xA;Outils : Visual Studio Code, Python, Jupyter Notebook, NumPy, Matplotlib, Pandas&#xA;2. Objectifs du cours Objectif final et du Minist√®re de l‚Äô√©ducation sup√©rieure D√©velopper des programmes informatiques en vue d‚Äôautomatiser la r√©solution de probl√®mes dans un contexte scientifique Objectifs d‚Äôapprentissage Se familiariser avec un langage de programmation.</description>
    </item>
    <item>
      <title>Plan cours 1</title>
      <link>http://localhost:1313/afaire/plan1/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/afaire/plan1/index.html</guid>
      <description>1. Pr√©sentation du cours (~ 45 minutes) Pause 5 minutes&#xA;2. Prise en main de l‚Äôenvironnement de travail - Activit√© guid√©e (~ 110 minutes) √âtape 1 ‚Äì Se connecter √† votre compte OneDrive du c√©gep (~ 15 min.) √âtape 2 ‚Äì Organisation des fichiers (~ 15 min.) Pause 5 minutes&#xA;√âtape 3 ‚Äì D√©couverte de VS Code (~ 30 min.) √âtape 4 ‚Äì Cr√©er et utiliser un Jupyter Notebook (~ 30 min.</description>
    </item>
    <item>
      <title>Maths secondaire 3</title>
      <link>http://localhost:1313/afaire/maths/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/afaire/maths/index.html</guid>
      <description>Probl√®me : Probabilit√© que la fl√©chette atteigne la zone blanche Structure de la cible : Zone noire : cercle de rayon 2 cm Zone blanche : anneau entre rayon 2 cm et 3 cm Zone grise : anneau entre rayon 3 cm et 6 cm √âtape 1 ‚Äî Aire totale de la cible La cible est un disque de rayon 6 cm : Aire totale = œÄ √ó 6¬≤ = 36œÄ cm¬≤</description>
    </item>
  </channel>
</rss>