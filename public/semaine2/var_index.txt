+++
chapter = true
pre = "<b>Semaine 2.</b>"
title = "Structures de contrÃ´le (conditions et boucles)"
weight = 20
+++

## Objectifs de la leÃ§on

- Comprendre et utiliser les structures de contrÃ´le : `if`, `while`, `for`
- MaÃ®triser lâ€™indentation en Python
- Appliquer des opÃ©rateurs logiques (`and`, `or`, `not`)
- RÃ©flÃ©chir Ã  lâ€™ordre logique dans un programme

--- 

## Plan de la leÃ§on

| Section | DurÃ©e (approx.) |
|--------|:--------:|
| 1. Structure d'un `if` | 10 min |
| 2. L'indentation | 5 min |
| 3. Les opÃ©rateurs logiques | 5 min |
| 4. Boucle `while` | 10 min |
| 5. Boucle `for` | 10 min |
| 6. Sortir d'une boucle avant la fin| 5 min |
| 7. Lâ€™ordre logique d'un programme | 5 min |
| **Pause** | **10 min** |
| 8. ActivitÃ© pratique en classe | 1h50 |
| 9. ActivitÃ©s Ã  faire Ã  la maison | 3h |

---


## 1. Structure dâ€™un `if`

- Les structures conditionnelles (`if`) permettent Ã  votre programme de **prendre des dÃ©cisions**.

### Syntaxe

```python
if condition:
    instructions si condition1 est vraie
elif condition2:
    instructions si condition1 est fausse condition2 est vraie
else:
    instructions si toutes les conditions prÃ©cÃ©dentes sont fausses
```

- ***if*** : UtilisÃ© pour vÃ©rifier si une condition est vraie. Si câ€™est le cas, le bloc de code associÃ© est exÃ©cutÃ©.
- ***elif*** : UtilisÃ© pour vÃ©rifier une autre condition si la premiÃ¨re est fausse.
- ***else*** : UtilisÃ© pour exÃ©cuter un bloc de code si toutes les conditions prÃ©cÃ©dentes sont fausses.

ðŸ“Œ **Exemple**

```python
x = -10

if x > 0:
    print("Le nombre est positif.")
elif x < 0:
    print("Le nombre est nÃ©gatif.")
else:
    print("Le nombre est nul.")
```

## 2. L'indentation

- Lâ€™indentation **(espacement en dÃ©but de ligne)** est **obligatoire** en Python pour indiquer les blocs de code.
   - Convention : 4 espaces
- Lâ€™indentation indique ce qui fait partie dâ€™un bloc dâ€™instructions.
- Lâ€™indentation est **essentielle** aussi pour structurer le code et le rendre plus facile Ã  lire et comprendre.


### 2.1 Si on oublie lâ€™indentation

ðŸ“Œ **Exemple**

```python
x = -10

if x > 0:
print("Le nombre est positif.")
elif x < 0:
print("Le nombre est nÃ©gatif.")
else:
print("Le nombre est nul.")
```

<span style="color:red;"><b>Erreur !</b></span> Python affiche

```
IndentationError: expected an indented block
```

## 3. OpÃ©rateurs logiques

- `==` (Ã©gal Ã )
- `!=` (diffÃ©rent de)
- `>` `<` `>=` `<=`
- `and`, `or`, `not`

ðŸ“Œ **Exemple**

```python
age = 36

if age >= 18 and age < 65:
    print("Vous Ãªtes un.e adulte")
elif age >= 65:
    print("Bonne retraite !")
else:
    print("Vous avez moins de 18 ans.")
```

Les boucles (`while` et `for`) permettent de **rÃ©pÃ©ter des actions** efficacement.

## 4. Boucle `while`

La boucle `while` rÃ©pÃ¨te un bloc **tant quâ€™une condition est vraie**.

### Syntaxe

```python
while condition:
    instructions
```

ðŸ“Œ **Exemple** 

**Affiche les minutes jusqu'Ã  lâ€™Ã©bullition (100Â°C)**
```python
temp = 20
minutes = 0

while temp < 100:
    print(f"Minute {minutes} : {temp} Â°C")
    temp += 5
    minutes += 1

print("Ã‰bullition atteinte !")
```

Quand on utilise une boucle, il faut **savoir quand elle doit sâ€™arrÃªter**. Sinon, elle peut tourner Ã  lâ€™infini comme une toupie folle !

### 4.1 Condition dâ€™arrÃªt pour la boucle `while`

**Exemple :**
```python
i = 0
while i < 5:
    print(i)
    i += 1
```

**Condition dâ€™arrÃªt ici :** `i < 5`.  
Quand `i` atteint 5, la condition devient **fausse**, donc la boucle sâ€™arrÃªte.

**Attention !** Si on oublie de modifier `i` dans la boucle, elle ne sâ€™arrÃªtera jamais (boucle infinie).

## 5. Boucle `for`

La boucle `for` est idÃ©ale pour **rÃ©pÃ©ter un nombre connu de fois**, ou **parcourir une sÃ©quence** (ex : liste, chaÃ®ne de caractÃ¨res, `range()`).

### Syntaxe

```python
for Ã©lÃ©ment in sÃ©quence:
    instructions
```

ðŸ“Œ **Exemple** : Calculer la vitesse (v = d/t) pour plusieurs distances fixes

```python
distances = [10, 20, 30, 40]  # en mÃ¨tres
temps = 2  # secondes

for d in distances:
    v = d / temps
    print(f"Distance : {d} m, Vitesse : {v} m/s")
```

### 5.1 Condition dâ€™arrÃªt pour la boucle `for`

La boucle `for` rÃ©pÃ¨te un bloc dâ€™instructions **un nombre dÃ©fini de fois**, en gÃ©nÃ©ral en parcourant une sÃ©quence comme une liste ou une plage de nombres (`range()`).

ðŸ“Œ **Exemple**
```python
for i in range(5):
    print(i)
```

**Condition dâ€™arrÃªt ici :** `range(5)` produit les nombres `0, 1, 2, 3, 4`.  
Quand la sÃ©quence est **terminÃ©e**, la boucle sâ€™arrÃªte automatiquement.

{{% notice style="note" icon="Bon Ã  savoir" %}}
Avec `for`, on nâ€™a pas besoin dâ€™Ã©crire nous-mÃªme la condition dâ€™arrÃªt â€” Python sâ€™en charge en parcourant toute la sÃ©quence.
{{% /notice %}}


## 6. Sortir dâ€™une boucle plus tÃ´t : `break`

Parfois, on veut **interrompre la boucle** avant la fin. On peut utiliser `break`.

**Exemple :**
```python
for i in range(10):
    if i == 5:
        break
    print(i)
```

Cette boucle sâ€™arrÃªte dÃ¨s que `i == 5`. RÃ©sultat : affiche 0 Ã  4.


## 7. Importance de lâ€™ordre logique

- Il faut toujours penser Ã  la **logique du dÃ©roulement** du programme.
- Un programme **se lit de haut en bas**.
- Une mauvaise organisation peut conduire Ã  des **rÃ©sultats erronÃ©s**.
- Lâ€™ordre : **entrÃ©e â†’ traitement â†’ sortie**
- Exemple courant dâ€™erreur : utiliser une variable **avant de lui avoir donnÃ© une valeur**.

ðŸ“Œ **Exemple**
```python
# Mauvais ordre :
print(resultat)
resultat = 5 + 2
# Erreur : la variable n'existe pas encore
```

---

## 8. ActivitÃ© pratique en classe

**Contexte scientifique** : Lorsquâ€™un cafÃ© chaud est laissÃ© sur une table, sa tempÃ©rature diminue avec le temps. La loi de Newton du refroidissement modÃ©lise cette situation :

```
Formule : T(t+1) = T(t) - k * (T(t) - T_env)
```
oÃ¹ :

`T(t)` est la tempÃ©rature Ã  lâ€™instant t
`T_env` est la tempÃ©rature ambiante
`k` est une constante de refroidissement


>Utiliser le fichier semaine2.ipynb se trouvant sur Moodle/Teams

---

## 9. ActivitÃ©s Ã  faire Ã  la maison

- RÃ©viser la matiÃ¨re d'aujourd'hui, refaites les exemples et modifier ou ajouter des variables afin
- Gestion des fichiers et dossiers 
- Lecture du plan de cours (quiz oralement au prochain cours)


