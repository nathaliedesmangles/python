var relearn_searchindex = [
  {
    "breadcrumb": "Programmation en sciences",
    "content": "Outils et locaux pour pratiquer À part Visual Studio Code, quels autres logiciels je peux installer sur mon ordinateur personnel pour pratiquer à la maison ? Alternatives à VS Code La sauvegarde automatique dans Visual Studio Code. Sauvegarde dans VS Code Les raccourcis clavier (copier, coller, couper, enregistrer, etc.) Trucs pratiques pour bien coder Où se trouve les touches pour [, ], {, }, @, \u003c, \u003e, etc. sur un clavier QWERTY. Trucs pratiques pour bien coder Dans quels locaux du cégep, je peux aller pratiquer ? Locaux avec Python, VS Code et Jupyter Comment déposer un travail sur Moodle ? Déposer un travail sur Moodle À propos de l’installation des outils Est-ce que je peux installer les outils de travail sur votre ordinateur personnel (Windows 11) ? Oui. Cliquez ICI pour voir comment\nÀ propos des évaluations Faut-il remettre les exercices du cours à faire avant le cours ? Non. Ceci dit, si vous voulez augmenter vos chances de réussite, ces exercices vous aideront à identifier très tôt là où vous avez besoin de poser des questions et plus pratiquer.\nFaut-il remettre les ateliers ? Oui. Il ne sont pas notés, mais ils servent à ce que vous pratiquez et à voir où sont les difficultés des étudiants.\nQuand faut-il remettre les ateliers ? Chaque semaine, au plus tard à la fin du cours, à moins d’un avis contraire de l’enseignante.\nPuis-je avoir les solutions des exercices des cours ? Oui. Ils sont faits en classe et ajoutés ICI au fur et à mesure.\nPuis-je avoir les solutions des ateliers ? Oui. Ils sont ajoutés ICI au fur et à mesure.\nQuelle date est l’examen ? Voir le plan de cours accompagné du calendrier scolaire/répartition des semaines.\nVoir la page Séances du cours\nQu’avons-nous droit pour les examens ? Évaluation 1\nÉvaluation 2\nÉvaluation intégratrice\nCombien vaut l’examen ? Évaluation 1\nÉvaluation 2\nÉvaluation intégratrice\nSur quoi portera l’examen ? Évaluation 1\nÉvaluation 2\nÉvaluation intégratrice\nCombien vaut le projet final ? Informations Grille d’évaluation du projet\nHoraire de l’enseignante Horaire\nDivers Créer un raccourci vers un site sur Edge\nQue signifient les icônes de OneDrive ?\ncomprendre le sens des icônes",
    "description": "Outils et locaux pour pratiquer À part Visual Studio Code, quels autres logiciels je peux installer sur mon ordinateur personnel pour pratiquer à la maison ? Alternatives à VS Code La sauvegarde automatique dans Visual Studio Code. Sauvegarde dans VS Code Les raccourcis clavier (copier, coller, couper, enregistrer, etc.) Trucs pratiques pour bien coder Où se trouve les touches pour [, ], {, }, @, \u003c, \u003e, etc. sur un clavier QWERTY.",
    "tags": [],
    "title": "Foire Aux Questions",
    "uri": "/faq/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e \rFoire Aux Questions",
    "content": "Deux alternatives populaires Si vous cherchez une alternative simple et accessible à VS Code avec Jupyter, Google Colab est une excellente option. Colab est un environnement de notebooks en ligne gratuit, offert par Google, qui ne nécessite aucune installation. Il vous permet d’écrire et d’exécuter du code Python directement dans votre navigateur, tout en profitant d’un accès facile à des bibliothèques scientifiques populaires comme NumPy, pandas, ou matplotlib. C’est l’outil idéal pour débuter en programmation scientifique ou collaborer à distance, puisqu’il s’intègre à Google Drive et permet de partager vos notebooks aussi facilement qu’un document Google Docs.\nDe son côté, PyCharm est un environnement de développement intégré (IDE) puissant conçu spécialement pour Python. Contrairement à Google Colab, il s’installe sur votre ordinateur, mais offre une panoplie de fonctionnalités avancées comme l’autocomplétion intelligente, le débogueur intégré, et la gestion de projets complexes. Pour les débutants ou les utilisateurs intermédiaires qui souhaitent aller plus loin que les notebooks Jupyter, PyCharm représente une solution robuste et professionnelle. Il existe en version gratuite (Community) et en version payante (Professional) avec essai gratuit.\rGoogle Colab, ou Colaboratory, est un service cloud gratuit proposé par Google, basé sur Jupyter Notebook. Colab permet d’exécuter du code Python directement dans le navigateur sans nécessiter de configuration préalable, tout en offrant un accès gratuit aux processeurs graphiques, pour accélérer les calculs.\nAccéder à Google Colab Pour commencer à utiliser Google Colab, suivez ces étapes simples :\nMéthode 1: Via le site de Google Colab Allez sur le site: Google Colab. Cliquez sur le bouton Open Colab. Si la fenêtre Ouvrir le notebook s’ouvre, cliquez sur le bouton + Nouveau notebook pour créer un nouveau notebook. Sinon, une fois sur l’interface de Colab, vous pouvez créer un nouveau notebook en utilisant le menu Fichier et en sélectionnant Nouveau notebook. Les notebooks Colab permettent d’écrire et d’exécuter du code Python. Par exemple, pour exécuter une cellule de code, cliquez dessus et appuyez sur le bouton de lecture ou utilisez le raccourci clavier Ctrl+Entrée.\nMéthode 2: Via votre compte Google Drive (Si vous en avez un) Ouvrez votre compte Google Drive, cliquez sur Nouveau, puis sur Plus et sélectionnez Google Colaboratory. Importer un fichier de l’ordinateur vers Colab Pour importer un fichier .ipynb (notebook Jupyter) ou .csv (fichier de données) depuis votre ordinateur local vers Google Colab, vous pouvez utiliser l’une des deux méthodes suivantes :\nMéthode 1 : Utiliser l’interface de Google Colab (plus simple) Pour un fichier .ipynb : Va sur https://colab.research.google.com/ Clique sur l’onglet “Téléverser” (Upload). Sélectionne ton fichier .ipynb depuis ton ordinateur. Pour un fichier .csv : Dans un notebook Colab ouvert, exécute la cellule suivante :\nfrom google.colab import files uploaded = files.upload()\rCela ouvrira une boîte de dialogue pour téléverser des fichiers.\nUne fois le fichier .csv téléversé, tu peux l’utiliser comme suit :\nimport pandas as pd df = pd.read_csv('nom_du_fichier.csv') df.head()\rMéthode 2 : Monter Google Drive et accéder aux fichiers Si tu veux garder les fichiers disponibles à long terme :\nMonte ton Google Drive :\nfrom google.colab import drive drive.mount('/content/drive')\rAccède aux fichiers (ex. un .csv) avec un chemin comme :\ndf = pd.read_csv('/content/drive/MyDrive/chemin/vers/fichier.csv')\rUtilisation des bibliothèques Python Colab permet d’utiliser des bibliothèques populaires pour l’analyse et la visualisation des données. Par exemple, pour générer des données aléatoires avec NumPy et les visualiser avec Matplotlib :\nimport numpy as np import matplotlib.pyplot as plt ys = 200 + np.random.randn(100) x = [x for x in range(len(ys))] plt.figure(figsize=(10, 6)) plt.plot(x, ys, '-') plt.fill_between(x, ys, 195, where=(ys \u003e 195), facecolor='g', alpha=0.6) plt.show()\rLes notebooks Colab sont enregistrés dans votre compte Google Drive, ce qui facilite le partage et la collaboration. Vous pouvez partager vos notebooks avec d’autres utilisateurs, qui peuvent les commenter ou les modifier.\nPour en savoir plus sur Colab Lire ce notebook\nDéveloppé par JetBrains, PyCharm est à ce jour une plateforme très populaire pour Python. Cette plateforme hybride est couramment utilisée pour le développement d’applications Python, et notamment par de grandes entreprises telles que Twitter, Facebook, Amazon ou Pinterest.\nCompatible avec Windows, Linux et macOS, PyCharm contient des modules et des packages aidant les développeurs à programmer des logiciels avec Python plus rapidement et avec moins d’efforts.\nInstallation et configuration Télécharger PyCharm Téléchargez PyCharm en cliquant sur le lien de téléchargement.\nCliquez sur le bouton Download\nSauvegardez le fichier .exe (en date de juin 2025, c’est pycharm-2025.1.1.1.exe) Installation Les instructions varient selon votre système d’exploitation. Pour Windows: Lancez l’installation en cliquant deux fois sur le fichier pycharm-2025.1.1.1.exe téléchargé précédemment. Autorisez l’application Suivez les étapes en cliquant sur *Next. Cochez les cases de configuration de PyCharm, puis cliquez sur Next, puis Install Patientez, le temps que l’installation se fasse6. (environ 2-3 minutes). Redémarrer votre ordinateur. Deux choix possibles: Choisir l’option Reboot now, puis cliquez sur Finish. Choisir l’option I want to manually reboot later, pour redémarrer l’ordinateur plus tard. Cliquez sur Finish. Lancer PyCharm Retrouvez l’application PyCharm à l’aide de la loupe Recherche sur la barre des tâches Lors du premier lancement de PyCharm, il vous sera demandé de vous connecter à votre compte JetBrains ou de démarrer une évaluation gratuite.\nÉcran d’accueil Lorsque vous ouvrez PyCharm pour la première fois, vous êtes accueilli par l’écran d’accueil.\nDepuis l’écran d’accueil de PyCharm, vous pouvez explorer cinq sections principales :\nOnglet “Learn PyCharm” : il contient des liens vers la documentation et d’autres ressources. Vous pouvez également vous inscrire à l’outil interactif “Feature Trainer”, conçu pour vous enseigner rapidement des astuces de productivité dans PyCharm.\nOnglet “Plugins” : il vous permet d’installer des extensions supplémentaires comme des thèmes personnalisés ou des raccourcis clavier (keymaps), utiles si vous venez d’un autre éditeur ou IDE.\nKeymaps : installer des keymaps facilite la transition depuis d’autres éditeurs. Pour rechercher, commencez à taper “keymaps”, par exemple, et PyCharm vous proposera les keymaps disponibles pour les éditeurs les plus populaires. Choisissez celui qui vous convient le mieux et cliquez pour l’installer.\nSection “Customize” : elle vous permet de modifier certains paramètres courants. Par exemple, vous pouvez changer le thème Darcula pour IntelliJ Light. Vous pouvez également synchroniser l’apparence avec celle de votre système d’exploitation. Si vous avez installé un keymap ou un thème, vous devrez les activer ici.\nOnglet “Projects” : c’est ici que vous pouvez créer, ouvrir ou cloner un projet pour commencer à travailler.\nVidéo sur YouTube L’installation en vidéo\nCréer un premier projet dans PyCharm. Pour cette étape, vous pouvez:\nRegarder la vidéo sur YouTube: vidéo ou Lire (en anglais) les instructions sur le site de PyCharm Comprendre l’interface de PyCharm Pour cette étape, vous pouvez:\nRegarder la vidéo sur YouTube: vidéo Ou Lire le tutoriel sur le site de PyCharm",
    "description": "Deux alternatives populaires Si vous cherchez une alternative simple et accessible à VS Code avec Jupyter, Google Colab est une excellente option. Colab est un environnement de notebooks en ligne gratuit, offert par Google, qui ne nécessite aucune installation. Il vous permet d’écrire et d’exécuter du code Python directement dans votre navigateur, tout en profitant d’un accès facile à des bibliothèques scientifiques populaires comme NumPy, pandas, ou matplotlib. C’est l’outil idéal pour débuter en programmation scientifique ou collaborer à distance, puisqu’il s’intègre à Google Drive et permet de partager vos notebooks aussi facilement qu’un document Google Docs.",
    "tags": [],
    "title": "Alternatives à VS Code",
    "uri": "/faq/alternatives/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e \rFoire Aux Questions",
    "content": "Locaux où se donne le cours 420-SN1-RE A-3820 B-2302 B-2303 B-3376 B-3410 Autres locaux (à confirmer) * *",
    "description": "Locaux où se donne le cours 420-SN1-RE A-3820 B-2302 B-2303 B-3376 B-3410 Autres locaux (à confirmer) * *",
    "tags": [],
    "title": "Locaux avec Python",
    "uri": "/faq/locaux_python/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences",
    "content": "Installer les outils de travail Se connecter à OneDrive Fichiers et répertoires/dossiers Utiliser Visual Studio Code (VS Code) Sauvegarde dans VS Code Déboguer dans VS Code Utiliser un bloc-note Jupyter Astuces et touches spéciales Markdown pour les rapports",
    "description": "Installer les outils de travail Se connecter à OneDrive Fichiers et répertoires/dossiers Utiliser Visual Studio Code (VS Code) Sauvegarde dans VS Code Déboguer dans VS Code Utiliser un bloc-note Jupyter Astuces et touches spéciales Markdown pour les rapports",
    "tags": [],
    "title": "Outils de développement",
    "uri": "/outils_dev/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e \rOutils de développement",
    "content": "Cliquer sur la petite flèche à droite du menu des applications dans la barre des tâches de Windows afin de faire apparaître les applications masquées.\nEffectuer un clic droit sur le logo de OneDrive (s’il n’est pas connecté, il apparaît grisé et barré).\nCliquer sur « Se connecter ». Nom d’utilisateur : Le même que pour se connecter sur les ordinateurs du Collège, suivi de @cmontmorency.qc.ca.\nil s’agit des 7 derniers chiffres du numéro de DA.\nMot de passe : Le même que pour le Wi-Fi ou les ordinateurs du Collège.\nLe mot de passe initial se trouve dans Col.NET → Dossier personnel → Autres informations\nSi aucun mot de passe est affiché ? Votre compte n’est peut-être pas encore créé. Réessayez plus tard.\nSi la connexion a échouée ? Réessayez dans quelques heures. Si le problème dure plus de 48h, faites une demande sur le portail de service.\nCliquer sur Suivant lorsqu’un message s’affiche disant : « Sécurisons votre compte ».\nPour configurer l’authentification multifacteur (MFA) avec un téléphone :\nCliquer sur « Je veux configurer une autre méthode » Suivre l’étape ci-dessous Sur votre téléphone, installez l’application : Microsoft Authenticator (disponible dans le Play Store ou App Store)\nCliquez sur Suivant deux fois sur l’ordinateur.\nSur la page qui affiche un code QR :\nOuvrir l’application sur votre téléphone Appuyer sur le + Choisir Compte professionnel ou scolaire Choisir Analyser le code QR Numériser le code QR affiché à l’écran de votre ordinateur Votre compte s’affiche dans l’application.\nSur l’ordinateur, cliquer sur Suivant\nDeux chiffres apparaissent à l’écran :\nEntrez-les sur votre téléphone Cliquer sur Suivant, puis Terminé\nVous avez la possibilité d’installer OneDrive sur votre téléphone mobile :\nSi vous souhaitez le faire, cliquer sur « Télécharger l’application mobile ». Une page web va s’ouvrir dans votre navigateur par défaut. Il vous suffira de suivre les instructions pour procéder à l’installation. Si vous ne souhaitez pas utiliser l’application mobile ou préférez la configurer plus tard, cliquer sur « Plus tard ». Cliquer sur « Ouvrir mon dossier OneDrive ». L’explorateur de fichiers va s’ouvrir dans le dossier contenant les fichiers synchronisés, et la synchronisation va commencer. OneDrive est maintenant prêt à être utilisé !\nDécouvrir la signification des icônes OneDrive Découvrir la signification des icônes OneDrive Découvrir comment ajouter un compte dans OneDrive Découvrez comment ajouter un compte dans OneDrive",
    "description": "Cliquer sur la petite flèche à droite du menu des applications dans la barre des tâches de Windows afin de faire apparaître les applications masquées.\nEffectuer un clic droit sur le logo de OneDrive (s’il n’est pas connecté, il apparaît grisé et barré).\nCliquer sur « Se connecter ». Nom d’utilisateur : Le même que pour se connecter sur les ordinateurs du Collège, suivi de @cmontmorency.qc.ca.\nil s’agit des 7 derniers chiffres du numéro de DA.",
    "tags": [],
    "title": "Connexion à OneDrive – Compte scolaire",
    "uri": "/outils_dev/onedrive/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e \rOutils de développement",
    "content": "Qu’est-ce qu’un fichier et un dossier ? Fichier : Un document ou un programme (ex. : texte, image, tableur). Exemples : rapport.docx, photo.jpg, budget.xlsx\nDossier (ou répertoire) : Contenant qui regroupe des fichiers et d’autres dossiers. Exemple : le dossier Documents contient des fichiers Word, PDF, etc.\nL’explorateur de fichiers Ouvrir l’explorateur : Raccourci clavier : Windows + E Ou clique sur l’icône 📁 dans la barre des tâches Principales zones : Volet de navigation à gauche : accès rapide à Ce PC, Téléchargements, Documents, etc. Zone principale : affiche le contenu du dossier sélectionné Barre d’adresse : montre le chemin du dossier actuel (ex. : Ce PC \u003e Documents \u003e Travaux) Barre d’outils : bouton pour créer, renommer, copier, coller, supprimer… Créer et organiser ses fichiers Créer un dossier : Clique droit dans un espace vide Sélectionne Nouveau \u003e Dossier Nomme le dossier (ex. : Projet Science) Renommer un fichier ou dossier : Clique droit \u003e Renommer Ou clique lentement deux fois sur le nom Déplacer un fichier : Glisser-déposer vers un autre dossier Ou : Copier (Ctrl + C) \u003e Coller (Ctrl + V) dans l’autre dossier Ou : Couper (Ctrl + X) \u003e Coller (Ctrl + V) pour le déplacer Supprimer : Sélectionner l’élément \u003e touche Suppr Ou clic droit \u003e Supprimer Chemin d’accès Un chemin indique l’emplacement d’un fichier.\nExemple :\nC:\\Utilisateurs\\Nathalie\\Documents\\Projet\\rapport.docx\rC: → Disque dur principal Utilisateurs\\Nathalie → ton profil Documents\\Projet → dossiers imbriqués rapport.docx → fichier Extensions de fichiers L’extension indique le type de fichier. (ex. .docx, .jpg, .pdf, .xlsx, .mp3, etc.)\nPar défaut, Windows cache les extensions. Pour les voir :\nOuvre un dossier Clique sur Affichage \u003e Afficher \u003e Extensions de noms de fichiers Rechercher un fichier Méthode 1 : Utiliser la barre de recherche de la barre des tâches\nMéthode 1\nMéthode 2 : Utiliser l’Explorateur de fichiers\nMéthode 2\nBonnes pratiques Nomme les fichiers de manière claire (ex. : rapport_bio_2025.docx) Organise ton travail par sujets ou projets dans des dossiers Sauvegarde tes fichiers importants dans OneDrive ou sur une clé USB Évite les accents et espaces dans les noms de fichiers si tu veux les utiliser dans des programmes (ex. : travaux_chimie au lieu de travaux chimie)",
    "description": "Qu’est-ce qu’un fichier et un dossier ? Fichier : Un document ou un programme (ex. : texte, image, tableur). Exemples : rapport.docx, photo.jpg, budget.xlsx\nDossier (ou répertoire) : Contenant qui regroupe des fichiers et d’autres dossiers. Exemple : le dossier Documents contient des fichiers Word, PDF, etc.\nL’explorateur de fichiers Ouvrir l’explorateur : Raccourci clavier : Windows + E Ou clique sur l’icône 📁 dans la barre des tâches Principales zones : Volet de navigation à gauche : accès rapide à Ce PC, Téléchargements, Documents, etc.",
    "tags": [],
    "title": "Fichiers et répertoires (dossiers)",
    "uri": "/outils_dev/fichiers_dossiers/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e \rOutils de développement",
    "content": "Installation \u0026 premier lancement Aller sur le site officiel : https://code.visualstudio.com Cliquer sur Download for Windows Lancer le fichier téléchargé (VSCodeSetup.exe) Accepter les conditions → clique sur Suivant plusieurs fois Cocher “Add to PATH” si disponible Cliquer sur Installer Lorsque l’installation est terminée, cliquer sur le raccourci Visual Studio Code dans le menu Démarrer ou cherche “Visual Studio Code” dans la barre de recherche Tu devrais voir l’écran d’accueil (Bienvenue ou Welcome)\nInterface principale Barre d’activité (gauche) : accès à l’explorateur, extensions, etc. Volet Explorateur : tes fichiers/sous-dossiers. Éditeur : là où tu écris ton code. Barre d’onglets : navigation entre fichiers ouverts. Terminal intégré (en bas, pas visible sur l’image). Barre d’état : info sur format du fichier, erreurs, etc. Lettre En français A Barre d’activités B Volet latéral principal C Groupes d’éditeurs D Panneau E Barre d’état Barre d’activité La barre d’activité située à gauche de l’éditeur, est une zone essentielle de l’interface utilisateur. Elle donne accès à plusieurs vues et fonctionnalités importantes. Elle contient les boutons suivants :\nLe bouton Explorateur (Explorer) vous donne accès au panneau Explorateur, où vos fichiers apparaîtront lorsque vous ouvrirez un dossier.\nLe bouton Recherche (Search) ouvre le panneau Recherche, où vous pouvez rechercher du texte dans les fichiers d'un dossier ouvert.\nLe bouton Contrôle de code source (Source Control) ouvre le panneau Contrôle de code source, où vous pouvez suivre les modifications apportées à vos fichiers à l'aide de Git.\nLe bouton Exécuter et déboguer (Run and Debug) vous donne accès au débogueur VS Code.\nLe bouton Extensions ouvre un panneau où l'on peut installer et gérer les extensions de VS Code. Les extensions sont des modules qui ajoutent des fonctionnalités à VS Code.\nEn fonction des extensions que vous avez installées, la barre d’activité peut inclure d’autres icônes.\nVidéo YouTube: Interface de VS Code\nPersonnaliser l’apparence Menu : Fichier \u003e Préférences \u003e Thème de couleur Essaie “Dark+”, “Light”, ou installe de nouveaux thèmes dans les extensions Ouvrir ou créer un projet Fichier → Ouvrir un dossier… (Ctrl+K Ctrl+O). Crée ou sélectionne un dossier, puis clique Sélectionner un dossier. Le dossier s’affiche dans l’Explorateur de VS Code, prêt à être utilisé . Créer \u0026 éditer des fichiers Sélectionner la vue Explorateur dans la barre d’activité et sélectionner le bouton Nouveau fichier… pour créer un nouveau fichier dans votre espace de travail. Saisissez le nom du fichier et appuyez sur Entrée. Un fichier est ajouté à votre espace de travail et un éditeur s’ouvre dans la zone principale de la fenêtre. Exécuter du code Pour un script Python ou un bloc-notes Jupyter :\nOuvre script.py ou script.ipynb Clique sur le bouton Run ▶️ en haut à droite ou utilise le raccourci Ctrl + F5 Astuces clavier \u0026 productivité Glisser-déposer fichiers pour les ouvrir. Sauvegarde souvent avec Ctrl + S Commenter/décommenter une ligne : Ctrl+/. Utilise Ctrl + P pour ouvrir rapidement un fichier dans ton projet Aller à une ligne : Ctrl+G. Formatage : Ctrl+K Ctrl+F. Renommer symboles : F2. IntelliSense : suggestions automatiques avec Ctrl+Space Références Tutorial: Get started with Visual Studio Code Interface de VS Code Getting started with Visual Studio Code Trucs \u0026 Astuces",
    "description": "Installation \u0026 premier lancement Aller sur le site officiel : https://code.visualstudio.com Cliquer sur Download for Windows Lancer le fichier téléchargé (VSCodeSetup.exe) Accepter les conditions → clique sur Suivant plusieurs fois Cocher “Add to PATH” si disponible Cliquer sur Installer Lorsque l’installation est terminée, cliquer sur le raccourci Visual Studio Code dans le menu Démarrer ou cherche “Visual Studio Code” dans la barre de recherche Tu devrais voir l’écran d’accueil (Bienvenue ou Welcome)",
    "tags": [],
    "title": " ",
    "uri": "/outils_dev/vs-code/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e \rFoire Aux Questions",
    "content": "1. Ouvrir Microsoft Edge Cliquez sur le bouton Démarrer de Windows. Tapez Edge et ouvrez l’application Microsoft Edge. 2. Accéder à la page de démarrage Par défaut, Edge ouvre la page Nouvel onglet (Start / Microsoft Start).\nSi ce n’est pas le cas :\nCliquez sur le menu … (en haut à droite). Sélectionnez Paramètres \u003e Démarrage, page d’accueil et nouveaux onglets. Assurez-vous que Nouvel onglet est bien sélectionné. 3. Ajouter un nouveau raccourci Sur la page d’accueil (nouvel onglet), repérez la section Sites principaux ou Sites rapides (juste sous la barre de recherche Bing).\nCliquez sur l’icône “+ Ajouter un site”. Une fenêtre s’ouvre avec deux champs :\nNom du site : entrez un nom court (par ex. Programmation). URL du site : collez l’adresse (par ex. https://python-a25.netlify.app). 4. Valider et retrouver le raccourci Cliquez sur Ajouter. Le raccourci (avec l’icône/logo du site si disponible) apparaît maintenant dans vos Sites rapides. Vous pouvez le déplacer par glisser-déposer pour changer son ordre. 5. (Optionnel) Personnaliser l’affichage Cliquez sur la roue dentée ⚙️ en haut à droite de la page.\nDans Disposition de la page, vous pouvez :\nChoisir d’afficher plus ou moins de Sites rapides. Activer/désactiver les icônes de raccourcis.",
    "description": "1. Ouvrir Microsoft Edge Cliquez sur le bouton Démarrer de Windows. Tapez Edge et ouvrez l’application Microsoft Edge. 2. Accéder à la page de démarrage Par défaut, Edge ouvre la page Nouvel onglet (Start / Microsoft Start).\nSi ce n’est pas le cas :\nCliquez sur le menu … (en haut à droite). Sélectionnez Paramètres \u003e Démarrage, page d’accueil et nouveaux onglets. Assurez-vous que Nouvel onglet est bien sélectionné. 3. Ajouter un nouveau raccourci Sur la page d’accueil (nouvel onglet), repérez la section Sites principaux ou Sites rapides (juste sous la barre de recherche Bing).",
    "tags": [],
    "title": "Ajouter un raccourci vers une URL dans Edge",
    "uri": "/faq/raccourci_edge/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e \rOutils de développement \u003e ",
    "content": "Extensions de débogage VS Code prend en charge le débogage pour Node.js et peut déboguer JavaScript, TypeScript, et d’autres langages compilés en JavaScript. Pour d’autres langages et environnements d’exécution, il existe des extensions de débogage dans le Marketplace de VS Code.\nPar exemple pour Python:\nLe débogueur est un outil utile qui vous permet d’inspecter le flux d’exécution de votre code et d’identifier plus facilement les erreurs, ainsi que d’explorer comment vos variables et données changent au fur et à mesure que votre programme s’exécute.\nVous pouvez commencer le débogage en définissant un point d’arrêt dans votre projet Python en cliquant dans la marge à côté de la ligne que vous souhaitez inspecter.\nLes points d’arrêt Définition\rUn point d’arrêt est un marqueur que vous placez dans votre code pour indiquer au débogueur où arrêter l’exécution du programme. Cela vous permet d’inspecter l’état de votre application à ce moment précis, de vérifier les valeurs des variables et de suivre le flux d’exécution du code.\nAjout de points d’arrêt Cliquez dans la marge gauche à côté d’une ligne de code. Vous pouvez également sélectionner la ligne et appuyer sur F9, sélectionner Déboguer \u003e Basculer le point d'arrêt, ou faire un clic droit et sélectionner Point d'arrêt \u003e Insérer un point d'arrêt.\nLe point d’arrêt apparaît sous forme de point rouge dans la marge gauche.\nLorsque vous déboguez, une fois que votre programme atteint le point d’arrêt, l’exécution s’arrête au point d’arrêt, avant que le code sur cette ligne ne soit exécuté. Vous pourrait alors suivre les données dans la console de débogage Python, et de progresser dans votre programme en utilisant la barre d’outils de débogage.\nVoici quelques instructions générales pour travailler avec les points d’arrêt.\nLe point d’arrêt est un bascule. Vous pouvez cliquer dessus, appuyer sur F9, ou utiliser Déboguer \u003e Basculer le point d'arrêt pour le supprimer ou le réinsérer. Pour désactiver un point d’arrêt sans le supprimer, survolez-le ou faites un clic droit dessus, et sélectionnez Désactiver le point d'arrêt. Les points d’arrêt désactivés apparaissent sous forme de points vides dans la marge gauche ou la fenêtre des points d’arrêt. Pour réactiver un point d’arrêt, survolez-le ou faites un clic droit dessus, et sélectionnez Activer le point d'arrêt. Interface utilisateur du débogueur Vue Exécuter et Déboguer : Affiche toutes les informations liées à l’exécution et au débogage. Barre d’outils de débogage : Contient des boutons pour les actions de débogage courantes. Console de débogage : Permet de voir et d’interagir avec la sortie de votre code en cours d’exécution. Barre latérale de débogage : Permet d’interagir avec la pile d’appels, les points d’arrêt, les variables et les variables surveillées. Démarrer le débogage Pour commencer le débogage, initialisez le débogueur en appuyant sur F5. Comme c’est la première fois que vous déboguez ce fichier, un menu de configuration s’ouvrira, vous permettant de sélectionner le type d’application que vous souhaitez déboguer. S’il s’agit d’un script Python, vous pouvez sélectionner Fichier Python ou Bloc-notes Jupyter.\nVue Exécuter et Déboguer : Sélectionnez l’icône Exécuter et Déboguer dans la barre d’activité ou utilisez le raccourci clavier ⇧⌘D (Windows, Linux Ctrl+Shift+D).\nActions de débogage Une fois qu’une session de débogage commence, la barre d’outils de débogage apparaîtra en haut de l’éditeur.\nbarre menu\nAction Raccourci Explication Continue / Pause F5 Continue : Reprendre l’exécution normale du programme/script (jusqu’au prochain point d’arrêt).\nPause : Inspecter le code en cours d’exécution à la ligne actuelle et déboguer ligne par ligne. Step Over F10 Exécuter la méthode suivante comme une seule commande sans inspecter ou suivre ses étapes internes. Step Into F11 Entrer dans la méthode suivante pour suivre son exécution ligne par ligne. Step Out Shift+F11 Lorsqu’on est dans une méthode ou une sous-routine, revenir au contexte d’exécution précédent en exécutant les lignes restantes de la méthode actuelle comme une seule commande. Restart Ctrl+Shift+F5 Terminer l’exécution actuelle du programme et recommencer le débogage en utilisant la configuration de lancement actuelle. Stop Shift+F5 Terminer l’exécution actuelle du programme. Références Deboguer dans VS Code\nDeboguer du Python dans VS Code\nGuide de démarrage rapide pour Python dans VS Code",
    "description": "Extensions de débogage VS Code prend en charge le débogage pour Node.js et peut déboguer JavaScript, TypeScript, et d’autres langages compilés en JavaScript. Pour d’autres langages et environnements d’exécution, il existe des extensions de débogage dans le Marketplace de VS Code.\nPar exemple pour Python:\nLe débogueur est un outil utile qui vous permet d’inspecter le flux d’exécution de votre code et d’identifier plus facilement les erreurs, ainsi que d’explorer comment vos variables et données changent au fur et à mesure que votre programme s’exécute.",
    "tags": [],
    "title": "Déboguer dans VS Code",
    "uri": "/outils_dev/vs-code/debogueur/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e \rOutils de développement \u003e ",
    "content": "Sur cette page, vous trouverez les étapes pour sauvegarder vos programmes dans VS Code.\nSauvegarde automatique Si un rond est présent à droit du nom du fichier dans l’onglet en haut, c’est que votre travail n’est PAS sauvegardé (comme dans l’exemple ci-dessous).\nPour ACTIVER la sauvegarde automatique, allez dans fichier, puis cliquez sur Enregistrement automatique.\nVous devriez maintenant voir un crochet à gauche de cette option.\nIl devrait maintenant avoir un X à gauche du nom du fichier dans l’onglet du haut. Ce qui signifie que le fichier est sauvegardé.\nEnregistrer sous Lorsque vous ouvrez un fichier que vous avez téléchargé (de la page du cours), vous pouvez l’enregistrer sous afin qu’il se sauvegarde au bon endroit. Par exemple dans votre One Drive du collège.\nSélectionnez Fichier, puis enregistrer sous.\nAssurez de choisir le bon dossier (exemple: OneDrive\\420-SN1-RE\\semaine_2). Vous pouvez renommer le fichier si vous le désirez. Ensuite, appuyez sur Enregistrer.\nOuvrir le dossier Dans le panneau de gauche, sélectionnez Ouvrir le dossier. L’option Ouvrir le dossier est aussi dans l’onlget Fichier.\nSélectionnez le dossier dans lequel vous voulez travailler.\nDans le panneau de gauche, vous devriez avoir tous les dossiers et fichiers contenus dans le dossier que vous avez choisi.\nDans l’exemple ci-dessous, nous pouvons voir le fichier (programme.ipynb) qui a été sauvegardé dans la semaine 3.",
    "description": "Sur cette page, vous trouverez les étapes pour sauvegarder vos programmes dans VS Code.\nSauvegarde automatique Si un rond est présent à droit du nom du fichier dans l’onglet en haut, c’est que votre travail n’est PAS sauvegardé (comme dans l’exemple ci-dessous).\nPour ACTIVER la sauvegarde automatique, allez dans fichier, puis cliquez sur Enregistrement automatique.\nVous devriez maintenant voir un crochet à gauche de cette option.\nIl devrait maintenant avoir un X à gauche du nom du fichier dans l’onglet du haut.",
    "tags": [],
    "title": "Sauvegarde dans VS Code",
    "uri": "/outils_dev/vs-code/sauvegarde/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e \rOutils de développement",
    "content": "Tutoriel pour VS Code et Jupyter Notebook Voici un fichier qui vous expliquera comment utiliser jupyter notebook dans VS Code : Tutoriel pour utiliser Jupyter avec VS Code\nBlocs-notes Jupyter dans VS Code Jupyter (anciennement IPython Notebook) est un projet open source qui vous permet de combiner facilement du texte Markdown et du code source Python exécutable sur un canevas appelé notebook.\nVisual Studio Code prend en charge l’utilisation des blocs-notes Jupyter en mode natif et via des fichiers de code Python.\nCréer, ouvrir et enregistrer des blocs-notes Jupyter Utiliser des cellules de code Jupyter Afficher, inspecter et filtrer les variables à l’aide de l’Explorateur de variables et de la visionneuse de données Se connecter à un serveur Jupyter distant Déboguer un bloc-notes Jupyter Configuration de votre environnement Pour utiliser Python dans Jupyter Notebooks, vous devez activer un environnement Anaconda dans VS Code ou un autre environnement Python dans lequel vous avez installé le package Jupyter. Pour sélectionner un environnement, utilisez la commande Python : Sélectionner un interpréteur dans la palette de commandes (Ctrl+Maj+P).\nUne fois l’environnement approprié activé, vous pouvez créer et ouvrir un bloc-notes Jupyter, vous connecter à un serveur Jupyter distant pour exécuter des cellules de code et exporter un bloc-notes Jupyter sous forme de fichier Python.\nApprobation de l’espace de travail Lorsque vous commencez à utiliser Jupyter Notebooks, vous devez vous assurer que vous travaillez dans un espace de travail approuvé. Du code nuisible peut être incorporé dans des blocs-notes et la fonctionnalité d’approbation de l’espace de travail vous permet d’indiquer quels dossiers et leur contenu doivent autoriser ou restreindre l’exécution automatique de code.\nSi vous tentez d’ouvrir un bloc-notes lorsque VS Code se trouve dans un espace de travail non approuvé exécutant le mode restreint, vous ne pourrez pas exécuter de cellules et les sorties enrichies seront masquées.\nCréer ou ouvrir un bloc-notes Jupyter Vous pouvez créer un bloc-notes Jupyter en exécutant la commande Créer : un nouveau bloc-notes Jupyter à partir de la palette de commandes (Ctrl+Maj+P) ou en créant un fichier dans votre espace de travail..ipynb\nEnsuite, sélectionnez un noyau à l’aide du sélecteur de noyau en haut à droite.\nAprès avoir sélectionné un noyau, le sélecteur de langue situé en bas à droite de chaque cellule de code sera automatiquement mis à jour vers la langue prise en charge par le noyau.\nSi vous disposez d’un bloc-notes Jupyter, vous pouvez l’ouvrir en cliquant avec le bouton droit sur le fichier et en l’ouvrant avec VS Code, ou via l’explorateur de fichiers VS Code.\nCellules en cours d’exécution Exécuter une seule cellule de code Une fois votre code ajouté, vous pouvez exécuter une cellule à l’aide de l’icône Exécuter à gauche de la cellule et la sortie sera affichée sous la cellule de code.\nPour exécuter une cellule de code sélectionnée, vous pouvez également utiliser des raccourcis clavier en mode commande et en mode édition.\nCtrl+Entrée exécute la cellule actuellement sélectionnée. Maj+Entrée exécute la cellule actuellement sélectionnée et insère une nouvelle cellule juste en dessous (le focus se déplace vers la nouvelle cellule). Alt+Entrée exécute la cellule actuellement sélectionnée et insère une nouvelle cellule juste en dessous (le focus reste sur la cellule actuelle). Exécuter plusieurs cellules de code L’exécution de plusieurs cellules de code peut être accomplie de plusieurs façons. Vous pouvez utiliser la double flèche dans la barre d’outils principale de l’éditeur de bloc-notes pour exécuter toutes les cellules du bloc-notes ou en sélectionnant Exécuter tout, Exécuter tout au-dessus ou Exécuter tout en dessous au-dessus ou en dessous de la cellule de code actuelle.\nExécuter des cellules dans la section Pour exécuter plus facilement des cellules associées dans un bloc-notes, vous pouvez exécuter des cellules regroupées par un en-tête de section Markdown avec l’action Exécuter les cellules dans la section. Cette action est disponible dans la vue Plan du bloc-notes et pour les éléments Sticky Scroll.\nDans les éléments Sticky Scroll, cliquez avec le bouton droit sur l’en-tête de votre choix et exécutez la section via l’action dans le menu contextuel. Dans la vue Plan, sélectionnez l’icône de barre d’outils qui apparaît au survol ou à la sélection, puis exécutez une seule cellule ou une section de cellules via les actions présentées.\nVidéo: Exécuter des cellules\nEnregistrez votre bloc-notes Jupyter Vous pouvez enregistrer votre bloc-notes Jupyter à l’aide du raccourci clavier Ctrl+S ou Fichier \u003e enregistrer.\nExporter votre bloc-notes Jupyter Vous pouvez exporter un bloc-notes Jupyter sous forme de fichier Python, de fichier PDF ou de fichier HTML. Pour exporter, sélectionnez ... \u003e Exporter dans la barre d’outils principale. Une liste déroulante d’options de format de fichier vous est alors présentée.\nNote: Pour l’exportation PDF, vous devez avoir installé TeX (Installation Tex). Si vous ne le faites pas, vous serez averti que vous devez l’installer lorsque vous sélectionnerez l’option PDF. Sachez également que si vous avez une sortie SVG uniquement dans votre bloc-notes, elle ne sera pas affichée dans le PDF. Pour avoir des graphiques SVG dans un PDF, assurez-vous que votre sortie inclut un format d’image non SVG, ou bien vous pouvez d’abord exporter au format HTML, puis enregistrer au format PDF à l’aide de votre navigateur.\nUtiliser des cellules de code dans l’éditeur de bloc-notes L’éditeur de bloc-notes facilite la création, la modification et l’exécution de cellules de code dans votre bloc-notes Jupyter.\nCréer une cellule de code Par défaut, un bloc-notes vierge aura une cellule de code vide pour commencer et un bloc-notes existant en placera une en bas. Ajoutez votre code à la cellule de code vide pour commencer.\nModes de cellule de code Lorsque vous utilisez des cellules de code, une cellule peut être dans trois états : non sélectionné, mode commande et mode édition. Une barre verticale à gauche d’une cellule de code et de la bordure de l’éditeur indique l’état actuel d’une cellule. Lorsqu’aucune barre n’est visible, la cellule est désélectionnée. Lorsqu’une cellule est sélectionnée, elle peut être en mode commande ou en mode édition.\nEn mode commande, une barre verticale pleine apparaîtra à gauche de la cellule. La cellule peut être utilisée et accepte les commandes au clavier.\nEn mode édition, une barre verticale pleine est reliée par une bordure autour de l’éditeur de cellules. Le contenu de la cellule (code ou Markdown) peut être modifié.\nPour changer de mode, vous pouvez utiliser votre clavier ou votre souris. Sur votre clavier, appuyez sur la touche Entrée pour passer en mode édition ou sur la touche Échap pour passer en mode commande. Avec votre souris, cliquez sur la barre verticale à gauche de la cellule ou en dehors de la zone code/Markdown dans la cellule de code.\nAjouter des cellules de code supplémentaires Vous pouvez ajouter des cellules de code à l’aide de la barre d’outils principale, de la barre d’outils Ajouter une cellule (visible au survol) et des commandes clavier.\nPour ajouter une nouvelle cellule sous la cellule actuellement sélectionnée, utilisez l’icône plus dans la barre d’outils principale ou la barre d’outils de survol d’une cellule.\nLorsqu’une cellule de code est en mode commande, utilisez la touche A pour ajouter une cellule au-dessus et la touche B pour ajouter une cellule au-dessous de la cellule sélectionnée.\nSélectionnez une cellule de code Vous pouvez modifier une cellule de code sélectionnée à l’aide de la souris ou des touches fléchées haut/bas du clavier. Lorsqu’une cellule de code est en mode commande, vous pouvez également utiliser la touche J (bas) et la touche K (haut).\nSélectionner plusieurs cellules de code Pour sélectionner plusieurs cellules, commencez par une cellule en mode sélectionné. Un arrière-plan rempli indique les cellules sélectionnées. Pour sélectionner des cellules consécutives, maintenez la touche Maj enfoncée et cliquez sur la dernière cellule que vous souhaitez sélectionner. Pour sélectionner un groupe de cellules, maintenez la touche Ctrl enfoncée et cliquez sur les cellules que vous souhaitez ajouter à votre sélection.\nDéplacer une cellule de code Vous pouvez déplacer des cellules vers le haut ou vers le bas dans un bloc-notes par glisser-déposer. Pour les cellules de code, la zone de glisser-déposer se trouve à gauche de l’éditeur de cellule, comme indiqué ci-dessous. Pour les cellules Markdown rendues, vous pouvez cliquer n’importe où pour faire glisser et déposer des cellules.\nPour déplacer plusieurs cellules, vous pouvez utiliser les mêmes zones de glisser-déposer dans n’importe quelle cellule incluse dans la sélection.\nLe raccourci clavier Alt+Flèche déplace également une ou plusieurs cellules sélectionnées.\nSupprimer une cellule de code Pour supprimer du code, vous pouvez utiliser l’icône Supprimer dans la barre d’outils de la cellule de code. Lorsque la cellule de code sélectionnée est en mode commande, vous pouvez utiliser le raccourci clavier dd.\nAnnuler votre dernière modification Vous pouvez utiliser la touche z pour annuler votre modification précédente, par exemple, si vous avez effectué une modification accidentelle, vous pouvez l’annuler à l’état correct précédent, ou si vous avez supprimé une cellule accidentellement, vous pouvez la récupérer.\nBasculer entre le code et Markdown L’éditeur de bloc-notes vous permet de modifier facilement les cellules de code entre Markdown et le code. La sélection du sélecteur de langue en bas à droite d’une cellule vous permettra de basculer entre Markdown et, le cas échéant, toute autre langue prise en charge par le noyau sélectionné.\nVous pouvez également utiliser le clavier pour modifier le type de cellule. Lorsqu’une cellule est sélectionnée et en mode commande, la touche M bascule le type de cellule sur Markdown et la touche Y bascule le type de cellule sur code.\nUne fois Markdown défini, vous pouvez entrer du contenu au format Markdown dans la cellule de code.\nPour afficher des cellules Markdown, vous pouvez cocher la barre d’outils de la cellule ou utiliser les raccourcis clavier Ctrl+Entrée et Maj+Entrée.\nEffacer la sortie ou redémarrer/interrompre le noyau Si vous souhaitez effacer toutes les sorties de cellule de code ou redémarrer/interrompre le noyau, vous pouvez le faire à l’aide de la barre d’outils principale de l’éditeur de bloc-notes.\nActiver/désactiver les numéros de ligne Lorsque vous êtes en mode commande, vous pouvez activer ou désactiver la numérotation des lignes dans une seule cellule de code à l’aide de la touche L.\nPour basculer la numérotation des lignes pour l’ensemble du bloc-notes, utilisez Maj+L en mode commande sur n’importe quelle cellule.\nTable des matières Pour naviguer dans votre bloc-notes, ouvrez l’Explorateur de fichiers dans la barre d’activité. Ouvrez ensuite l’onglet Plan dans la barre latérale.\nNote: Par défaut, le plan n’affichera que Markdown. Pour afficher les cellules de code, activez le paramètre suivant : Contour du bloc-notes \u003e : Afficher les cellules de code.\nPrise en charge d’IntelliSense dans l’éditeur de bloc-notes Jupyter La fenêtre Python Jupyter Notebook Editor contient des informations complètes sur IntelliSense : saisie semi-automatique du code, listes de membres, informations rapides sur les méthodes et conseils de paramètre. Vous pouvez être tout aussi productif en tapant dans la fenêtre de l’éditeur de bloc-notes que dans l’éditeur de code.\nExplorateur de variables et visionneuse de données Dans un bloc-notes Python, il est possible d’afficher, d’inspecter, de trier et de filtrer les variables de votre session Jupyter actuelle. En sélectionnant l’icône Variables dans la barre d’outils principale après avoir exécuté le code et les cellules, vous verrez une liste des variables actuelles, qui seront automatiquement mises à jour au fur et à mesure que les variables sont utilisées dans le code. Le volet des variables s’ouvre en bas du bloc-notes.\nVisionneuse de données Pour plus d’informations sur vos variables, vous pouvez également double-cliquer sur une ligne ou utiliser le bouton Afficher la variable dans la visionneuse de données en regard de la variable pour obtenir une vue plus détaillée d’une variable dans la visionneuse de données.\nVous pouvez également utiliser l’expérience de visualisation des données offerte par d’autres extensions comme Data Wrangler. L’extension Data Wrangler offre une interface utilisateur riche pour afficher des informations sur vos données et vous aide à effectuer le profilage des données, les contrôles qualité, les transformations, etc.\nFiltrage des lignes Le filtrage des lignes dans la visionneuse de données peut être effectué en tapant dans la zone de texte en haut de chaque colonne. Tapez une chaîne que vous souhaitez rechercher et toute ligne contenant cette chaîne dans la colonne sera trouvée :\nSi vous voulez trouver une correspondance exacte, faites précéder votre filtre de ‘=’ :\nSauvegarde des parcelles Pour enregistrer un tracé à partir de votre bloc-notes, il suffit de survoler la sortie et de sélectionner l’icône Enregistrer en haut à droite.\nDéboguer un bloc-notes Jupyter Il existe deux façons différentes de déboguer un notebook Jupyter : un mode plus simple appelé « Run by Line » et un mode de débogage complet.\nNote: Ces deux fonctionnalités nécessitent ipykernel 6+.\nDéboguer par ligne Exécuter par ligne vous permet d’exécuter une cellule une ligne à la fois, sans être distrait par d’autres fonctionnalités de débogage VS Code. Pour commencer, sélectionnez le bouton Exécuter par ligne dans la barre d’outils de la cellule :\nUtilisez le même bouton pour avancer d’une déclaration. Vous pouvez sélectionner le bouton Arrêter la cellule pour arrêter plus tôt ou le bouton Continuer dans la barre d’outils pour continuer à s’exécuter jusqu’à la fin de la cellule.\nDéboguer la cellule Si vous souhaitez utiliser l’ensemble complet des fonctionnalités de débogage prises en charge dans VS Code, telles que les points d’arrêt et la possibilité d’effectuer un pas à pas détaillé dans d’autres cellules et modules, vous pouvez utiliser le débogueur VS Code complet.\nCommencez par définir les points d’arrêt dont vous avez besoin en cliquant dans la marge gauche d’une cellule de bloc-notes. Sélectionnez ensuite le bouton Déboguer la cellule dans le menu en regard du bouton Exécuter. Cela exécutera la cellule dans une session de débogage et s’arrêtera sur vos points d’arrêt dans tout code en cours d’exécution, même s’il se trouve dans une autre cellule ou un autre fichier..py Vous pouvez utiliser la vue Déboguer, la console Déboguer et tous les boutons de la barre d’outils Déboguer comme vous le feriez normalement dans VS Code. Rechercher dans le bloc-notes Vous pouvez effectuer une recherche dans un bloc-notes (ou des parties de celui-ci en filtrant les options de recherche) à l’aide du raccourci clavier Ctrl/Cmd + F. Cliquez sur l’option Filtrer (icône en forme d’entonnoir) pour effectuer une recherche dans :\nEntrée de cellule Markdown (Markdown Source) Sortie de cellule Markdown (Markdown rendu) Entrée de cellule de code (Source de cellule de code) Sortie de cellule de code (Sortie de cellule) Les recherches de bloc-notes sont des entrées de cellule filtrées uniquement par défaut.\nRéférence: Documentation de VS Code",
    "description": "Tutoriel pour VS Code et Jupyter Notebook Voici un fichier qui vous expliquera comment utiliser jupyter notebook dans VS Code : Tutoriel pour utiliser Jupyter avec VS Code\nBlocs-notes Jupyter dans VS Code Jupyter (anciennement IPython Notebook) est un projet open source qui vous permet de combiner facilement du texte Markdown et du code source Python exécutable sur un canevas appelé notebook.\nVisual Studio Code prend en charge l’utilisation des blocs-notes Jupyter en mode natif et via des fichiers de code Python.",
    "tags": [],
    "title": " ",
    "uri": "/outils_dev/jupyter/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e \rOutils de développement",
    "content": "Cette page rassemble une série de petits détails importants pour bien débuter en programmation. Ces astuces visent à rendre l’utilisation du clavier et de l’environnement plus fluide, surtout en contexte de cours avec Jupyter Notebook.\nRaccourcis clavier utiles Copier, couper, coller Ctrl + C : Copie la sélection. Ctrl + X : Coupe la sélection (la sélection sera effacée, mais pourra être collée). Ctrl + V : Colle le contenu précédemment copié ou coupé. Astuce\rSi aucun texte n’est sélectionné, Ctrl + C ou Ctrl + X agit sur toute la ligne courante. Cela permet de déplacer rapidement du code sans avoir à sélectionner manuellement.\nAnnuler et refaire Ctrl + Z : Annule la dernière action (effacement, erreur de frappe…). Ctrl + Y : Refait une action qui a été annulée (rétablir). Supprimer dans les deux directions Retour arrière (← ou Backspace) : Efface le caractère à gauche du curseur. Suppr (ou Delete) : Efface le caractère à droite du curseur. À retenir\rLa touche Suppr permet de corriger plus rapidement sans déplacer le curseur.\nChanger de fenêtre Alt + Tab : Permet de basculer rapidement d’une fenêtre ouverte à une autre (navigateur, Notebook, etc.). Astuce\rTu peux garder Alt enfoncé et appuyer plusieurs fois sur Tab pour faire défiler les fenêtres disponibles.\nDiviser son écran de travail Travailler avec deux fenêtres côte à côte facilite la lecture de consignes tout en codant.\nAvec le clavier : Touche Windows + ← ou → pour coller une fenêtre à gauche ou à droite. Touche Windows + ↑ pour que la fenêtre prenne tout l’écran. Touche Windows + ↓ pour décoller la fenêtre. Avec la souris : Clique sur la barre de titre de la fenêtre (le haut), puis glisse-la vers le côté gauche ou droit de l’écran. Elle s’alignera automatiquement pour occuper la moitié de l’écran. Astuce\rTu peux ensuite sélectionner une autre fenêtre à mettre dans l’autre moitié de l’écran.\nExécution d’un programme dans Jupyter Notebook Exécuter une cellule Ctrl + Entrée : Exécute la cellule actuelle, sans passer à la suivante. Shift + Entrée : Exécute la cellule, puis passe à la suivante (ou crée une nouvelle cellule si nécessaire). Différence entre les deux\rCtrl + Entrée est utile pour réexécuter plusieurs fois une même cellule. Shift + Entrée permet d’enchaîner l’exécution de plusieurs cellules vers le bas. Arrêter un programme bloqué Quand un programme tourne en boucle ou prend trop de temps à s’exécuter dans une cellule :\nClique dans la cellule Appuie sur le bouton “Stop” dans la barre du notebook (généralement un carré noir) Ou utilise le menu Kernel \u003e Interrupt ou Interrompre Attention\rN’essaie pas de recharger la page tout de suite : essaie d’abord d’interrompre l’exécution proprement.\nTrouver les symboles importants du clavier En programmation, on utilise souvent des caractères spécifiques.\nLes images suivantes permettent de situer les touches pour obtenir ces carctères:\nCaractères Emplacement sur le clavier { } [ ] : \u0026 + ' ' \" \" ( ) | / \\ Résumé des raccourcis Action Raccourci Détail Copier Ctrl + C Copie la sélection ou toute la ligne si rien n’est sélectionné Couper Ctrl + X Coupe la sélection ou toute la ligne si rien n’est sélectionné Coller Ctrl + V Colle le contenu copié ou coupé Annuler Ctrl + Z Annule la dernière action Refaire Ctrl + Y Refait une action annulée Supprimer à gauche Retour arrière Efface le caractère précédent Supprimer à droite Suppr (Delete) Efface le caractère suivant Changer de fenêtre Alt + Tab Bascule d’une fenêtre à une autre Coller une fenêtre à gauche/droite Win + ← / Win + → Organise les fenêtres sur l’écran Exécuter une cellule (Jupyter) Ctrl + Entrée Exécute sans passer à la cellule suivante Exécuter et avancer (Jupyter) Shift + Entrée Exécute et passe à la cellule suivante Arrêter un programme Bouton “Stop” ou menu Interrompt un programme bloqué dans une cellule Notebook",
    "description": "Cette page rassemble une série de petits détails importants pour bien débuter en programmation. Ces astuces visent à rendre l’utilisation du clavier et de l’environnement plus fluide, surtout en contexte de cours avec Jupyter Notebook.\nRaccourcis clavier utiles Copier, couper, coller Ctrl + C : Copie la sélection. Ctrl + X : Coupe la sélection (la sélection sera effacée, mais pourra être collée). Ctrl + V : Colle le contenu précédemment copié ou coupé.",
    "tags": [],
    "title": "Astuces, touches spéciales et +",
    "uri": "/outils_dev/trucs_pratiques/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e \rOutils de développement",
    "content": "Introduction au Markdown dans Jupyter Notebook Markdown est un langage de balisage léger qui vous permet de formater du texte en utilisant une syntaxe simple. Dans Jupyter Notebook, vous pouvez utiliser des cellules Markdown pour ajouter des titres, des listes, des liens, des images, et bien plus encore.\nComment créer une cellule Markdown Créer une nouvelle cellule : Cliquez sur le bouton “+” dans la barre d’outils pour ajouter une nouvelle cellule. Changer le type de cellule : Cliquez sur le menu déroulant “Code” dans la barre d’outils et sélectionnez “Markdown”. Vous pouvez également utiliser le raccourci clavier Esc puis M. Écrire du texte en Markdown : Tapez votre texte en utilisant la syntaxe Markdown. Exécuter la cellule : Appuyez sur Shift + Enter pour exécuter la cellule et afficher le texte formaté. Les bases du Markdown Titres et sous-titres:\nUtilisez les dièses # pour créer des titres. Le nombre de dièses indique le niveau du titre.\n# Titre de niveau 1 ## Titre de niveau 2 ### Titre de niveau 3\rTexte en gras et en italique:\nPour mettre du texte en gras, encadrez-le avec deux astérisques ** ou deux tirets bas __.\n**texte en gras** __texte en gras__\rPour mettre du texte en italique, encadrez-le avec un astérisque * ou un tiret bas _.\n*texte en italique* _texte en italique_\rPour mettre du texte en gras et en italique, encadrez-le avec trois astérisques *** ou trois tirets bas ___.\n***Gras et italique*** ___Gras et italique___\rListes:\nListes à puces:\nUtilisez des tirets -, des astérisques * ou des signes plus + pour créer des listes à puces.\n- Élément 1 - Élément 2 - Élément 3\rListes numérotées:\nUtilisez des chiffres suivis d’un point pour créer des listes numérotées.\n1. Premier élément 2. Deuxième élément 3. Troisième élément\rLiens et images:\nPour insérer un lien, utilisez la syntaxe suivante :\n[Texte du lien](URL_du_lien)\rPour insérer une image, utilisez la syntaxe suivante :\n![Texte alternatif](URL_de_l'image)\rBlocs de code:\nUtilisez des accents graves ` (backticks) pour insérer du code en ligne :\n`print(\"Hello, World!\")`\rTableaux:\nCréez des tableaux en utilisant des barres verticales | et des traits d’union - pour délimiter les en-têtes et les colonnes :\n| En-tête 1 | En-tête 2 | |-----------|-----------| | Cellule 1 | Cellule 2 | | Cellule 3 | Cellule 4 |\rCitations:\nUtilisez le symbole \u003e pour créer des citations.\n\u003e Ceci est une citation.\rFormules mathématiques:\nUtilisez LaTeX pour écrire des formules mathématiques. Encadrez vos formules avec des signes dollar $.\n$E = mc^2$\rTexte barré:\nUtilisez deux tildes ~~ pour barrer du texte.\n~~texte barré~~\rBlocs de texte surligné:\nUtilisez trois accents graves ^^^ pour surligner des blocs de texte.\n^^^markdown\rExemples pratiques Exemple de titre et de paragraphe # Mon chapitre sur le Markdown Bienvenue dans ce chapitre sur le Markdown dans Jupyter Notebook. Vous apprendrez à formater du texte facilement.\rExemple de liste et de lien ## Liste des sujets abordés - Introduction au Markdown - Syntaxe de base - Les titres - Texte en gras et en italique - Les listes - Exemples pratiques - [Documentation officielle](https://jupyter-notebook.readthedocs.io/en/stable/examples/Notebook/Working%20With%20Markdown%20Cells.html)\rExemple d’image et de bloc de code ## Exemple d'image ![Logo Jupyter](https://jupyter.org/assets/main-logo.svg) ## Exemple de code Python ```python def salut(nom): return f\"Hello, {nom}!\" print(salut(\"world\"))\rVidéo YouTube Créer des cellules Markdowns dans Jupyter Notebook",
    "description": "Introduction au Markdown dans Jupyter Notebook Markdown est un langage de balisage léger qui vous permet de formater du texte en utilisant une syntaxe simple. Dans Jupyter Notebook, vous pouvez utiliser des cellules Markdown pour ajouter des titres, des listes, des liens, des images, et bien plus encore.\nComment créer une cellule Markdown Créer une nouvelle cellule : Cliquez sur le bouton “+” dans la barre d’outils pour ajouter une nouvelle cellule.",
    "tags": [],
    "title": " ",
    "uri": "/outils_dev/markdown/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e \rOutils de développement",
    "content": "Prérequis Système Windows 11 Connexion internet active (pour télécharger les composants internes) Pour installer manuellement les outils 1. Installer Python a) Va sur https://python.org \u003e Télécharge et installe la dernière version de Python.\nb) Coche “Add Python to PATH” avant de cliquer sur “Install Now”\n2. Installer Visual Studio Code et Jupyter Notebook a) Télécharge et suis les indications pour installer Visual Studio Code : Visual Studio Code\nb) Installer Jupyter Notebook sur Visual Studio Code (en anglais) : How to Install Jupyter Notebook in VSCode\n3. Installer l’extension Python dans VS Code a) Dans VS Code, clique sur Extensions (icône des blocs) ou Ctrl+Shift+X\nb) Recherche Python\nc) Clique sur Installer (éditeur : Microsoft)\n4. Installer les extensions scientifiques dans VS Code Procédez de la même manière qu’avec l’extension Python, pour installer les bibliothèques :\nJupyter : bloc-notes Jupyter. NumPy : Fonctions mathématiques statistiques. Matplotlib : Graphiques. Pandas : Traitement de fichiers CSV (extraction et nettoyage des données) Tutoriel pour installer des extensions sur VS Code\n5. Tester le bon fonctionnement de l’installation Ouvrez Visual Studio Code. Créez un bloc-notes test. Ex: test.ipynb Copiez le code suivant et exécutez-le. import pandas as pd import numpy as np import matplotlib.pyplot as plt # Données brutes x = [10, 20, 30, 40, 50] y = [2.5, 4.5, 6.5, 8.5, 4.5] # Utilisation de Pandas df = pd.DataFrame({\"x\": x, \"y\": y}) print(\"Aperçu du tableau :\") print(df) # Utilisation de NumPy data_x = np.array(x) data_y = np.array(y) print(\"Moyenne de y :\", np.mean(data_y)) # Graphique plt.plot(x, y, marker=\"o\") plt.title(\"Graphique test\") plt.xlabel(\"x\") plt.ylabel(\"y\") plt.show()\rS’il n’y aucun message d’erreur et que le graphique s’affiche, tout est beau! Vous êtes prêts à utiliser l’environnement.",
    "description": "Prérequis Système Windows 11 Connexion internet active (pour télécharger les composants internes) Pour installer manuellement les outils 1. Installer Python a) Va sur https://python.org \u003e Télécharge et installe la dernière version de Python.\nb) Coche “Add Python to PATH” avant de cliquer sur “Install Now”\n2. Installer Visual Studio Code et Jupyter Notebook a) Télécharge et suis les indications pour installer Visual Studio Code : Visual Studio Code\nb) Installer Jupyter Notebook sur Visual Studio Code (en anglais) : How to Install Jupyter Notebook in VSCode",
    "tags": [],
    "title": " ",
    "uri": "/outils_dev/install_env/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences",
    "content": "1. Comporte-toi comme si tu étais déjà en emploi. Arrive à l’heure, sois prêt à travailler, et respecte les échéances. Ton attitude ici prépare ton avenir professionnel.\n2. Respecte-toi, donc agis avec respect. Ton comportement reflète la manière dont tu te considères. Adopte une attitude calme, polie et attentive envers toi-même, les autres et l’enseignant·e.\n3. Sois présent, mentalement et physiquement. Utilise ton cellulaire seulement pour les besoins du cours. Reste concentré·e pendant les activités, comme tu le ferais dans un contexte de travail.\n4. Ose poser des questions, mais aussi écouter. Ton implication est valorisée. La participation active et l’écoute respectueuse des autres sont essentielles à une ambiance d’apprentissage saine.\n5. Travaille avec rigueur et honnêteté. Faire de son mieux, c’est une forme de respect de soi. Le plagiat ou la tricherie nuisent à ton apprentissage réel et à ta crédibilité future.",
    "description": "1. Comporte-toi comme si tu étais déjà en emploi. Arrive à l’heure, sois prêt à travailler, et respecte les échéances. Ton attitude ici prépare ton avenir professionnel.\n2. Respecte-toi, donc agis avec respect. Ton comportement reflète la manière dont tu te considères. Adopte une attitude calme, polie et attentive envers toi-même, les autres et l’enseignant·e.\n3. Sois présent, mentalement et physiquement. Utilise ton cellulaire seulement pour les besoins du cours. Reste concentré·e pendant les activités, comme tu le ferais dans un contexte de travail.",
    "tags": [],
    "title": "Règlements de classe",
    "uri": "/regles/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences",
    "content": "",
    "description": "",
    "tags": [],
    "title": "───────────────────",
    "uri": "/separateur_section/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences",
    "content": "Liste d’attente pour poser des questions Cliquez ici pour entrer votre nom\nPlan de cours Plan de cours\nCalendrier scolaire et répartition des 15 semaines Calendrier scolaire Répartition des 15 semaines Horaire de l’enseignante Notez bien que…\rÀ partir de 18h00 et les fins de semaine, je ne réponds pas aux questions envoyées par Teams ou col.net\nHoraire Groupe 09\n(lundi 15h20)\rGroupe 11\n(mercredi 08h00)\rGroupe 10\n(vendredi 15h20)\rCours 01\r25 août\nQuiz\nCode QR\r27 août\nQuiz\nCode QR\r22 août\nQuiz\nCode QR\rCours 02\r4 septembre\r3 septembre\r29 août\rCours 03\r8 septembre\r10 septembre\r5 septembre\rCours 04\r15 septembre\r17 septembre\r12 septembre\rCours 05\rÉvaluation #1 (25%)\n22 septembre (grp9)\n24 septembre (grp11)\n19 septembre (grp10)\rCours 10\rÉvaluation #2 (30%)\n3 novembre(grp9)\n5 novembre (grp11)\n1 octobre (grp10)\rCours 15\rÉvaluation intégratrice (30%) Remise du projet (15%)\n8 décembre (grp9)\n10 décembre (grp11)\n12 décembre (grp10)\rDates sujettes à changement.",
    "description": "Liste d’attente pour poser des questions Cliquez ici pour entrer votre nom\nPlan de cours Plan de cours\nCalendrier scolaire et répartition des 15 semaines Calendrier scolaire Répartition des 15 semaines Horaire de l’enseignante Notez bien que…\rÀ partir de 18h00 et les fins de semaine, je ne réponds pas aux questions envoyées par Teams ou col.net\nHoraire Groupe 09\n(lundi 15h20)\rGroupe 11\n(mercredi 08h00)\rGroupe 10\n(vendredi 15h20)\rCours 01\r25 août",
    "tags": [],
    "title": "Les séances de cours",
    "uri": "/cours/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences",
    "content": "Objectifs Comprendre les objectifs du cours et les règlements du collège à respecter (Quiz WooClap) Vous connecter à votre compte OneDrive scolaire. Créer une structure de dossiers pour le cours. Comprendre l’interface de VS Code Ouvrir un dossier et un fichier (.ipynb) dans VS Code. Créer un fichier .ipynb dans VS Code. Écrire et exécuter du code Python simple. Sauvegarder vos fichiers de code. 1. Présentation du cours Cliquez ici pour ouvrir le plan de cours et trouver le quiz interactif\nRéponses se trouvent dans le plan de cours\rUtilisez le plan de cours et au besoin les calendriers scolaires pour trouver les bonnes réponses aux questions du quiz. Vous avez 20 minutes pour répondre à toutes les questions.\n2. L’environnement de travail - Activité guidée Étape 1 – Se connecter à votre compte OneDrive du cégep OneDrive est un stockage et synchronisation de fichiers personnels ou scolaires dans le cloud et accessible à partir de n’importe quel emplacement sur n’importe quel appareil. Idéal pour le travail en cours et le partage avec des personnes spécifiques. Les documents sont privés jusqu’à ce que vous les partagez. Suivez les étapes sur la page Se connecter à OneDrive pour vous connecter à votre compte OneDrive scolaire.\nImportant\rÀ chaque fois que vous accéder à votre poste de travail, assurez-vous que l’icône du nuage est bleue comme ci-dessous : C’est à vous de veiller à la bonne sauvegarde de vos travaux. En cas de problème, l’enseignante pourra difficilement vous aider, alors soyez vigilants dès le début. Étape 2 – Organisation des fichiers Sachez que..\rVous pouvez changer les noms des dossiers suggérés, en autant que vous utilisiez des noms représentatifs.\nDans l’explorateur de fichiers (OneDrive), allez dans le dossier Documents et créez un sous-dossier nommé programmation-sciences. Dans ce dossier, créer au moins trois (3) sous-dossiers nommés semaine01-environnement, semaine02-intro-python et semaine03-algorithme. Allez sur Moodle et téléchargez le fichier semaine01.ipynb. Allez dans l’Explorateur de fichiers et le dossier Téléchargement. Si l’extension (.ipynb) du fichier n’apparait pas, cliquez sur Afficher\u003eAfficher\u003eExtensions des noms de fichiers Déplacez (Ctrl + X et Ctrl + V) ou glissez-déposez le fichier semaine01.ipynb de Téléchargements vers le dossier semaine01-environnement. Étape 3 – Découverte de VS Code et utilisation d’un bloc-notes Jupyter Nous allons travailler avec VS Code, un éditeur de code, et comprendre comment ouvrir un dossier de travail avec un fichier présent. Nous allons par la suite créer un fichier qui nous permettra d’écrire du code.\nPour ouvrir VS Code, cliquez la barre de recherche (loupe) en bas de votre écran, puis écrivez tout simplement VS, la première application visible devrait être Visual Studio Code. Lorsque vous ouvrez VS Code pour la première fois, la page d’accueil devrait s’afficher et proposer différentes actions pour démarrer. Cliquez sur Mark Done pour valider l’écran suivant. (si vous ne voyez pas cet écran, passez directement au point suivant)\nFaites confiance aux auteurs, cochez la case**Trust the authors of all files in the parent forlder OneDrive-College Montmorency, puis cliquez sur Yes, I trust the authors Important\rSi vous ne cochez pas la case, vous aurez une erreur et vous ne pourrez pas utiliser les fonctionnalités de VS Code Ouvrir un dossier sur VS Code Sélectionnez l’onglet Explorateur sur la barre latérale, puis Ouvrir le dossier. Sélectionnez votre dossier OneDrive, puis ouvrez le dossier que vous avez créé précédemment (programmation-sciences). Sachez que…\rIl se peut que vous ne voyez pas vos fichiers lorsque vous sélectionnez un dossier de travail. Une fois le dossier ouvert, vous devriez voir le fichier sur VS Code dans la partie gauche de votre explorateur de fichier.\nAssurez-vous que le fichier téléchargé et déplacé précédemment se trouve dans le sous-dossier semaine01-environnement\nCliquez sur le nom du fichier pour l’ouvrir dans l’Éditeur (à droite).\nCliquez sur la flèche à droite de la cellule (pour exécuter le code). Vous devriez voir ceci:\nEn haut, VS Code vous demande de choisir un Environnement Python Ensuite, sur les postes du cégep, vous devrez choisir l’environnement Python ne contenant pas Anaconda. Si l’environnement Python n’est plus détecté…\rParfois, l’environnement Python peut ne plus être détecté. Vous verrez alors Select Kernel au lieu de la version de Python, par exemple Python 3.13.5. Pour corriger le problème, il faut cliquer sur Select Kernel, puis Python Environnements et sélectionner l’environnement comme au point 9 ci-dessus.\nÉtape 4 – Créer un nouveau bloc-notes Jupyter Dans l’Explorateur de VS Code, cliquer sur Nouveau fichier\nNommez-le fichier premier_notebook.ipynb.\nAjoutez un cellule de type Marquage (Markdown) Ajoutez le contenu suivant: # Semaine 1 – Environnement de développement ## Mon premier bloc-notes Nom de l'étudiant.e: Ajouter un cellule Code (Python) et écrire le commentaire (#) et code ci-dessous Puis cliquer sur Exécuter Tout.\nSauvegarder avec Ctrl + S ou Fichier \u003e Enregistrer. Le point blanc sur l’onglet du fichier devrai disparaitre.\nActiver la sauvegarde automatique, via l’onglet Fichier, puis cliquez sur Enregistrement automatique. Vous devriez maintenant voir un crochet à gauche de cette option.\nPour ce fichier, VS Code détectera les modifications et fera la sauvegarde automatiquement, mais vous pouvez à tout moment appuyer sur Ctrl + S pour forcer la sauvegarde. Créer une nouvelle cellule de code et ajoutez ceci:\n3 * (4 + 2)\rAssurez-vous que la sauvegarde automatique s’est faite, c’est-à-dire que le point blanc sur l’onglet du fichier a disparu et a été remplacé par un X. Ce qui signifie que le fichier est sauvegardé.\nVous pouvez à nouveau cliquer sur Exécuter tout pour voir le résultat de la dernière cellule de code.\nBonnes pratiques Organisez bien vos projets : Utilisez un dossier par thème ou par semaine Nommez vos fichiers clairement : calcul_masse.ipynb, analyse_temp.ipynb La sauvegarde automatique ou sauvegardez régulièrement\nFermez les notebooks proprement\nEn haut à droite du nom d’un notebook, cliquez sur X pour fermer le fichier. Retour réflexif Avez-vous rencontré des problèmes ? Qu’est-ce qui vous semble encore flou ? Que fait exactement un notebook quand on l’exécute ? Atelier Dans votre dossier semaine1, créez un sous-dossier nommé atelier.\nLancez Visual Studio Code et ouvrez ce dossier.\nCréez un nouveau fichier Jupyter nommé atelier1.ipynb.\nDans une première cellule Markdown, écrivez un commentaire avec votre nom, la date, et l’objectif de l’atelier.\nDans une deuxième cellule Code, affichez un message de bienvenue avec print().\n# Message proposé : print(\"Bienvenue dans le cours de programmation en sciences !\")\rDéposez votre fichier .ipynb sur Moodle, dans la boite de remise prévue à cet effet. À faire avant le prochain cours Lire la prochaine leçon : 2. Variables, types, entrée utilisateur et onction Faire les exercices de la prochaine leçon :",
    "description": "Objectifs Comprendre les objectifs du cours et les règlements du collège à respecter (Quiz WooClap) Vous connecter à votre compte OneDrive scolaire. Créer une structure de dossiers pour le cours. Comprendre l’interface de VS Code Ouvrir un dossier et un fichier (.ipynb) dans VS Code. Créer un fichier .ipynb dans VS Code. Écrire et exécuter du code Python simple. Sauvegarder vos fichiers de code. 1. Présentation du cours Cliquez ici pour ouvrir le plan de cours et trouver le quiz interactif",
    "tags": [],
    "title": " Présentation du cours et l'environnement de travail",
    "uri": "/semaine1/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences",
    "content": "Objectifs Créer des variables et afficher leurs types (int, float, str, bool). Demander une donnée à l’utilisateur, la convertir et l’afficher de manière claire et lisible. Utiliser diverses fonctions prédéfinies. Écrire des programmes simples en python. Apprendre par la pratique\rFaites les exercices en vous aidant des notes de cours ci-dessous. Certains seront fait en classe à titre de démonstration. Les solutions seront disponibles à la fin de la semaine prochaine. Exercices Fichier de départ à utiliser Cliquez sur le lien pour télécharger le fichier. Bloc-notes de départ Enregistrez le fichier dans votre dossier exercices de la semaine en cours. Ouvrez Visual Studio Code. Dans VS Code, recherchez et ouvrez le fichier exercices_variables_entrees_fonctions.ipynb Assurez-vous que le noyau Python (Kernel) soit sélectionné. Vous pouvez commencer à faire les exercices. Exercice 1 : Distance parcourue Un cycliste roule à une vitesse constante de 6,5 m/s pendant 12 minutes.\nÉcris le programme pour calculer la distance parcourue. Résultat attendu:\nLe cycliste a parcouru 4680.0 mètres en 12 minutes.\rExercice 2 : Conversion de température Un thermomètre donne des relevés en Fahrenheit, mais vous devez les convertir en Celsius et Kelvin.\nUtilisez une variable pour stocker une température en °C. Convertissez cette température en °F et en K. Affichez les trois valeurs avec des messages clairs. Formules :\n$ °F = (°C × 9/5) + 32 $ $ K = °C + 273.15 $\rRésultat attendu avec une température de 38C :\nTempérature en Celsius : 38C\rTempérature en Fahrenheit : 100.4F\rTempérature en Kelvin : 311.15K\rExercice 3 : Calcul de concentration molaire Un technicien prépare une solution en dissolvant une masse donnée de soluté dans un certain volume de solvant. Écrire un programme qui calcule la concentration molaire (mol/L) selon la formule :\n$ C = n / V $ où $ n = m / M $\rOù C : Concentration molaire n : Nombre de mole de soluté V : Volume de la solution\nRésultat attendu avec :\nm = 10.0 masse du soluté en grammes\nM = 58.5\tmasse molaire du soluté en g/mol (ex. NaCl)\nV = 0.25\tvolume de la solution en litres\nConcentration molaire : 0.682051282051282 mol/L\rExercice 4 : Vitesse moyenne d’une réaction Lors d’une expérience de cinétique chimique, on mesure la variation de la concentration d’un réactif au cours du temps. Écrire un programme qui calcule la vitesse moyenne de disparition selon :\n$ v = \\frac{\\Delta [A]}{\\Delta t} $\roù [A] est la concentration du réactif, ${\\Delta [A]}$ la différence entre la concentration finale et initiale et ${\\Delta t}$ la variation du temps.\nRésultat attendu avec: [Réactif A] passe de 0.80 mol/L à 0.20 mol/L en 120 secondes.\nVitesse moyenne = -0.005000 mol L⁻¹ s⁻¹\rCours Variables et types de données de base Une variable est un nom qui désigne une valeur et un espace de stockage d’une valeur. prenom = \"Alice\" age = 20 temperature = 25.8\rBien nommer vos variables: Les nom sont sensibles à la casse (ex: pour python la variable prenom et la variable Prenom sont deux variables différentes pour python Utiliser des noms significatifs (ex : masse_corps, volume_solution) Commencer par une lettre ou un souligné (_), jamais par un chiffre. Éviter les mots réservés de Python (if, for, print, etc.). Utiliser des mots séparés par des soulignés (_). Utiliser des mots commençants par une lettre majuscule, sauf le premier mot (ex : masseCorps, volumeSolution). Ne jamais mettre de lettres accentuées dans le nom d’une variable. Mauvais exemples :\n1age = 20 # commence par un chiffre → erreur print = 8 # print est un mot réservé → erreur prénom = \"Julie\"\t# Lettre accentuée é\rTypes de base des données Type Exemple Description int 5, -3 Nombre entier float 3.14, -0.5 Nombre à virgule flottante str \"Bonjour\" ou 'Bonjour' Chaîne de caractères (string) bool True, False Valeur booléenne (vrai ou faux) Attention\rPour les données de type à virgule flottante, on utilise le point (.) à la place d’une virgule (,).\nConversion de type Parfois on a besoin de modifier le type d’une données avant de l’utiliser. Pour ce faire on utilise des fonctions: int() pour convertir en nombre entier float() pour convertir en nombre décimal str() pour convertir en chaine de caractères Exemples:\nage = int(\"18\") # str vers int temp = float(\"22.5\") # str vers float taxes = str(\"14.978\") # float vers str\rSi on veut connaitre le type d’une donnée on utilise type()\ntype(\"Bonjour\") # str type(3.14) # float type(42) # int\rLecture de données au clavier avec input() Souvent, les données d’un programme proviennent de son utilisateur qui les tape au clavier. La fonction input() permet de stocker la données dans une variable.\nnom = input(\"Quel est ton nom ? \") age = int(input(\"Quel est ton âge ? \"))\rLes données entrées par input() sont toujours des chaînes (str). Il faut donc les convertir pour faire des calculs :\nExemple d’erreur en cas d’oubli de convertir\nnote1 = input(\"Entrez la première note\") note2 = input(\"Entrez la deuxième note\") moyenne = (note1 + note2) / 2\t==\u003e ERREUR\rImportant\rL’erreur est causée par le fait que la fonction input(), transforme toutes les saisies au clavier en chaine de caractères (str). Si on tape au clavier 95 et 98, pour Python c’est “95” + “98”, ce qui n’est pas une opération valide. C’est comme essayer de faire “Bonjour” + “Salut”.\nLa conversion des deux notes en entier, fait en sorte que Python arrive à faire le calcul sans problème.\nFonctions prédéfinies Qu’est-ce qu’une fonction ? Une fonction est un bloc de code réutilisable. On peut lui donner des paramètres (valeurs en entrée) et elle peut renvoyer un résultat ou simplement l’afficher. Si une fonction renvoie un résultat, il devra être stocké dans une variable pour être utilisé ailleurs dans le code ou on pourra utiliser la fonction directement à l’endroit où le résultat est requis. Analogie dans la vie de tous les jours\rUne fonction est comme une recette qu’on peut réutiliser autant de fois que l’on veut:\nLes ingrédients : les paramètres. La préparation : le corps de la fonction. Le résultat final : la valeur retournée ou affichée. Utiliser une fonction, c’est suivre la recette avec des ingrédients précis. Exemples de fonctions prédéfinies Fonction Utilité Exemple print() Afficher un message print(\"Bonjour !\") type() Afficher le type d’une variable type(3.5) → \u003cclass 'float'\u003e input() Demander une donnée à l’utilisateur nom = input(\"Votre nom :\") int() Convertir en entier val = int(\"5\") float() Convertir en nombre décimal val = float(\"3.14\") round() Arrondir un nombre round(2.718, 2) → 2.72 len() Compter les éléments d’une chaîne/liste len(\"atomes\") → 6 On utilise une fonction en l’appelant. On l’appelle en écrivant son nom suivi de parenthèses.\nQuelques fonctions du module math Pour accéder à des fonctions mathématiques, on utilise le module math.\nimport math\rFonction Description Exemple math.sqrt(x) Racine carrée math.sqrt(16) → 4.0 math.pow(x, y) Puissance math.pow(2, 3) → 8.0 math.sin(x) Sinus (en radians) math.sin(math.pi / 2) → 1.0 math.log(x) Logarithme naturel math.log(10) La constante PI est aussi disponible via le module math :\nConstante Description Exemple math.pi La constante π math.pi → 3.14159... Affichage des données avec print et les f-string La fonction print() permet d’afficher des résultats.\nOn peut aussi utiliser print() pour ajouter un saut de ligne.\nQuand on veut afficher une phrase contenant des valeurs numériques ou des variables, c’est préférable d’utiliser des f-strings (ou chaînes formatées) pour aller plus vite et rendre le code plus clair.\nExemple :\nnom = \"Sophie\" age = 18 print(f\"{nom} a {age} ans.\")\rRésultat : Sophie a 18 ans.\rLe f devant les guillemets indique qu’on veut insérer des valeurs de variables directement dans le texte. On place les variables entre accolades {}.\nMais parfois, on veut afficher un nombre arrondi, aligné, ou avec des zéros. C’est là qu’on utilise les modificateurs de format juste après la variable, entre : et }.\nLes modificateurs de format numérique Objectif Syntaxe Afficher 2 décimales {valeur:.2f} Afficher 6 caractères dont 2 décimales, avec des zéros devant {valeur:06.2f} Afficher 10 caractères dont 2 décimales et aligner à droite {valeur:\u003e10.2f} Aligner à gauche sur 10 caractères dont 2 décimales {valeur:\u003c10.2f} Afficher un pourcentage avec 1 décimale {valeur:.1%} Affichage centré sur 10 caractères et 2 décimales {valeur:^10.2f} Format scientifique (notation exponentielle) {valeur:.2e} Explication :\n.2f → f pour “float”, 2 pour eux décimales 10.2f → total de 10 caractères, dont 2 après la virgule \u003c, \u003e, ^ → alignement (gauche, droite, centré) Exemples :\nmontant = 134.8678 taux = 15 print(f\"Montant : {montant:.2f} $\") # → Montant : 134.87 $ print(f\"Montant : {montant:08.2f} $\") # → Montant : 134.87 $ print(f\"Montant : {montant:\u003e10.2f} $\") # → Montant : 134.87 $ print(f\"Montant : {montant:\u003c10.2f} $\") # → Montant : 134.87 $ print(f\"Taux : {taux:.2%}\") # → Taux : 15.00 % print(f\"Montant : {montant:^10.2f} $\") # → Montant : 134.87 $ print(f\"Montant : {montant:.2e} $\") # → Montant : 1.35e+02 $\rOn peut aussi utiliser print() pour afficher plusieurs choses à la fois, en les séparant avec des virgules :\nprenom = \"Nathalie\" age = 25 print(\"Prénom :\", prenom, \"Âge :\", age)\rPrénom: Nathalie Âge : 25\rDocumentation du code (les commentaires) On écrit des commentaires pour expliquer le code. Python ignore tout ce qui suit # sur une ligne.\nExemples :\n# Calcul de l'aire d'un cercle rayon = 3 aire = 3.14 * rayon ** 2 # formule de l’aire\rOpérateurs arithmétiques Opérateur Signification Exemple Résultat + Addition 3 + 2 5 - Soustraction 7 - 4 3 * Multiplication 5 * 2 10 / Division (résultat décimal) 6 / 2 3.0 // Division entière 7 // 2 3 % Modulo (reste) 7 % 2 1 ** Puissance 3 ** 2 9 Notez\rLes différents résultats pour les trois types de division (en gras dans le tableau).\nDivision et division entière Division entière et modulo Expressions et priorité des opérateurs Une expression est une combinaison de variables, de nombres et d’opérateurs.\nPriorité (ordre d’exécution) des opérateurs : () : parenthèses ** : puissance *, /, //, % : multiplication et division +, - : addition et soustraction Exemple :\nresultat = 3 + 4 * 2 # donne 11, pas 14 ! resultat = (3 + 4) * 2 # donne 14 grâce aux ()\rÀ retenir…\rUne variable garde une valeur. On utilise les bonnes pratiques pour nommer nos variables. Les commentaires servent à documenter le code. Les opérateurs arithmétiques permettent de faire des calculs. Comme en mathématiques, l’ordre des opérations est important en Python. print() permet d’afficher une réponse, seule ou avec du texte. De préférence, utiliser des f-string. Le f vient juste avant les guillemets. On peut insérer n’importe quelle variable ou expression dans {}. Atelier Téléchargez le fichier de départ : Bloc-notes de départ Déplacez-le dans votre dossier prévu pour l’atelier de la semaine 2. Ouvrez votre dossier de travail programmation-sciences à partir de Visual Studio Code. Vous devriez voir votre structure de dossiers et vos fichiers (.ipynb). Exercice #1 - Expérience en chimie Un bécher contient 400 mL de solution. La solution s’évapore à raison de 25 mL/min. La situation est linéaire : on commence à 400 mL, et on perd 25 mL chaque minute. Donc la fonction est :\n$$\rq(t) = 400 - 25t\r$$\roù :\n$t$ est le temps en minutes, $q(t)$ est la quantité de solution restante (en mL) après $t$ minutes. On souhaite trouver la quantité de solution qu’il restera après 10 min 15 s\nNB:\nIdentifier les variables, les constantes et les formules nécessaires Résultat attendu :\nQuantité restante après 10.25 minutes : 143.75 mL.\rExercice #2 - Calcul de la force gravitationnelle Écrire un programme qui:\nDemande à l’utilisateur d’entrer le nom de l’objet (chaîne de caractères). Demande à l’utilisateur d’entrer la masse de l’objet (nombre décimal, en kg). Défini la constante d’accélération gravitationnelle (9,8 m/s²). Calcule la force en utilisant la formule : force = masse * accélération Affiche la force avec une phrase claire, incluant le nom de l’objet et l’unité en N (Newton). Testez le programme avec ces deux cas:\nCas #1. Objet: balle et masse: 2,5 Kg\nSortie attendue :\nLa force de la balle de 2.5 Kg est de 24.50 N.\rCas #2. Objet: voiture et masse: 1000,0 Kg\nSortie attendue :\nLa force de la voiture de 1000.0 Kg est de 9800.00 N.\rExercice #3 – Calcul d’intérêts simple et composé Un investisseur place 100 $. On souhaite comparer deux situations :\nIntérêt simple :\nTaux : 3,2 % par an\nDurée : 10 ans\nFormule :\n$$ V_{\\text{simple}} = M \\times \\big(1 + t \\times n\\big) $$\noù\n$M$ = montant initial, $t$ = taux d’intérêt simple (par an), $n$ = durée (en années). Intérêt composé :\nTaux : 1,6 % par semestre (deux fois par an, donc équivalent à 3,2 % par an)\nDurée : 10 ans\nNombre de périodes :\n$$ p = 2 \\times n $$\nFormule :\n$$ V_{\\text{composé}} = M \\times \\big(1 + t_c\\big)^p $$\noù\n$M$ = montant initial, $t_c$ = taux d’intérêt composé par période, $p$ = nombre total de périodes. Écart relatif (en %) entre les deux montants :\n$$ \\text{Écart} = \\frac{V_{\\text{composé}} - V_{\\text{simple}}}{V_{\\text{simple}}} \\times 100 $$\nRésultats attendus :\nValeur avec intérêt simple : 132.00 $ Valeur avec intérêt composé : 137.36 $ Écart relatif : 4.06 % Exercice #4 - Calcul de la hauteur maximale Vous voulez aider un·e physicien·ne à calculer la hauteur maximale atteinte par un objet lancé verticalement vers le haut avec une certaine vitesse initiale.\nÉcrire un programme qui demande la vitesse initiale au lancement, puis calcule la hauteur maximale atteinte par l’objet (en négligeant la résistance de l’air). La formule utilisée est :\n$$\rh_{\\text{max}} = \\frac{v^2}{2g}\r$$\ravec :\n$v$ : vitesse initiale (en m/s) $g$ : accélération gravitationnelle = 9.81 m/s² $h_{\\text{max}}$ : hauteur maximale (en m) Exercice 5 - Calcul de probabilité géométrique (Facultatif) On choisit un point au hasard dans ce rectangle. Calcule la probabilité que ce point se situe dans la région grise, c’est-à-dire en dehors des cercles. Un rectangle contenant 6 cercles isométriques (même taille), Ils sont organisés en 2 rangées de 3 cercles, La hauteur du rectangle est 10 cm, ce qui correspond à deux diamètres de cercles (1 par rangée). NB:\nIdentifier les variables, les constantes et les formules nécessaires Résultat attendu :\nProbabilité qu’un point tombe dans la région grise : 0.2119 (soit 21.19 %)\rÀ faire avant le prochain cours Lire la prochaine leçon : 3. Structures conditionnelles et algorithmes simples Faire les exercices de la prochaine leçon :",
    "description": "Objectifs Créer des variables et afficher leurs types (int, float, str, bool). Demander une donnée à l’utilisateur, la convertir et l’afficher de manière claire et lisible. Utiliser diverses fonctions prédéfinies. Écrire des programmes simples en python. Apprendre par la pratique\rFaites les exercices en vous aidant des notes de cours ci-dessous. Certains seront fait en classe à titre de démonstration. Les solutions seront disponibles à la fin de la semaine prochaine.",
    "tags": [],
    "title": " Variables, types, entrée utilisateur et fonctions prédéfinies",
    "uri": "/semaine2/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences",
    "content": "Objectifs Identifier et utiliser correctement les opérateurs de comparaison et logiques pour évaluer des conditions simples en Python. Appliquer les structures conditionnelles (if, elif, else) à des contextes scientifiques simples. Écrire des algorithmes simples et les traduire en Python. Apprendre par la pratique\rFaites les exercices en vous aidant des notes de cours ci-dessous. Certains seront fait en classe à titre de démonstration. Les solutions seront disponibles à la fin de la semaine prochaine. Exercices Fichier de départ à utiliser Cliquez sur le lien pour télécharger le fichier. Bloc-notes de départ Enregistrez le fichier dans votre dossier exercices de la semaine en cours. Ouvrez Visual Studio Code. Dans VS Code, recherchez et ouvrez le fichier exercices_struct_cond.ipynb Assurez-vous que le noyau Python (Kernel) soit sélectionné. Vous pouvez commencer à faire les exercices. Exercice 1 – Temps de demi-vie radioactive Un isotope radioactif se désintègre avec le temps. Sa masse diminue de moitié à chaque période de demi-vie. Un échantillon de 100 g d’un isotope a une demi-vie de 5 ans. On souhaite connaître la masse restante après un certain nombre d’années.\nÉcris un algorithme permettant de :\nDemander à l’utilisateur le nombre d’années écoulées. Calculer le nombre de périodes de demi-vie. Calculer la masse restante : $$ \\text{masse} = \\text{masse initiale} \\times \\left(\\frac{1}{2}\\right)^{\\text{nb_periodes}} $$ Si la masse est inférieure à 1 g, afficher un message d’avertissement, sinon, afficher la masse restante normalement. Traduis ton algorithme en Python.\nRésultat attendu avec le nombre d’années égal à 10\nMasse restante après 10.0 ans : 25.00 g.\rExercice 2 – Taux de croissance d’une population bactérienne Une colonie de bactéries double toutes les 3 heures si les conditions sont optimales. Une boîte de Pétri contient 500 bactéries. On souhaite estimer la taille de la population après un certain nombre d’heures.\nÉcris un algorithme pour :\nDemander à l’utilisateur le nombre d’heures écoulées. Calculer le nombre de périodes de croissance (périodes de 3 heures). Calculer la population après cette durée avec la formule : $$ \\text{population} = \\text{population initiale} \\times 2^{\\text{nb_periodes}} $$ Afficher la population estimée. Si la population dépasse 1 000 000 bactéries, afficher un message d’alerte sur la croissance excessive, sinon afficher la population normalement Traduis ton algorithme en Python.\nRésultat attendu avec le nombre d’heures égales à 15\nPopulation estimée après 15.0 heures : 16000 bactéries.\rExercice 3 – Température critique d’un liquide Un liquide ne doit pas dépasser 80 °C pour rester stable.\nÉcris un algorithme pour un programme qui : Demande à l’utilisateur la température actuelle du liquide et afficher un message selon les cas : Si la température est inférieure à 80, afficher : « Température sécuritaire. » Si elle est exactement 80, afficher : « Limite atteinte. » Si elle est supérieure à 80, afficher : « Attention : température critique ! » Traduis ton algorithme en Python. Résultat attendu avec les températures de 15; 80 et 100\nTempérature sécuritaire.\rLimite atteinte.\rAttention : température critique !\rExercice 4 – Classification du pH d’une solution En chimie, le pH permet de savoir si une solution est acide, neutre ou basique.\nÉcris un algorithme pour un programme qui : Demande à l’utilisateur le pH d’une solution (entre 0 et 14), puis afficher : « Solution acide » si pH \u003c 7 « Solution neutre » si pH == 7 « Solution basique » si pH \u003e 7 « Valeur de pH invalide » si le pH est en dehors de l’intervalle [0, 14] Traduis ton algorithme en Python. Résultat attendu avec les pH de 1; 7; 9 et 17\nSolution acide\rSolution neutre\rSolution basique\rValeur de pH invalide\rExercice 5 – Autorisation d’une réaction chimique Une réaction chimique ne peut avoir lieu que si la température est entre 25 °C et 45 °C inclusivement, et si le pH est entre 6 et 8 inclusivement.\nÉcris un algorithme pour un programme qui :\nDemande à l’utilisateur la température et le pH, puis afficher : « Réaction possible. » si les deux conditions sont remplies, « Conditions non compatibles. » sinon. Traduis ton algorithme en Python.\nRésultat attendu avec une température de 30 et un pH de 7\nRéaction possible\rRésultat attendu avec une température de 20 et un pH de 7\nConditions non compatibles.\rRésultat attendu avec une température de 30 et un pH de 5\nConditions non compatibles.\rCours Les opérateurs de comparaison Ces opérateurs permettent de comparer des valeurs. Le résultat est toujours un booléen : True (vrai) ou False (faux).\nOpérateur Signification Exemple Résultat == égal à 5 == 5 True != différent de 3 != 4 True \u003c plus petit que 2 \u003c 5 True \u003c= plus petit ou égal à 5 \u003c= 5 True \u003e plus grand que 7 \u003e 4 True \u003e= plus grand ou égal à 6 \u003e= 9 False Dans une cellule de Code, testez les exemples du tableau.\nLes opérateurs logiques Ils permettent de combiner plusieurs conditions.\nOpérateur Signification Exemple Résultat and et (toutes vraies) (4 \u003c 5) and (6 \u003e 3) True or ou (au moins une vraie) (4 \u003c 5) or (6 \u003c 3) True not négation not (4 \u003c 5) False Dans une cellule de Code, testez les exemples du tableau.\nLes structures conditionnelles Elles permettent d’exécuter un bloc de code seulement si une condition est vraie.\nL’instruction if Pour exécuter du code si une condition est vraie.\nif condition: # Bloc de code exécuté si la condition est vraie\rExemple :\nage = 20 if age \u003e= 18: print(\"Majeur\")\rL’instruction if-else Pour exécuter du code si une condition est fausse.\nif condition: # Si la condition est vraie else: # Sinon (condition fausse)\rExemple :\nage = 16 if age \u003e= 18: print(\"Majeur\") else: print(\"Mineur\")\rL’instruction if-elif-else Pour tester plusieurs cas différents et exécuter du code différent selon le cas.\nImportant\rSi la condition du if est fausse, un seul elif sera exécuté. Si et seulement si toutes les conditions (if et tous les elif) sont fausses, le else sera traité. if condition1: # Si condition1 est vraie elif condition2: # Sinon, si condition2 est vraie elif condition3: # Sinon, si condition3 est vraie else: # Sinon (aucune condition vraie)\rExemple :\nnote = 85 if note \u003e= 90: print(\"Excellent\") elif note \u003e= 75: print(\"Très bien\") elif note \u003e= 60: print(\"Passable\") else: print(\"Échec\")\rImportant\rLes deux-points (:) sont obligatoires à la fin des lignes if, elif et else. L’indentation est essentielle : elle délimite le bloc de code à exécuter. Dans des cellules de Code dans VS Code, testez les exemples des instructions if, elif et else.\nComment décortiquer un problème scientifique en algorithme et le traduire en Python ? Un algorithme, c’est une suite d’instructions claires pour résoudre un problème.\nCe processus crucial, est la clé pour arriver à écrire un programme sans s’arracher les cheveux. On peut le décrire en 6 étapes principales:\nLire et comprendre le problème Identifier les variables et constantes Choisir ou écrire la formule Écrire un algorithme clair Traduire en code Python Vérifier et tester le programme Voyons chacune des étapes plus en détails:\nÉtape 1 — Lire et comprendre le problème Objectif : Identifier ce qu’on cherche, ce qu’on connaît, et le contexte scientifique.\nQuestion principale : Que doit-on calculer, prédire ou modéliser ? Données : Quelles sont les grandeurs connues ? (types ? unités ? constantes ?) Formule ou loi : Y a-t-il une relation physique, chimique ou biologique utilisable ? Conditions : Y a-t-il des limites, des cas particuliers ou des hypothèses ? Étape 2 — Identifier les variables et constantes Objectif : Repérer les quantités variables (entrées ou sorties) et les constantes.\nVariables d’entrée : Grandeurs connues fournies par le problème ou l’utilisateur du programme. Variable de sortie : Ce que l’on veut calculer (la réponse). Constantes : Valeurs fixes (ex. : constante des gaz, g, densité de l’eau, etc.). Étape 3 — Choisir ou écrire la formule Objectif : Traduire la relation scientifique en équation.\nIdentifier la loi scientifique utilisée (ex. : Boyle, loi des gaz, loi de la gravité, etc.) Réorganiser si nécessaire pour isoler la variable à calculer. Étape 4 — Écrire un algorithme clair Objectif : Décrire les étapes logiques avant de coder.\nDéfinir ou lire les données (entrées) Calculer la sortie (résultat) avec la formule Afficher la réponse Étape 5 — Traduire en code Python Objectif : Écrire du code propre et commenté.\nÉtape 6 — Vérifier et tester Objectif : Valider que le résultat est cohérent (scientifiquement et informatiquement).\nEst-ce que l’unité du résultat est correcte ? Est-ce que la valeur semble logique (ex. : une pression double si le volume diminue de moitié) ? Tester avec d’autres valeurs pour confirmer. Exemple 1 : Un gaz occupe un volume de 4,0 L à une pression de 100 kPa. Quelle sera la pression si le volume diminue à 2,0 L (à température constante) ?\nÉtape 1: Comprendre le problème\nOn doit calculer la pression finale (P2) d’un gaz lorsque son volume final (V2) diminue de moitié. On connait les volumes initial (V1) et final (V2), la pression initiale (P1). On doit donc trouver la pression finale à l’aide de la Loi de Boyle (P1 x V1 = P2 x V2) Étape 2: Identifier les variables et constantes\nVariables d’entrée : V1 = 4.0, P1 = 100, V2 = 2.0 Variable de sortie : P2 Constantes : aucune ici Type : float (car ce sont des mesures continues) Étape 3: Écrire la formule\nLoi de Boyle : $P_1 \\cdot V_1 = P_2 \\cdot V_2$   Donc $P_2 = \\frac{P_1 \\cdot V_1}{V_2}$\rÉtape 4: Écrire un algorithme clair\nFormat 1: algorithme en phrases simples et claires\n* Définir les deux volumes V1 et V2 (initial et final) et la pression initiale P1.\r* Calculer la pression finale à l'aide de la formule P2 = (P1 * V1) / V2.\r* Afficher la pression finale P2.\rOu Format 2: algorithme en pseudo-code\nDébut\rLire V1, P1, V2\rCalculer P2 = (P1 * V1) / V2\rAfficher P2\rFin\rÉtape 5: Traduire en Python\n# Données d'entrée (float = nombre à virgule) V1 = 4.0 # Volume initial en litres P1 = 100.0 # Pression initiale en kPa V2 = 2.0 # Volume final en litres # Calcul (loi de Boyle) P2 = (P1 * V1) / V2 # Affichage du résultat print(\"La pression finale est de {P2} kPa\")\rÉtape 6: Vérifier et tester\nTest 1 — Volume initial = Volume final V1 = 2.0 P1 = 100 V2 = 2.0 P2 = (P1 * V1) / V2 = (100 * 2.0) / 2.0 = 100.0\rRésultat : P2 = 100.0 kPa\nInterprétation : Si le volume ne change pas, la pression reste la même.\nTest 2 — Volume final diminué de 4 à 1 L V1 = 4.0 P1 = 100 V2 = 1.0 P2 = (100 * 4.0) / 1.0 = 400.0\rRésultat : P2 = 400.0 kPa\nInterprétation : Si on divise le volume par 4, la pression est multipliée par 4.\nTest 3 — Pression initiale réduite à 50 kPa V1 = 4.0 P1 = 50 V2 = 2.0 P2 = (50 * 4.0) / 2.0 = 100.0\rRésultat : P2 = 100.0 kPa\nInterprétation : Une pression initiale plus faible donne une pression finale plus faible, toutes choses égales par ailleurs.\nConclusion\nCes tests montrent que :\nLa pression est inversement proportionnelle au volume : si le volume diminue, la pression augmente, et inversement. Le calcul respecte la loi de Boyle à température constante. Les résultats sont cohérents avec l’intuition physique. À retenir\rLes opérateurs de comparaison comparent des valeurs.\nLes opérateurs logiques combinent plusieurs conditions.\nLes structures conditionnelles permettent de réagir à des critères dans un programme.\nLes deux-points (:) sont obligatoires à la fin des lignes if, elif et else.\nL’indentation (souvent 4 espaces) est essentielle : elle délimite le bloc de code à exécuter.\nIl peut y avoir autant de elif que nécessaire, mais un seul if et au plus un seul else.\nif vérifie si une condition est vraie, si et seulement si c’est le cas, les instructions en dessous seront exécutées. elif permet de vérifier une autre condition, si et seulement si la condition du if est fausse ET celle du elif est vraie, les instructions en dessous et décalées seront exécutées. else permet de prévoir des instructions à effectuer, si et seulement si aucune des conditions précédentes n’est vraie. Avant de coder:\nComprendre le problème afin d’identifier les variables ou constantes et les formules. Écrire en phrases simples, les étapes principales du programme (l’algorithme). Atelier Téléchargez le fichier de départ : Bloc-notes de départ Déplacez-le dans votre dossier prévu pour l’atelier de la semaine 3. Ouvrez votre dossier de travail programmation-sciences à partir de Visual Studio Code. Vous devriez voir votre structure de dossiers et vos fichiers (.ipynb). Conseils\rÉcrire l’algorithme avant de commencer à écrire du code\nExercice L’état physique de l’eau dépend de la température et de la pression. À pression atmosphérique normale (1 atm) :\nL’eau gèle à 0 °C et bout à 100 °C. En altitude, la pression est plus faible, donc l’eau bout à une température plus basse. En autocuiseur, la pression est plus élevée, donc l’eau bout à une température plus élevée. On suppose ici un modèle très simple :\nPression (atm) Température d’ébullition (°C) 0.5 81 1.0 100 1.5 112 2.0 120 Le point de congélation demeure à 0 °C peu importe la pression.\nÉcris un programme Python qui :\nDemande à l’utilisateur d’entrer :\nLa température de l’eau en °C La pression en atm (choix parmi 0.5, 1.0, 1.5, 2.0) Détermine et affiche l’état physique de l’eau : \"solide\", \"liquide\" ou \"gaz\".\nExemples de fonctionnements attendus Température (°C) : 50\rPression (atm) : 1.0\rÉtat de l’eau : liquide\rTempérature (°C) : 101\rPression (atm) : 1.0\rÉtat de l’eau : gaz\rTempérature (°C) : -5\rPression (atm) : 2.0\rÉtat de l’eau : solide\rPistes / rappels Utiliser des conditions imbriquées ou combinées (if ... and ..., elif). Pour simplifier, vous pouvez faire un if sur la pression pour définir le point d’ébullition. Utilisez des variables pour stocker les seuils. Utiliser exit(0) ou exit() pour arrêter le programme lorsqu’une pression invalide est saisie au clavier. Cela arrêtera Python et provoquera un message d’erreur. Exemple d’exécution Température de l'eau en °C : 105\rPression en atm (0.5, 1.0, 1.5 ou 2.0) : 1.5\rÉtat de l’eau : liquide\rL’eau est liquide à cette température et pression.\rVersion améliorée Gérer des cas d’erreurs (ex. : pression invalide) Afficher une petite phrase plus descriptive selon l’état : “L’eau est sous forme de vapeur.” ou “L’eau est liquide à cette température et pression.” Gérer des cas d’erreur: Utiliser la valeur None\rQu’est-ce que None en Python ? None est une valeur spéciale en Python. Elle représente l’absence de valeur ou “rien”. Pourquoi utiliser None ? Pour vérifier si une variable est encore vide. Pour initialiser une variable sans lui donner de valeur tout de suite. Pour indiquer qu’une fonction ne retourne rien. Exemple 1 – Vérifier si une variable est vide reponse = None if reponse is None: print(\"Aucune réponse reçue.\")\rAttention : on teste None avec is et non == dans les bonnes pratiques Python :\nif variable is None: ### Exemple 2 – Variable vide au départ ```python resultat = None # on ne connaît pas encore le résultat # plus tard... resultat = 42\rExemple 3 – Fonction sans return def afficher_message(): print(\"Bonjour!\") x = afficher_message() print(x) # Affiche : None (car la fonction ne retourne rien)\rÀ faire avant le prochain cours Lire la prochaine leçon : 4. Boucles et algorithmes simples Faire les exercices de la prochaine leçon :",
    "description": "Objectifs Identifier et utiliser correctement les opérateurs de comparaison et logiques pour évaluer des conditions simples en Python. Appliquer les structures conditionnelles (if, elif, else) à des contextes scientifiques simples. Écrire des algorithmes simples et les traduire en Python. Apprendre par la pratique\rFaites les exercices en vous aidant des notes de cours ci-dessous. Certains seront fait en classe à titre de démonstration. Les solutions seront disponibles à la fin de la semaine prochaine.",
    "tags": [],
    "title": " Structures conditionnelles et algorithmes simples",
    "uri": "/semaine3/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences",
    "content": "Objectifs Répéter des instructions tant qu’une condition est vraie, avec la boucle while. Répéter des instructions un nombre de fois connu d’avance avec la boucle for. Interrompre le déroulement d’une boucle. Comprendre les messages d’erreurs et découvrir des stratégies simples de débogage. Apprendre par la pratique\rFaites les exercices en vous aidant des notes de cours ci-dessous. Certains seront fait en classe à titre de démonstration. Les solutions seront disponibles à la fin de la semaine prochaine. Exercices Fichier de départ à utiliser Cliquez sur le lien pour télécharger le fichier. Bloc-notes de départ Enregistrez le fichier dans votre dossier exercices de la semaine en cours. Ouvrez Visual Studio Code. Dans VS Code, recherchez et ouvrez le fichier exercices_boucles.ipynb Assurez-vous que le noyau Python (Kernel) soit sélectionné. Vous pouvez commencer à faire les exercices. Exercice 1 - For ou While ? Pour chacun des contextes suivants, avant d’écrire le code, répondez à la question: “Quelle boucle devriez-vous utiliser ?”:\na. Afficher les nombres de 1 à 10\nb. Compter jusqu’à 100 par bonds de 10\nc. Simuler la chute d’un objet de 100 m (baisse de 10 m/s)\nd. Lire une température jusqu’à ce qu’elle soit \u003c 0 (entrée utilisateur)\ne. Écrire un programme qui demande à l’utilisateur d’entrer un chiffre (1 à 10). Tant qu’il ne tape pas le chiffre 0, le programme lui redemande d’entrer un chiffre (1 à 10) Sinon (i.e. il a tapé 0) le programme s’arrête (Vous pouvez utiliser break et afficher un message).\nExercice 2 – Table de multiplication Écrire un programme qui affiche la table de multiplication d’un nombre donné par l’usager (entre 1 et 12), jusqu’à 12 × ce nombre. utiliser une boucle while pour refaire une autre table tant que l’usager le souhaite. Algorithme\na. Demander à l’usager d’entrer un nombre entier entre 1 et 12.\nb. Stocker ce nombre dans une variable, par exemple n. c. Pour afficher la table de multiplication:\nCréer une boucle (par exemple for i in range(1, 13)) pour calculer et afficher les produits : i × n Le résultat attendu est une table comme : 1 × 7 = 7\r2 × 7 = 14\r...\r12 × 7 = 84\rd. Après avoir affiché la table, demander à l’usager s’il veut recommencer.\nExemple de question : « Veux-tu afficher une autre table ? (1 = oui, 0 = non) ».\ne. Répéter avec une boucle while: Tant que l’usager répond 1, le programme recommence à l’étape a. Si l’usager répond 0, le programme se termine. Exercice 3 – Utiliser while pour atteindre un objectif Une température initiale est de 20 °C. Chaque heure, elle augmente de 1,5 °C. Écrire un programme qui affiche l’évolution de la température jusqu’à ce qu’elle atteigne 30 °C.\nCrée une variable temp avec 20 comme valeur initiale. Utilise une boucle while pour vérifier si temp est inférieure à 30. À chaque tour, affiche la température. Augmente la température de 1.5. Exemple de sortie :\nTempérature actuelle : 20.0 °C\rTempérature actuelle : 21.5 °C\rTempérature actuelle : 23.0 °C\rTempérature actuelle : 24.5 °C\rTempérature actuelle : 26.0 °C\rTempérature actuelle : 27.5 °C\rTempérature actuelle : 29.0 °C\rExercice 4 – Répéter une mesure fixe avec for On veut afficher les numéros de 10 échantillons : Échantillon 1, Échantillon 2, …, Échantillon 10.\nUtilise une boucle for avec range(1, 11). À chaque tour, affiche Échantillon suivi du numéro. Exemple de sortie :\nÉchantillon 1\rÉchantillon 2\rÉchantillon 3\rÉchantillon 4\rÉchantillon 5\rÉchantillon 6\rÉchantillon 7\rÉchantillon 8\rÉchantillon 9\rÉchantillon 10\rExercice 5 - Trouver les erreurs ! Corrige les erreurs dans ce programme pour qu’il fonctionne :\nnom = input(\"Quel est ton nom?\") print(\"Bonjour\", name) age = input(\"Quel âge as-tu?\") print(\"Dans 10 ans, tu auras\" age + 10)\rCours À quoi servent les boucles ? Répéter des instructions plusieurs fois, soit un nombre connu (for), soit jusqu’à ce qu’une condition soit atteinte (while).\nBoucle while La boucle while répète un bloc tant qu’une condition est vraie.\nwhile condition: instructions\rExemple : Affiche les minutes jusqu’à l’ébullition (100°C)\ntemp = 20 minutes = 0 while temp \u003c 100: print(f\"Minute {minutes} : {temp} °C\") temp += 5 minutes += 1 print(\"Ébullition atteinte !\")\rImportant\rIl faut modifier l’état de la condition dans la boucle pour éviter une boucle infinie. Dans l’exemple, c’est à ça que sert l’instruction compteur += 1\nBoucle infinie C’est lorsque la boucle ne s’arrête jamais. Cela peut arriver principalement dans deux situations:\nCas 1: oublier de modifier l’état de la condition\ntemp = 100 # température initiale while temp \u003e 0: print(f\"Température : {temp} °C\") # temp n'est pas modifié Cas 2: oublier de modifier l’état de la condition\ntemp = 100 # température initiale while temp \u003e 0: print(f\"Température : {temp} °C\") temp += 10\t# Erreur de logique\rArrêter une boucle infinie Cliquer dans la case Arrêter l’exécution des cellules se trouvant à gauche de la cellule contenant la boucle infinie\nBoucle for La boucle for est idéale pour répéter un nombre connu de fois, ou parcourir une séquence (ex : liste, chaîne de caractères, range()).\nfor élément in séquence: instructions\rLa boucle for avec range() for i in range(début, fin, pas): instructions\rdébut : valeur initiale (optionnel, par défaut = 0) fin : valeur non incluse pas : saut entre chaque valeur (optionnel, par défaut = 1) Exemple :\nfor i in range(0, 5): print(\"i =\", i)\rAffiche les valeurs de 0 à 4.\nInterrompre une boucle break : arrête immédiatement la boucle. continue : saute à l’itération suivante. Exemple avec break :\nfor i in range(10): if i == 5: break print(i)\rAffiche 0 à 4. S’arrête à 5.\ncompteur = 0 while compteur \u003c 10: if compteur == 5: break print(\"Valeur :\", compteur) compteur += 1\rAffiche :\nValeur : 0 Valeur : 1 Valeur : 2 Valeur : 3 Valeur : 4 Exemple avec continue for i in range(1, 11): if i % 3 == 0: continue # On saute les multiples de 3 print(i)\rAffiche:\n1\r2\r4\r5\r7\r8\r10\rC’est quoi un bogue? Un bogue (ou bug) est une erreur dans un programme qui empêche le code de fonctionner comme prévu. Il peut être :\nsyntaxique : le programme ne se lance même pas (ex. oubli de : ou de parenthèse); logique : le programme fonctionne mais donne un mauvais résultat; d’exécution : le programme se lance mais plante en cours de route (ex. division par zéro). Types d’erreurs fréquentes Type d’erreur Exemple Message typique Syntaxe if x = 5: SyntaxError Typo pritn(\"Hello\") NameError Zéro 10 / 0 ZeroDivisionError Type invalide int(\"chat\") ValueError Oubli de variable print(resultat) NameError Importance de l’ordre logique Un programme se lit de haut en bas. Une mauvaise organisation peut conduire à des résultats erronés. L’ordre : entrée → traitement → sortie Exemple courant d’erreur : utiliser une variable avant de lui avoir donné une valeur. # Mauvais ordre : print(resultat) resultat = 5 + 2 # Erreur : la variable n'existe pas encore\rTechniques de débogage simples 1. Lire les messages d’erreur Que dit-il? Sur quelle ligne? Quel type d’erreur? Quand Python rencontre une erreur, il t’affiche un message d’erreur. C’est comme un indice pour t’aider.\nExemple :\nval = int(input(\"Donne un nombre: \")) print(\"Le carré est: \" val * val)\rSyntaxError: invalid syntax\nLe message t’indique une erreur de syntaxe. Ici, il manque une virgule ou un + dans le print. print(\"Le carré est:\", val * val)\r2. Ajouter des print() C’est ta lampe de poche : affiche les variables pour voir ce qui se passe.\nage = int(input(\"Âge : \")) print(\"DEBUG - âge reçu :\", age) if age \u003e= 18: print(\"Majeur\")\r3. Tester petit à petit N’écris pas tout d’un coup. Teste par morceaux.\n# Mauvais # tout écrit avant de tester # Mieux # écrire un input → tester # ajouter un if → tester # ajouter un calcul → tester\rÀ retenir\rLes boucles (while et for) permettent de répéter des actions efficacement. Il est possible d’interrompre le déroulement d’une boucle à l’aide de break ou continue. L’indentation est essentielle pour structurer le code. while : Utilisée lorsqu’une condition doit être respectée pour que la boucle s’exécute. Équivaut à dire: TANT QUE condition est vraie FAIRE… for avec range() : Utilisée lorsque le nombre de répétitions est connu d’avance. Équivaut à dire: POUR CHAQUE tour de boucle FAIRE… ou\nPOUR CHAQUE valeur d’une séquence FAIRE… Avant de commencer à coder c’est très important de comprendre le problème afin d’identifier les variables ou constantes et les formules. Lorsqu’une erreur apparait, bien lire le message d’erreur, utiliser la fonction `print()``à pour suivre l’exécution d’un programme et identifier les bogues. Toujours “challenger” les résultats obtenus, à l’aide de différentes valeurs: “Est-ce que ça a du sens scientifiquement ?” Atelier Téléchargez le fichier de départ : Bloc-notes de départ Déplacez-le dans votre dossier prévu pour l’atelier de la semaine 4. Ouvrez votre dossier de travail programmation-sciences à partir de Visual Studio Code. Vous devriez voir votre structure de dossiers et vos fichiers (.ipynb). Exercice 1 – Réaction chimique : combien de fois? Une réaction chimique simple a lieu entre deux réactifs A et B. À chaque cycle, 1 mL de A réagit avec 2 mL de B pour produire un précipité. Vous disposez d’un certain volume de A et de B.\nDemander à l’utilisateur combien de millilitres il a de A et de B. Puis, afficher combien de fois la réaction peut avoir lieu en entier (sans fractions), et combien de mL de chaque réactif il reste après la dernière réaction complète.\nUtiliser une boucle while pour simuler la réaction répétée. À chaque itération, soustraire les volumes requis de A et B. S’arrêter lorsque l’un des réactifs n’est plus suffisant. Exemple d’exécution :\nQuantité de A disponible (en mL) : 10\rQuantité de B disponible (en mL) : 25\rLa réaction a eu lieu 10 fois.\rIl reste 0 mL de A et 5 mL de B.\rExercice 2 – Détection de mutation (compteur) Vous êtes en train d’examiner une longue série d’échantillons au microscope. Chaque échantillon peut être sain (0) ou muté (1). Vous devez saisir les résultats un à un.\nDemander à l’utilisateur combien d’échantillons il va analyser. Ensuite, lui demander un à un les résultats (0 ou 1) et compter combien d’échantillons sont mutés. À la fin, afficher le pourcentage d’échantillons mutés.\nUtiliser une boucle for basée sur le nombre total d’échantillons. Demander à chaque itération : “Échantillon X : sain (0) ou muté (1)?” Accumuler le nombre de mutations. Calculer et afficher le pourcentage. Exemple d’exécution :\nCombien d’échantillons vas-tu analyser? 4\rÉchantillon 1 : sain (0) ou muté (1)? 0\rÉchantillon 2 : sain (0) ou muté (1)? 1\rÉchantillon 3 : sain (0) ou muté (1)? 1\rÉchantillon 4 : sain (0) ou muté (1)? 0\r2/4 échantillons sont mutés.\rPourcentage de mutation : 50.0 %\rÀ faire avant le prochain cours RAPPEL: Semaine prochaine c’est le premier examen (20%)\nLire la prochaine leçon : 6. Listes, chaines et visualisation des données Faire les exercices de la prochaine leçon :",
    "description": "Objectifs Répéter des instructions tant qu’une condition est vraie, avec la boucle while. Répéter des instructions un nombre de fois connu d’avance avec la boucle for. Interrompre le déroulement d’une boucle. Comprendre les messages d’erreurs et découvrir des stratégies simples de débogage. Apprendre par la pratique\rFaites les exercices en vous aidant des notes de cours ci-dessous. Certains seront fait en classe à titre de démonstration. Les solutions seront disponibles à la fin de la semaine prochaine.",
    "tags": [],
    "title": " Boucles et débogage simple",
    "uri": "/semaine4/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences",
    "content": "Informations Date:\tSemaine #5 (Voir le calendrier scolaire) Matière: Semaines 2 à 4 inclusivement Durée:\t2h (2h 40 pour les étudiant.es du SAA, avec inscription) Documentation permise: 3 feuilles recto-verso (manuscrites ou imprimées) Format de l’examen:\tTest sur Moodle (théorique + pratique). un total de 20 questions, un mélange de questions à choix multiples (QCM), de questions à réponse courte (1 ligne) et de questions à trou, 2 questions à développement, où vous devrez écrire un petit programme en Python. L’objectif est de vérifier votre compréhension des notions vues et votre capacité à les appliquer dans de courts exercices pratiques.",
    "description": "Informations Date:\tSemaine #5 (Voir le calendrier scolaire) Matière: Semaines 2 à 4 inclusivement Durée:\t2h (2h 40 pour les étudiant.es du SAA, avec inscription) Documentation permise: 3 feuilles recto-verso (manuscrites ou imprimées) Format de l’examen:\tTest sur Moodle (théorique + pratique). un total de 20 questions, un mélange de questions à choix multiples (QCM), de questions à réponse courte (1 ligne) et de questions à trou, 2 questions à développement, où vous devrez écrire un petit programme en Python.",
    "tags": [],
    "title": " Évaluation #1 (25%)",
    "uri": "/semaine5/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences",
    "content": "Objectifs Créer, modifier et parcourir une liste simple. Manipuler des listes imbriquées (listes dans un liste). Appliquer les notions des listes simples sur les chaines de caractères. Créer, afficher, embellir et enregistrer des graphiques simples avec matplotlib. Apprendre par la pratique\rFaites les exercices en vous aidant des notes de cours ci-dessous. Certains seront fait en classe à titre de démonstration. Les solutions seront disponibles à la fin de la semaine prochaine. Exercices Fichier de départ à utiliser Cliquez sur le lien pour télécharger le fichier. Bloc-notes de départ Enregistrez le fichier dans votre dossier exercices de la semaine en cours. Ouvrez Visual Studio Code. Dans VS Code, recherchez et ouvrez le fichier exercices_listes_chaines_graphes.ipynb Assurez-vous que le noyau Python (Kernel) soit sélectionné. Vous pouvez commencer à faire les exercices. Listes Exercice 1 : Crée une liste contenant 5 animaux. À l’aide d’une boucle for, affiche chaque animal avec une phrase du type : Voici un/une \u003canimal\u003e\rExemple de résultat avec la liste [“chat”, “chien”, “lapin”, “perroquet”, “tigre”] :\nVoici un/une chat\rVoici un/une chien\rVoici un/une lapin\rVoici un/une perroquet\rVoici un/une tigre\rExercice 2 : Crée une grille de 5 lignes et 4 colonnes (liste de listes) contenant des chiffres. À l’aide d’une boucle for, affiche tous les chiffres un par un. Résultat attendu :\n1\r2\r3\r4\r5\r6\r7\r8\r9\r10\r11\r12\r13\r14\r15\r16\r17\r18\r19\r20\rExercice 3 : Demande à l’utilisateur d’entrer 3 prénoms et ajoute-les dans une liste (avec append()). Affiche chaque prénom en ordre alphabétique croissant (avec sorted()). Affiche chaque prénom en ordre alphabétique décroissant (avec sorted() et reverse=True). Exemple de résultat :\nOrdre alphabétique croissant :\rAlice\rLise\rPierre\rOrdre alphabétique décroissant :\rPierre\rLise\rAlice\rExercice 4 On étudie les séquences d’ADN de différents suspects afin de comparer certaines bases. Les séquences sont représentées sous forme de listes imbriquées.\nCrée la liste de séquences pour les 3 suspects: suspects = [ [\"A\", \"T\", \"C\", \"G\"], [\"G\", \"A\", \"T\", \"G\"], [\"A\", \"T\", \"T\", \"G\"] ]\rÀ l’aide des indices rangée et colonne: Affiche la 2e base de la 1re séquence. Affiche la dernière base de la 3e séquence. Résultat attendu :\nT\rG\rChaines de caractères Exercice 5 - Créer une liste de nombres à partir d’une liste de mots Utiliser une boucle et len() pour obtenir le nombre de lettres de chaque mot. Pour chacun des mots, ajouter son nombre de lettres dans la liste nb_lettres avec append(). Afficher la liste nb_lettres. mots = [\"chlorophylle\", \"atome\", \"protéine\"] nb_lettres = []\rRésultat attendu :\n[12, 5, 8]\rExercice 6 - Convertir en ARN Une séquence d’ADN est “atgct”.\nMets-la en majuscules (avec upper()). Remplace les “T” par “U” (avec replace()). Résultat attendu :\nAUGCU\rGraphiques Exercice 7 – Température dans une journée À partir des deux listes ci-dessous, crée un graphique de la température en fonction de l’heure. Utilise plot() et show() heures = [0, 4, 8, 12, 16, 20, 24] temperatures = [-5, -2, 3, 7, 6, 1, -2]\rAjoute : Un titre \"Température en fonction de l’heure\". Utilise title(). Les étiquettes \"Heure (h)\" et \"Température (C)\". Utilise xlabel() et ylabel() Une grille. Utilise grid() Graphique attendu : Exercice 8 - Comparaison des valeurs mesurées et attendues On a mesuré la concentration d’un soluté à différentes températures. Les valeurs attendues suivent une loi théorique, tandis que les valeurs mesurées viennent d’un capteur.\ntemp = [10, 20, 30, 40, 50] attendu = [2.1, 3.8, 5.6, 7.3, 9.0] mesure = [2.0, 3.9, 5.2, 7.5, 8.8]\rÉcris un programme qui: Affiche les valeurs attendues avec plt.plot(...) (ligne noire avec des ronds). Affiche les valeurs mesurées avec plt.bar(...) (barres bleues légèrement transparentes). Ajoute un titre, une légende, les étiquettes d’axes et une grille. Graphique attendu : Cours Qu’est-ce qu’une liste ? Une liste, c’est un conteneur dans lequel on peut ranger plusieurs éléments (nombres, chaînes, booléens, etc.).\nC’est un peu comme une boîte à compartiments.\nma_liste = [3, 7, 42, 5]\rChaque élément a une position (appelée indice).\nprint(ma_liste[0]) # Affiche 3 (le premier élément) print(ma_liste[2]) # Affiche 42 (le 3e élément) Important\rNotez le décalage entre l’indice 0 et la position 1 de l’élément (indice 2; position 3). Cela est dû au fait que les indices commencent toujours à 0. Créer et modifier une liste Créer une liste vide liste_vide = []\rAjouter des éléments avec append() fruits = [\"pomme\", \"banane\"] fruits.append(\"cerise\") # [\"pomme\", \"banane\", \"cerise\"]\rRemplacer un élément en spécifiant son indice fruits[1] = \"poire\" # [\"pomme\", \"poire\", \"cerise\"]\rParcourir une liste avec la boucle for Rappel : La boucle for est utilisée quand on connaît d’avance combien de fois on doit répéter.\nfor variable in sequence: instructions à répéter jusqu'à la fin de la séquence.\rImportant\rJusqu’à présent, on a utilisé range() pour générer une séquence de nombre entiers. À partir de maintenant, la séquence pourra être une liste (de nombres, de mots, de booléens et de listes). Exemple :\nfruits = [\"pommes\", \"poires\", \"cerises\"]\t# Une liste contenant 3 noms de fruits for fruit in fruits:\t# Pour chaque fruit de la liste fruit**s** print(f\"J'aime les {fruit}\") # Affiche: J'aime les pommes J'aime les poires J'aime les cerises\rExplication :\nLa variable fruit prendra comme valeur, les éléments de la liste fruits un à un. Avec les indices :\nfor i in range(len(fruits)): print(f\"L'indice {i} contient : {fruits[i]}\") # Affiche: L'indice 0 contient : pomme L'indice 1 contient : poire L'indice 2 contient : cerise\rExplication :\nLa fonction range() génère des nombres entiers de 0 à 2 (qui est le nombre d’éléments dans la liste - 1, car le 1er indice est 0) len(fruits) vaut 3, le nombre d’éléments dans la liste. La variable i prendra les valeurs 0, 1 et 2. fruits[i] contient un à un les fruits de la liste fruits. Fonctions utiles sur les listes simples Méthode / Fonction Description Exemple append(valeur) Ajoute un élément à la fin ma_liste.append(10) insert(indice, valeur) Insère une valeur à une position donnée ma_liste.insert(1, 99) pop(indice) Retire l’élément à l’indice (ou le dernier) ma_liste.pop() remove(valeur) Retire la première occurrence d’une valeur ma_liste.remove(42) len() Donne la longueur de la liste len(ma_liste) sorted() Trie la liste sans la modifier sorted(ma_liste) sort()* Trie la liste en la modifiant ma_liste.sort() reverse() Inverse l’ordre des éléments ma_liste.reverse() in Vérifie si un élément est dans la liste \"pomme\" in fruits → True index(valeur) Renvoie l’indice de la première occurrence fruits.index(\"poire\") count(valeur) Compte combien de fois un élément apparaît fruits.count(\"poire\") max() Trouver le max max(ma_liste) min() Trouver le min min(ma_liste) sum() Calculer une somme des éléments s = sum(ma_liste) Exemple : Calcul de la moyenne d’une liste de notes\nnotes = [85, 90, 78] moyenne = sum(notes) / len(notes) print(f\"Moyenne : {moyenne:.2f}\")\r*Important\rmots.sort() utilisé sur une liste de chaines de caractères trie la liste en respectant l’ordre Unicode, ce qui fait que les mots commençant par une majuscule sont placés avant ceux en minuscules. Exemple :\nmots = [\"pomme\", \"Banane\", \"abricot\", \"Orange\"] mots.sort() print(mots) # Affichage : ['Banane', 'Orange', 'abricot', 'pomme']\t# Notez les positions des éléments `abricot` et `pomme`\rListes imbriquées Une liste imbriquée, c’est une liste qui contient d’autres listes.\nExemple : Une liste contenant trois listes (en math, on parle de matrices)\nmatrice = [ [1, 2, 3], # 1re liste à l'indice 0 de la liste matrice [4, 5, 6], # 2e liste à l'indice 1 de la liste matrice [7, 8, 9] # 3e liste à l'indice 2 de la liste matrice ]\rAccéder à un élément précis via les indices Il faut préciser les deux indices: [rangée][colonne] print(matrice[0][2]) # Affiche 3 qui se trouve sur la première rangée (indice 0) et la 3e colonne (indice 2). Parcourir une liste imbriquée avec la boucle for Il faut utiliser deux boucles for. La première boucle pour parcourir chaque rangée une à la fois. La deuxième boucle (à l’intérieur de la première) pour parcourir les éléments un à un d’une rangée. for ligne in matrice: for valeur in ligne: print(valeur)\rExemple : afficher une grille 3x3\ngrille = [ [\"X\", \"O\", \"X\"], [\"O\", \"X\", \"O\"], [\"O\", \"X\", \"X\"] ] for ligne in grille: for valeur in ligne: print(valeur) # Affiche: X O X O X O O X X\rÀ retenir (listes)\rUne liste permet de stocker plusieurs valeurs. On accède aux éléments avec des indices. Le premier élément d’une liste est toujours à l’indice 0. La taille (nombre d’éléments) d’une liste s’obtient avec la fonction len() et vaut toujours denier indice + 1. Les listes peuvent être modifiées facilement à l’aide de fonctions et en ciblant un élément par son/ses indice.s. Une liste peut contenir d’autres listes → super utile pour représenter des tableaux ou des grilles. Dans le cas d’une liste de listes, les éléments sont accédés en spécifiant les deux indices (rangée, colonne). Les chaînes de caractères sont des listes On peut manipuler une chaine de caractère comme une suite de lettres ou une liste de lettres.\nmessage = \"Bonjour à tous!\" print(message[0]) # 'B' (le premier caractère) print(message[-1]) # '!' (le dernier caractère) print(message[-7]) # 'à' (le 7e caractère en partant de la fin)\rImportant\rLes espaces comptent dans le calcul du nombre de caractères dans une chaine.\nParcourir une chaîne for lettre in message: print(lettre)\rLongueur d’une chaîne len(message) # Nombre de caractères, incluant les espaces\rFonctions utiles sur les chaînes Objectif Code Python Passer en minuscules message.lower() Passer en majuscules message.upper() Enlever les espaces autour texte.strip() Séparer une chaîne en morceaux message.split(\" \") Remplacer un mot message.replace(\"Bonjour\", \"Salut\") Trouver la position d’un mot/lettre message.find(\"bio\") Compter le nombre de fois qu’un mot apparaît message.count(\"e\") À retenir (chaines de caractères)\rUne chaine de caractères se manipule comme une liste simple, dont les éléments sont des caractères (incluant l’espace). Visualiser les données avec Matplotlib (graphiques de base) Pour pouvoir visualiser des données sous forme de graphiques, nous utiliserons le module pyplot de la bibliothèque matplotlib.\nImporter matplotlib.pyplot La partie de matplotlib qu’on utilise le plus pour créer des graphiques s’appelle pyplot.\nimport matplotlib.pyplot as plt\rOn utilise l’abréviation plt pour simplifier l’écriture.\nExécuter tout vs seulement la cellule\rLorsque vous travaillez dans un bloc-notes Jupyter (fichier .ipynb), vous avez deux façons d’exécuter du code :\n1. Exécuter la cellule Lance uniquement la cellule sélectionnée. Utile pour tester une portion de code. Exemple : si vous importez numpy dans une cellule mais n’exécutez que une autre cellule qui l’utilise, vous obtiendrez une erreur (NameError: name 'plt' is not defined). 2. Exécuter tout Lance tout le bloc-notes de haut en bas. Assure que tous les imports (matplotlib, numpy, pandas, etc.) sont bien pris en compte avant les instructions suivantes. Utile avant une remise ou pour vérifier que le bloc-notes fonctionne de façon autonome. Bonnes pratiques Après avoir écrit ou modifié plusieurs cellules, utilisez Exécuter tout pour vérifier la cohérence de votre bloc-notes. Pendant vos tests, utilisez Exécuter la cellule pour éviter de tout relancer inutilement. Tracer une courbe simple avec plot() La fonction plot() prend deux listes (ou deux tableaux) :\nLa première représente l’axe x La seconde représente l’axe y x = [0, 1, 2, 3, 4] y = [0, 1, 4, 9, 16] plt.plot(x, y)\rSachez qu’…\rÀ ce stade, rien ne s’affiche encore. Il faut une dernière commande pour voir le graphique.\nAfficher le graphique avec show() La commande show() sert à afficher la figure dans une nouvelle fenêtre.\nplt.show()\rRésultat : Une courbe représentant les points (0,0), (1,1), (2,4), (3,9), (4,16). Exemple complet import matplotlib.pyplot as plt x = [0, 1, 2, 3, 4] y = [0, 1, 4, 9, 16] plt.plot(x, y) plt.show()\rPersonnaliser le trait de la courbe (Style de ligne, couleur, marqueur) plt.plot(x, y, color='green', linestyle='--', marker='o')\rRésultat Options les plus courantes pour la méthode plt.plot() Option Description Exemple color ou c Couleur de la courbe color='red' ou c='r' linestyle ou ls Style de ligne : continue, pointillée, etc. ls='--' linewidth ou lw Épaisseur de la ligne lw=2 marker Symbole pour marquer les points marker='o' markersize ou ms Taille des marqueurs ms=8 label Nom de la courbe (pour la légende) label='x²' alpha Transparence (0 = invisible, 1 = opaque) alpha=0.7 plt.plot(x, y, color='blue', linestyle='--', marker='o', label='x²', linewidth=2) plt.legend()\rCela trace une courbe en bleu, avec une ligne pointillée, des cercles aux points, une légende “x²”, et une ligne épaisse.\nAjouter un titre, des étiquettes et une grille avec title(), xlabel(), ylabel() et grid() plt.title(\"Courbe de y = x²\") : Ajoute un titre au graphique. plt.xlabel(\"x\") et plt.ylabel(\"y\") : Donnent un nom à l’axe horizontal (ici, “x”) et un nom à l’axe vertical (ici, “y”). plt.grid() : Affiche une grille pour mieux lire les valeurs sur le graphique (optionnel mais utile). x = [0, 1, 2, 3, 4] y = [0, 1, 4, 9, 16] plt.plot(x, y) plt.title(\"Courbe de y = x²\") plt.xlabel(\"x\") plt.ylabel(\"y\") plt.grid() plt.show()\rRésultat Tracer plusieurs courbes sur un même graphique et ajouter une légende Il suffit d’utiliser autant de plt.plot() qu’il y a de courbes à tracer. La fonction plt.legend() affiche une légende sur le graphique. Elle permet d’identifier les courbes ou les éléments tracés, à condition qu’ils aient été nommés avec label=. x = [0, 1, 2, 3, 4] y1 = [0, 1, 4, 9, 16] y2 = [0, 2, 3, 4, 8] plt.plot(x, y1, label=\"objet A\") plt.plot(x, y2, label=\"objet B\") plt.title(\"Deux courbes sur le même graphique\") plt.xlabel(\"x\") plt.ylabel(\"y\") plt.grid() plt.legend() # Affiche la légende plt.show()\rCela ajoutera une zone dans un coin du graphique indiquant “Courbe 1” et “Courbe 2”.\nRésultat Enregistrer un graphique sous forme d’image avec savefig() La fonction plt.savefig(\"figure.png\") enregistre le graphique dans un fichier image (ici au format PNG). Cela permet de conserver ou partager le graphique même sans afficher la fenêtre graphique.\nplt.plot(x, y) plt.savefig(\"figure.png\")\rLe fichier “figure.png” sera créé dans le même dossier que le fichier .ipynb.\nFonctions de base pour les graphiques Fonction / Méthode Rôle principal Exemple minimal plt.plot(x, y) Trace une courbe (x, y) plt.plot(x, y) plt.scatter(x, y) Trace un nuage de points plt.scatter(x, y) plt.bar(x, y) Trace un diagramme à barres plt.bar(x, y) plt.hist(data) Trace un histogramme plt.hist(valeurs) plt.title(\"titre\") Ajoute un titre au graphique plt.title(\"Graphique\") plt.xlabel(\"nom de l'axe x\") Ajoute un titre à l’axe des x plt.xlabel(\"Temps (s)\") plt.ylabel(\"nom de l'axe y\") Ajoute un titre à l’axe des y plt.ylabel(\"Vitesse (m/s)\") plt.legend() Affiche une légende pour les courbes nommées plt.legend() plt.grid(True) Affiche une grille plt.grid(True) plt.show() Affiche le graphique à l’écran (à la fin du tracé) plt.show() plt.savefig(\"figure.png\") Sauvegarde le graphique en image plt.savefig(\"mon_graph.png\") plt.figure(figsize=(w, h)) Définit la taille du graphique (en pouces) plt.figure(figsize=(8, 4)) À retenir (graphiques simples)\rImporter la bibliothèque : matplotlib.pyplot Créer les données sous forme de listes ou de tableaux NumPy Tracer une courbe avec plt.plot(x, y) plt.plot() change selon le type de graphique (voir le tableau ICI Il existe des options permettant de personnaliser les couleurs, traits, etc. Afficher le graphique avec plt.show(). Ajouter un titre avec plt.title(\"Mon graphique\") Nommer les axes avec plt.xlabel(\"x\") et plt.ylabel(\"y\") Afficher une grille pour mieux lire les valeurs avec plt.grid() Ajouter une légende avec label=\"...\" dans plot() et plt.legend() Tracer plusieurs courbes sur un même graphique en appelant plusieurs fois plt.plot(...) avant plt.show() Atelier Téléchargez le fichier de départ : Bloc-notes de départ Déplacez-le dans votre dossier prévu pour l’atelier de la semaine 6. Ouvrez votre dossier de travail programmation-sciences à partir de Visual Studio Code. Vous devriez voir votre structure de dossiers et vos fichiers (.ipynb). Exercice Un chercheur a mesuré la température moyenne (°C) de quatre villes pendant une semaine. Les données sont regroupées dans une liste de listes. Vous devez analyser et représenter ces données.\nLes données\nCréez une liste temperatures contenant les valeurs suivantes (une sous-liste par ville) :\nVille A : [15, 16, 14, 14, 17, 18, 19] Ville B : [22, 23, 21, 20, 24, 25, 26] Ville C : [5, 7, 6, 6, 8, 9, 7] Ville D : [10, 11, 12, 10, 13, 14, 15] Créez aussi deux listes :\nvilles = [\"Ville A\", \"Ville B\", \"Ville C\", \"Ville D\"] jours = [\"Lun\", \"Mar\", \"Mer\", \"Jeu\", \"Ven\", \"Sam\", \"Dim\"] Afficher les températures\nÀ l’aide de boucles imbriquées (for ... : dans for ... :), affichez les températures de chaque ville. Exemple attendu : Ville A : 15 16 14 14 17 18 19\rVille B : 22 23 21 20 24 25 26\r...\rTrouver les valeurs extrêmes\nPour chaque ville, utilisez les fonctions max() et min() pour trouver la température maximale et minimale. Affichez-les sous forme de phrases complètes, par exemple : La température maximale de Ville A est 19 C\rLa température minimale de Ville A est 14 C\rClasser les températures\nPour chaque température de chaque ville, affichez (if / elif / else):\n\"Froide\" si T \u003c 10 \"Douce\" si 10 ≤ T ≤ 20 \"Chaud\" si T \u003e 20 Exemple :\n15 =\u003e Douce\r7 =\u003e Froide\r23 =\u003e Chaud\rTracer un graphique avec matplotlib\nUtilisez une boucle pour tracer la courbe des températures de chaque ville (plt.plot). Ajoutez : Un titre : \"Températures hebdomadaires\" Les étiquettes des axes (xlabel, ylabel) Une grille (grid) Une légende (legend) Sauvegardez le graphique dans un fichier \"temperatures.png\" (savefig) Affichez-le (show). Résultats attendus :\nVille A : 15 16 14 14 17 18 19 Ville B : 22 23 21 20 24 25 26 Ville C : 5 7 6 6 8 9 7 Ville D : 10 11 12 10 13 14 15 La température maximale de Ville A est 19 C\rLa température minimale de Ville A est 14 C\rLa température maximale de Ville B est 26 C\rLa température minimale de Ville B est 20 C\rLa température maximale de Ville C est 9 C\rLa température minimale de Ville C est 5 C\rLa température maximale de Ville D est 15 C\rLa température minimale de Ville D est 10 C\rClassification pour Ville A :\r15 =\u003e Douce\r16 =\u003e Douce\r14 =\u003e Douce\r14 =\u003e Douce\r17 =\u003e Douce\r18 =\u003e Douce\r19 =\u003e Douce\rClassification pour Ville B :\r22 =\u003e Chaud\r23 =\u003e Chaud\r21 =\u003e Chaud\r20 =\u003e Douce\r24 =\u003e Chaud\r25 =\u003e Chaud\r26 =\u003e Chaud\rClassification pour Ville C :\r5 =\u003e Froide\r7 =\u003e Froide\r6 =\u003e Froide\r6 =\u003e Froide\r8 =\u003e Froide\r9 =\u003e Froide\r7 =\u003e Froide\rClassification pour Ville D :\r10 =\u003e Douce\r11 =\u003e Douce\r12 =\u003e Douce\r10 =\u003e Douce\r13 =\u003e Douce\r14 =\u003e Douce\r15 =\u003e Douce\rÀ faire avant le prochain cours Lire la prochaine leçon : 7. Tableaux numpy et opérations scientifiques Faire les exercices de la prochaine leçon :",
    "description": "Objectifs Créer, modifier et parcourir une liste simple. Manipuler des listes imbriquées (listes dans un liste). Appliquer les notions des listes simples sur les chaines de caractères. Créer, afficher, embellir et enregistrer des graphiques simples avec matplotlib. Apprendre par la pratique\rFaites les exercices en vous aidant des notes de cours ci-dessous. Certains seront fait en classe à titre de démonstration. Les solutions seront disponibles à la fin de la semaine prochaine.",
    "tags": [],
    "title": " Listes, chaînes et visualisation des données",
    "uri": "/semaine6/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences",
    "content": "Objectifs Créer des tableaux de données à une ou deux dimensions. Calculer des moyennes et écarts types. Gérer des données expérimentales incomplètes (np.nan). Comparer des résultats entre éléments ou conditions. Filtrer des données selon des conditions. Tracer un graphique à barres muni d’une barre d’erreur avec matplotlib. Tracer une droite de régression et interpréter la pente, l’ordonnée à l’origine et le coefficient de détermination R². Établir une relation entre deux données. Apprendre par la pratique\rFaites les exercices en vous aidant des notes de cours ci-dessous. Certains seront fait en classe à titre de démonstration. Les solutions seront disponibles à la fin de la semaine prochaine. Exercices Fichier de départ à utiliser Cliquez sur le lien pour télécharger le fichier. Bloc-notes de départ Enregistrez le fichier dans votre dossier exercices de la semaine en cours. Ouvrez Visual Studio Code. Dans VS Code, recherchez et ouvrez le fichier exercices_boucles.ipynb Assurez-vous que le noyau Python (Kernel) soit sélectionné. Vous pouvez commencer à faire les exercices. Exercice 1 – Solubilité d’un sel On a mesuré la solubilité (en g/100 mL) d’un sel à différentes températures. Les données sont stockées dans un tableau NumPy :\nimport numpy as np sol = np.array([32.0, 35.5, np.nan, 37.2, 39.0])\rAfficher le tableau sol pour visualiser les valeurs de solubilité (remarque : une valeur est manquante et représentée par np.nan).\nCalculer la moyenne des solubilités en ignorant la valeur manquante.\nCherche dans NumPy une fonction qui calcule la moyenne en excluant les NaN. Calculer l’écart type des valeurs (toujours en ignorant NaN).\nArrondis le résultat à 2 décimales avec round(). Affiche ton résultat sous la forme : Écart type : valeur. Exemple de sortie attendue :\nSolubilités : [32. 35.5 nan 37.2 39. ]\rMoyenne sans NaN : 35.925\rÉcart type : 2.58\rExercice 2 – Températures journalières Un thermomètre a enregistré la température 3 fois par jour (matin, après-midi, soir) pendant 7 jours consécutifs. Ces données sont stockées dans un tableau NumPy à deux dimensions :\ntemperatures = np.array([ [12.1, 17.3, 14.2], # Jour 1 [11.8, 16.9, 13.9], # Jour 2 [13.0, 18.1, 15.0], # Jour 3 [12.5, 17.5, 14.7], # Jour 4 [np.nan, 16.0, 14.0],# Jour 5 (valeur manquante le matin) [13.2, 18.0, 15.2], # Jour 6 [12.0, 17.0, 14.5] # Jour 7 ])\rStructure du tableau\nQuelle est la forme (shape) de ce tableau ? Combien y a-t-il de lignes et de colonnes ? Que représentent-elles ? Moyenne par jour\nCalcule la température moyenne quotidienne pour chaque jour. (Indice : tu peux utiliser np.mean(..., axis=1)) Moyenne du matin\nCalcule la température moyenne du matin (1ʳᵉ colonne du tableau). Attention : il y a une donnée manquante (np.nan). Comment peux-tu l’ignorer dans ton calcul ? (Indice : utilise np.nanmean(...) sur la colonne du matin) Résultats attendus :\nForme : (7, 3)\rMoyennes journalières : [14.53333333 14.2 15.36666667 14.9 15. 15.46666667\r14.5 ]\rMoyenne du matin : 12.433333333333332\rExercice 3 – Analyse d’ADN On a mesuré l’intensité de 5 fragments d’ADN (valeurs arbitraires) pour deux échantillons. Ces intensités sont stockées dans des tableaux NumPy :\nimport numpy as np ech1 = np.array([3.2, 2.8, 4.1, 3.9, 2.5]) ech2 = np.array([2.9, 3.0, 4.2, 4.0, 2.7])\rProfil combiné : additionne directement les deux tableaux ech1 et ech2 pour obtenir un nouveau tableau qui représente la somme des intensités fragment par fragment.\nIndice : tu peux utiliser l’opérateur + avec des tableaux NumPy. Différences entre échantillons : calcule la différence ech1 - ech2.\nIndice : fais attention à l’ordre, car ech1 - ech2 n’est pas la même chose que ech2 - ech1. Statistiques :\nCalcule la moyenne de chaque échantillon (np.mean). Calcule l’écart type de chaque échantillon (np.std). Arrondis les résultats à 2 décimales (round(..., 2)). Résultats attendus :\nProfil combiné : [6.1 5.8 8.3 7.9 5.2]\rDifférence : [ 0.3 -0.2 -0.1 -0.1 -0.2]\rMoyenne éch1 : 3.3\rÉcart type éch1 : 0.62\rMoyenne éch2 : 3.36\rÉcart type éch2 : 0.62\rExercice 4 – Pression en fonction de la hauteur dans un cylindre On mesure la pression (en kPa) à différentes hauteurs (en cm) dans un cylindre rempli d’air :\nimport numpy as np hauteur = np.linspace(0, 50, 6) # [0, 10, 20, 30, 40, 50] pression = np.array([101.3, 100.0, 98.7, 97.5, 96.2, 95.0])\rAffichage des données\nAffiche le tableau des hauteurs en cm. Affiche le tableau des pressions en kPa. Variation de pression\nCalcule la différence de pression entre deux hauteurs consécutives (chaque 10 cm). Affiche le tableau des variations obtenues. Moyenne de la pression\nCalcule la moyenne des valeurs de pression. Affiche-la avec 2 chiffres après la virgule. Graphique avec régression linéaire\nTrace un nuage de points (plt.scatter()) représentant la pression en fonction de la hauteur. Ajoute la droite de régression linéaire sur le même graphique. Mets un titre et des étiquettes aux axes (plt.xlabel, plt.ylabel). Exemple attendu (partiel) :\nHauteur (cm) : [ 0. 10. 20. 30. 40. 50.]\rPression (kPa) : [101.3 100. 98.7 97.5 96.2 95. ]\rVariation de pression par 10 cm : [-1.3 -1.3 -1.2 -1.3 -1.2]\rMoyenne de pression : 98.12 kPa\rExercice 5 – Croissance d’une plante (modélisation simplifiée) On veut modéliser la croissance d’une plante. Sans engrais, sa taille augmente de 2 cm par jour, en partant d’une taille initiale de 5 cm.\nCréer un tableau NumPy qui contient la taille de la plante chaque jour pendant 10 jours (jour 0 à jour 9).\nIndice : utilise np.arange() ou construis le tableau à partir d’une liste. Afficher ce tableau pour vérifier qu’il correspond à la croissance sans engrais. Créer un deuxième tableau où tu ajoutes +1 cm à chaque valeur du premier tableau (effet de l’engrais). Calculer la moyenne des tailles de la plante : une fois sans engrais, une fois avec engrais.\nIndice : utilise la fonction np.mean(). Résultats attendus :\nTaille sans engrais : [ 5 7 9 11 13 15 17 19 21 23]\rTaille avec engrais : [ 6 8 10 12 14 16 18 20 22 24]\rMoyenne sans engrais : 14.0 cm\rMoyenne avec engrais : 15.0 cm\rCours Importer la bibliothèque import numpy as np\rCréer des tableaux de données (array) Tableau 1D via un liste et np.array() sol = np.array([32.0, 35.5, 37.2]) print(f\"Solubilités mesurées : {sol}\")\rTableau 2D via une liste de listes et np.array() Un tableau numpy multidimentionnel c’est un tableau numpy qui contient une liste de listes. matrice = np.array([[1, 2], [3, 4]]) print(matrice.shape) # Affiche les dimensions (2 lignes, 2 colonnes)\rCréer des tableaux remplis d’une même valeur Rempli de 0 np.zeros(forme): créer un tableau rempli uniquement de 0 forme = dimensions du tableau (ex. (2,3) → 2 lignes, 3 colonnes). Exemple :\ntab_zeros = np.zeros((2, 3)) # Crée un tableau de 2 lignes et 3 colonnes rempli de 0\rRempli de 1 np.ones(forme) : créer un tableau rempli uniquement de 1. forme = dimensions du tableau (ex. (3,2) → 3 lignes, 2 colonnes). Exemple :\ntab_uns = np.ones((3, 2)) # Crée un tableau de 3 lignes et 2 colonnes rempli de 1\rRempli d’une autre valeur np.full(forme, valeur) : créer un tableau rempli avec une valeur choisie. forme = dimensions du tableau (ex. 4 → 1D avec 4 éléments). valeur = nombre à répéter (ex. 0.5). Exemple :\ntab_demi = np.full(4, 0.5) # Crée un tableau [0.5, 0.5, 0.5, 0.5]\rRempli de valeurs espacées régulièrement (utile pour les graphiques) np.linspace(debut, fin, nb) : créer un tableau de nb valeurs réparties régulièrement entre debut et fin (inclus). debut = première valeur. fin = dernière valeur. nb = nombre total de valeurs. tab_esp = np.linspace(0, 10, 5) # Crée un tableau : [ 0. 2.5 5. 7.5 10. ]\rFonctions statistiques Calculer la moyenne des données avec np.mean() sol = np.array([32.0, 35.5, 37.2]) moy = np.mean(sol) print(f\"Moyenne : {moy:.2f} g/100mL\")\rCalculer l’écart type des données avec np.std() sol = np.array([32.0, 35.5, 37.2]) ecart = np.std(sol) print(f\"Écart type : {ecart:.2f}\")\rOpérations vectorielles (rapides et simples) L’intérêt principal de NumPy : on peut faire des opérations sur tout un tableau en une seule ligne.\nx = np.array([1, 2, 3]) y = np.array([4, 5, 6])\rAddition élément par élément x + y # [5 7 9]\rSoustraction élément par élément y - x # [3 3 3]\rMultiplication par un scalaire x * 10 # [10 20 30]\rDivision par un scalaire y / 2 # [2. 2.5 3. ]\rIgnorer des valeurs manquantes (np.nan) Parfois, une mesure a été oubliée ou mal prise. On utilise np.nan pour représenter une valeur manquante :\nsol = np.array([32.0, np.nan, 37.2]) moy = np.nanmean(sol) print(f\"Moyenne (sans valeur manquante) : {moy:.2f} g/100mL\")\rLa fonction np.nanmean() calcule la moyenne des éléments en ignorant les valeurs NaN (Not a Number), qui représentent généralement des données manquantes ou invalides. Notez\rSans nanmean, la fonction np.mean(sol) retournerait nan car une seule valeur nan dans la liste contamine le résultat.\nFiltrage de données Créer un tableau et afficher uniquement certaines valeurs selon une condition* tableau = np.array([2, 5, 7, 1, 8, 3]) masque = tableau \u003e 5\t# Masquage : valeurs supérieures à 5 print(f\"Masque booléen : {masque}\") valeurs_filtrees = tableau[masque] print(f\"Valeurs supérieures à 5 : {valeurs_filtrees}\")\rRésultat attendu :\nMasque booléen : [False False True False True False]\rValeurs supérieures à 5 : [7 8]\rExplication :\nmasque = tableau \u003e 5 : crée une liste de booléen, True lorsque la valeur de tableau est \u003e 5, False sinon. tableau[masque] : ne garde que les valeurs dans tableau qui sont \u003e 5. Comptage conditionnel avec np.sum Compter combien de valeurs respectent un seuil donné.\ntableau = np.array([3, 7, 4, 6, 2, 9, 5]) seuil = 5 nb_valeurs = np.sum(tableau \u003e seuil)\t# Comptage des valeurs \u003e 5 print(f\"Nombre de valeurs supérieures à {seuil} : {nb_valeurs}\")\rRésultat attendu :\nNombre de valeurs supérieures à 5 : 3\rExplication :\ntableau \u003e seuil : conserve les valeurs dans tableau qui sont \u003e 5. np.sum(tableau \u003e seuil) : compte le nombre de valeurs dans tableau qui sont \u003e 5. Filtre avec np.where() numpy.where(condition, valeur_si_vrai, valeur_si_faux) permet de créer un tableau (ou une colonne dans un DataFrame) en fonction d’une condition logique.\ncondition → un test qui renvoie True ou False (par exemple : df[\"Note\"] \u003e= 60) valeur_si_vrai → ce qui sera écrit quand la condition est vraie (\"Réussi\") valeur_si_faux → ce qui sera écrit quand la condition est fausse (\"Échoué\") Exemple :\ndf[\"Tendance\"] = np.where(df[\"Note\"] \u003e= 60, \"Réussi\", \"Échoué\")\rExplication:\nPour chaque ligne :\nsi la note est \u003e= 60 → \"Réussi\" sinon → \"Échoué\". C’est une méthode très rapide car numpy applique l’opération directement sur toute la colonne, sans boucle explicite.\nÀ retenir\rimport numpy as np pour utiliser NumPy. np.array() crée un tableau de données. np.zeros(), np.ones(), np.full() créent des tableaux remplis. np.linspace() génère des valeurs espacées régulièrement. np.mean() calcule la moyenne. np.std() calcule l’écart type. np.nanmean() ignore les données manquantes. np.where() filtre des données selon une condition vraie ou fausse. Les opérations (+, -, *, /) s’appliquent à tout le tableau. Tracer un graphique à barres avec barre d’erreurs Importer la bibliothèque import matplotlib.pyplot as plt\rGraphique à barres Exemple de base :\nnoms = [\"A\", \"B\", \"C\"] valeurs = [4, 7, 5] plt.bar(noms, valeurs) plt.title(\"Résultats\") plt.xticks(rotation=0) plt.legend([\"Score\"]) plt.show()\rFonction Rôle plt.bar(x, y) Crée des barres plt.xticks() Contrôle les étiquettes sur l’axe x Graphique avec barres d’erreur La fonction plt.errorbar() permet de tracer des barres d’erreur autour des points d’une courbe, et ici la liste erreurs = [0.5, 0.3, 0.6] indique l’incertitude verticale (±) associée à chaque point.\nExemple :\nx = [1, 2, 3] y = [10, 12, 9] erreurs = [0.5, 0.3, 0.6] plt.errorbar(x, y, yerr=erreurs, fmt=\"o\", label=\"Mesures\") plt.title(\"Mesures avec incertitude\") plt.legend() plt.grid(True) plt.show()\rArgument Signification yerr barres d’erreur verticales xerr (optionnel) erreurs horizontales fmt=\"o\" style des points Tracer une droite de régression Rappel : L’équation d’une droite est y = a·x + b\nVoici comment obtenir les données de la droite :\na, b = np.polyfit(x, y, 1) : On calcule la droite qui s’ajuste le mieux aux points (régression linéaire) et on récupère sa pente (a) et son intercept (b). y_reg = a * x + b : On utilise la pente et l’intercept pour calculer les valeurs de la droite. plt.plot(x, y, \"o\", label=\"Données\") : On trace les points de données sous forme de cercles. plt.plot(x, y_reg, \"-\", label=f\"y = {a:.2f}x + {b:.2f}\") : On trace la droite de régression et on affiche son équation. Exemple import numpy as np x = np.array([1, 2, 3, 4]) y = np.array([2.1, 4.2, 6.1, 8.0]) # Droite de régression : y = a·x + b a, b = np.polyfit(x, y, 1) y_reg = a * x + b plt.plot(x, y, \"o\", label=\"Données\") plt.plot(x, y_reg, \"-\", label=f\"y = {a:.2f}x + {b:.2f}\") plt.legend() plt.grid(True) plt.tight_layout() plt.show()\rAffichage propre Fonction Effet plt.tight_layout() Ajuste l’espacement pour éviter le chevauchement Résumé Tâche Fonction Graphique à barres plt.bar() Barres d’erreur plt.errorbar() Droite de régression np.polyfit(), plt.plot() Affichage final plt.show(), plt.tight_layout() Atelier Téléchargez le fichier de départ : Bloc-notes de départ Déplacez-le dans votre dossier prévu pour l’atelier de la semaine 7. Ouvrez votre dossier de travail programmation-sciences à partir de Visual Studio Code. Vous devriez voir votre structure de dossiers et vos fichiers (.ipynb). Exercice : Effet de la lumière sur la croissance des plantes Une équipe de recherche a étudié l’influence de différents types de lumière sur la croissance de jeunes plantes. Après 10 jours, la hauteur (en cm) de 5 plantes a été mesurée dans chacune des trois conditions lumineuses suivantes :\nLumière naturelle Lumière LED blanche Lumière LED rouge Certaines mesures sont manquantes (notées np.nan), car une ou deux plantes n’ont pas survécu. Voici les données brutes :\nCondition Plante 1 Plante 2 Plante 3 Plante 4 Plante 5 Naturelle 12.5 13.1 12.9 13.0 12.8 LED blanche 11.2 11.6 np.nan 11.5 11.3 LED rouge 10.4 10.1 10.2 np.nan np.nan Représentation des données\nCrée un tableau 2D avec numpy.array() contenant les mesures ci-dessus. Stocke les noms des conditions dans une liste conditions = [\"Naturelle\", \"LED blanche\", \"LED rouge\"]. Analyse statistique\nCalcule la moyenne et l’écart-type de la hauteur des plantes pour chaque condition. Utilise np.nanmean() et np.nanstd() pour ignorer les valeurs manquantes (np.nan). Comparaison entre conditions\nDétermine la condition qui présente la croissance moyenne la plus élevée. Affiche un résumé clair, par exemple : Moyenne (Naturelle) = 12.86 cm, écart-type = 0.22 cm\rMoyenne (LED blanche) = ...\rMoyenne (LED rouge) = ...\rCondition avec la plus grande croissance moyenne : Naturelle\rVisualisation graphique\nReprésente les moyennes avec un diagramme en barres (plt.bar). Ajoute les barres d’erreur correspondant aux écarts-types. Mets les noms des conditions en abscisse avec plt.xticks(). Ajoute un titre et un label pour l’axe des ordonnées (hauteur moyenne en cm). À faire avant le prochain cours Lire la prochaine leçon : 8. Dictionnaires Faire les exercices de la prochaine leçon :",
    "description": "Objectifs Créer des tableaux de données à une ou deux dimensions. Calculer des moyennes et écarts types. Gérer des données expérimentales incomplètes (np.nan). Comparer des résultats entre éléments ou conditions. Filtrer des données selon des conditions. Tracer un graphique à barres muni d’une barre d’erreur avec matplotlib. Tracer une droite de régression et interpréter la pente, l’ordonnée à l’origine et le coefficient de détermination R². Établir une relation entre deux données.",
    "tags": [],
    "title": " Tableaux numpy et droite de régression",
    "uri": "/semaine7/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e \rProjet - Présentation, analyse et traduction",
    "content": "Pondération du projet (45%) Rappels :\nLa remise du projet compte pour 15% de la note finale du cours. L’évaluation intégratrice compte pour 30% de la note finale du cours. Grille critériée Version PDF à téléchargeable\nVolet Critère Excellent (100 %) Satisfaisant (75 %) Partiel (50 %) Insuffisant (0-25 %) /xx 1. Planification Le bloc-notes est structuré avec des objectifs, des étapes claires et une organisation logique Tous les éléments sont présents, bien hiérarchisés et cohérents Présence de la plupart des éléments, organisation générale claire Organisation présente mais confuse ou incomplète Aucune planification apparente /10 2. Lisibilité du code Le code est lisible, correctement indenté, les fonctions sont bien définies et les noms explicites Code propre, bien commenté, sans redondance Code globalement clair avec peu d’erreurs ou incohérences Fonctions peu claires ou redondantes, erreurs de logique mineures Code difficile à suivre, fonctions inutilisables ou syntaxe défaillante /15 3. Comparaison ADN Fonction de comparaison bien pensée (tolérante, ex. avec ?) et appliquée aux trois loci Fonction robuste, gère variations/incertitudes, bien réutilisée Fonction correcte mais pas optimisée, application partielle Fonction rigide ou trop simple, partiellement utilisée Aucune fonction claire ou mal utilisée /10 4. Résultats tabulés Moyennes bien calculées, tableau trié, lisible et interprétable Tableau complet et trié, avec moyenne calculée Tableau lisible mais sans tri ou calculs partiels Tableau confus ou incomplet Aucun tableau fonctionnel /10 5. Visualisation de base Diagrammes propres, avec axes lisibles, couleurs pertinentes Diagrammes bien faits et interprétables Diagramme présent mais peu lisible ou non personnalisé Diagramme brouillon ou ininterprétable Aucun diagramme /10 6. Programmation lettrée Markdown utilisé pour structurer l’explication du raisonnement Titres, descriptions, cheminement clair et continu Explications présentes mais parfois floues ou manquantes Peu ou pas d’explication, structure désorganisée Aucune cellule explicative /10 7. Analyse critique finale Interprétation approfondie, prise en compte des limites et incertitudes biologiques Analyse claire avec mention des incertitudes ou biais Analyse partielle, peu critique ou très générale Aucune réelle interprétation, simple répétition du résultat Aucune conclusion /5 8. Code exécutable Toutes les cellules s’exécutent sans erreur, résultats reproductibles Une ou deux erreurs mineures mais sans conséquence Plusieurs erreurs gênantes, parfois bloquantes Le code ne fonctionne pas sans corrections majeures Aucun code exécutable /10 9. Régression linéaire Régression bien réalisée, résultats interprétés avec un lien au contexte biologique Modèle présent et partiellement justifié Régression présente mais mal appliquée ou sans analyse Régression maladroite ou déconnectée du sujet Absente /10 10. Barres d’erreur Intégration claire et pertinente de barres d’erreur (biologiques/statistiques) Barres d’erreur présentes mais peu justifiées Présentes mais incomplètes ou inappropriées Présence symbolique ou hors sujet Aucune barre d’erreur /10",
    "description": "Pondération du projet (45%) Rappels :\nLa remise du projet compte pour 15% de la note finale du cours. L’évaluation intégratrice compte pour 30% de la note finale du cours. Grille critériée Version PDF à téléchargeable\nVolet Critère Excellent (100 %) Satisfaisant (75 %) Partiel (50 %) Insuffisant (0-25 %) /xx 1. Planification Le bloc-notes est structuré avec des objectifs, des étapes claires et une organisation logique Tous les éléments sont présents, bien hiérarchisés et cohérents Présence de la plupart des éléments, organisation générale claire Organisation présente mais confuse ou incomplète Aucune planification apparente /10 2.",
    "tags": [],
    "title": "Grille d'évaluation critériée",
    "uri": "/semaine12/grille/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e \rProjet - Présentation, analyse et traduction",
    "content": "Voici une liste des notions, fonctions et méthodes que vous devez avoir apprises avant de faire le projet ADN. Elle couvre la programmation de base, les bibliothèques scientifiques et les compétences analytiques spécifiques au projet.\nA. Programmation de base en Python Thème Notions, fonctions, méthodes Variables \u0026 types int, float, str, bool, list, dict Structures de contrôle if, elif, else, for, while, break, continue Fonctions personnalisées def, return, paramètres et portée locale Manipulation de chaînes str.lower(), str.replace(), in, ==, slicing, boucles sur chaînes Listes \u0026 tableaux imbriqués accès à un élément, boucles imbriquées, conditions dans les listes B. Manipulation de données avec Pandas Thème Fonctions / méthodes Créer un DataFrame pd.DataFrame(...) Lire un fichier CSV pd.read_csv(...) Parcourir un DataFrame .iterrows(), indexation par colonne Calculs sur colonnes .mean(), .round(), .sort_values() Créer des colonnes df[\"nouvelle_colonne\"] = ... C. NumPy pour le calcul scientifique Thème Fonctions / méthodes Créer des tableaux NumPy np.array(...) Fonctions mathématiques np.mean(), np.std(), np.full(), np.linspace() Opérations vectorielles tableau ± valeur, array1 + array2, etc. D. Visualisation avec Matplotlib Thème Fonctions / méthodes Graphique à barres plt.bar(...), plt.xticks(...), plt.title(...), plt.legend() Graphique avec barres d’erreur plt.errorbar(x, y, xerr, yerr) Tracer une droite de régression plt.plot(...), affichage de l’équation Affichage plt.show(), plt.grid(True), plt.tight_layout() E. Statistiques et régression avec NumPy Thème Fonctions / Méthodes utilisées Régression linéaire simple np.polyfit(x, y, deg=1) Extraire les résultats slope, intercept (avec np.polyfit) Évaluer la concordance r_value ** 2 pour le coefficient de détermination (R²) F. Programmation lettrée et structuration du bloc-notes Thème Pratiques attendues Markdown Titres (#), sous-titres, explication des sections Séparation claire Théorie, code, interprétation Commentaires # dans le code + commentaires en Markdown pour chaque bloc Exécution sans erreur Toutes les cellules exécutées du début à la fin sans blocage Résumé des compétences transversales Analyser un problème scientifique Choisir les bons outils (librairie, type de graphique) Représenter des incertitudes et des relations mathématiques Interpréter les résultats dans un contexte réaliste Produire un rapport structuré, scientifique et rigoureux",
    "description": "Voici une liste des notions, fonctions et méthodes que vous devez avoir apprises avant de faire le projet ADN. Elle couvre la programmation de base, les bibliothèques scientifiques et les compétences analytiques spécifiques au projet.\nA. Programmation de base en Python Thème Notions, fonctions, méthodes Variables \u0026 types int, float, str, bool, list, dict Structures de contrôle if, elif, else, for, while, break, continue Fonctions personnalisées def, return, paramètres et portée locale Manipulation de chaînes str.",
    "tags": [],
    "title": "Notions nécessaires pour réussir le projet",
    "uri": "/semaine12/competences_reussite/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences",
    "content": "02. Variables, types, entrées et fonctions\n03. Structures conditionnelles\n04. Boucles et débogage simple\n06. Listes, chaines et visualisation des données\n07. Tableaux NumPy et droite de régression 08. Dictionnaires et fichiers texte",
    "description": "02. Variables, types, entrées et fonctions\n03. Structures conditionnelles\n04. Boucles et débogage simple\n06. Listes, chaines et visualisation des données\n07. Tableaux NumPy et droite de régression 08. Dictionnaires et fichiers texte",
    "tags": [],
    "title": "Solutions des exercices",
    "uri": "/solutions_exercices/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e \rSolutions des exercices",
    "content": "Exercice 1 : Distance parcourue # Données vitesse = 6.5 # en m/s temps_minutes = 12 # Conversion du temps en secondes temps_secondes = temps_minutes * 60 # Calcul de la distance distance = vitesse * temps_secondes # Affichage print(f\"Le cycliste a parcouru {distance} mètres en {temps_minutes} minutes.\")\rRésultat :\nLe cycliste a parcouru 4680.0 mètres en 12 minutes.\rExercice 2 : Conversion de température # Donnée temperature_celsius = 38 # Conversions temperature_fahrenheit = (temperature_celsius * 9 / 5) + 32 temperature_kelvin = temperature_celsius + 273.15 # Affichage print(f\"Température en Celsius : {temperature_celsius}°C\") print(f\"Température en Fahrenheit : {temperature_fahrenheit}°F\") print(f\"Température en Kelvin : {temperature_kelvin}K\")\rRésultat :\nTempérature en Celsius : 38°C\rTempérature en Fahrenheit : 100.4°F\rTempérature en Kelvin : 311.15K\rExercice 3 : Calcul de concentration molaire # Données masse = 10.0 # en g masse_molaire = 58.5 # en g/mol volume = 0.25 # en L # Calcul du nombre de moles n = masse / masse_molaire # Calcul de la concentration concentration = n / volume # Affichage print(f\"Concentration molaire : {concentration} mol/L\")\rRésultat :\nConcentration molaire : 0.682051282051282 mol/L\rExercice 4 : Vitesse moyenne d’une réaction # Données concentration_initiale = 0.80 # mol/L concentration_finale = 0.20 # mol/L temps = 120 # en secondes # Calcul de la variation de concentration delta_concentration = concentration_finale - concentration_initiale # Calcul de la vitesse moyenne vitesse_moyenne = delta_concentration / temps # Affichage print(f\"Vitesse moyenne = {vitesse_moyenne:.6f} mol L⁻¹ s⁻¹\")\rRésultat :\nVitesse moyenne = -0.005000 mol L⁻¹ s⁻¹",
    "description": "Exercice 1 : Distance parcourue # Données vitesse = 6.5 # en m/s temps_minutes = 12 # Conversion du temps en secondes temps_secondes = temps_minutes * 60 # Calcul de la distance distance = vitesse * temps_secondes # Affichage print(f\"Le cycliste a parcouru {distance} mètres en {temps_minutes} minutes.\")\rRésultat :\nLe cycliste a parcouru 4680.0 mètres en 12 minutes.\rExercice 2 : Conversion de température # Donnée temperature_celsius = 38 # Conversions temperature_fahrenheit = (temperature_celsius * 9 / 5) + 32 temperature_kelvin = temperature_celsius + 273.",
    "tags": [],
    "title": " Variables, types, entrées et fonctions",
    "uri": "/solutions_exercices/2_variables_types_entree_fn/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e \rSolutions des exercices",
    "content": "Exercice 1 : Demi-vie radioactive # Constantes masse_initiale = 100 # en grammes demi_vie = 5 # en années # Entrée utilisateur temps_ecoule = float(input(\"Combien d'années se sont écoulées ? \")) # Calcul nb_periodes = temps_ecoule / demi_vie masse_restante = masse_initiale * (0.5) ** nb_periodes # Affichage conditionnel if masse_restante \u003c 1: print(f\"La masse restante est très faible : {masse_restante:.4f} g. L’isotope est presque entièrement désintégré.\") else: print(f\"Masse restante après {temps_ecoule} ans : {masse_restante:.2f} g.\")\rExercice 2 : Croissance bactérienne # Constantes population_initiale = 500 periode = 3 # heures pour un doublement # Entrée utilisateur heures = float(input(\"Combien d’heures se sont écoulées ? \")) # Calcul nb_periodes = heures / periode population_finale = population_initiale * 2 ** nb_periodes # Affichage conditionnel if population_finale \u003e 1_000_000: print(f\"Alerte ! La population bactérienne a explosé : {population_finale:.0f} bactéries.\") else: print(f\"Population estimée après {heures} heures : {population_finale:.0f} bactéries.\")\rExercice 3 – Température critique d’un liquide temperature = float(input(\"Entrez la température du liquide (en °C) : \")) if temperature \u003c 80: print(\"Température sécuritaire.\") elif temperature == 80: print(\"Limite atteinte.\") else: print(\"Attention : température critique !\")\rExercice 4 – Classification du pH d’une solution ph = float(input(\"Entrez le pH de la solution (entre 0 et 14) : \")) if 0 \u003c= ph \u003c 7: print(\"Solution acide\") elif ph == 7: print(\"Solution neutre\") elif 7 \u003c ph \u003c= 14: print(\"Solution basique\") else: print(\"Valeur de pH invalide\")\rExercice 5 – Autorisation d’une réaction chimique temperature = float(input(\"Température en °C : \")) ph = float(input(\"pH de la solution : \")) if 25 \u003c= temperature \u003c= 45 and 6 \u003c= ph \u003c= 8: print(\"Réaction possible.\") else: print(\"Conditions non compatibles.\")",
    "description": "Exercice 1 : Demi-vie radioactive # Constantes masse_initiale = 100 # en grammes demi_vie = 5 # en années # Entrée utilisateur temps_ecoule = float(input(\"Combien d'années se sont écoulées ? \")) # Calcul nb_periodes = temps_ecoule / demi_vie masse_restante = masse_initiale * (0.5) ** nb_periodes # Affichage conditionnel if masse_restante \u003c 1: print(f\"La masse restante est très faible : {masse_restante:.4f} g. L’isotope est presque entièrement désintégré.\") else: print(f\"Masse restante après {temps_ecoule} ans : {masse_restante:.",
    "tags": [],
    "title": " Structures conditionnelles",
    "uri": "/solutions_exercices/3_struct_cond/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e \rSolutions des exercices",
    "content": "Exercice 1 – For ou While ? a. Afficher les nombres de 1 à 10 Boucle : for (on connaît le début et la fin)\nfor i in range(1, 11): print(i)\rb. Compter jusqu’à 100 par bonds de 10 Boucle : for\nfor i in range(0, 101, 10): print(i)\rc. Simuler la chute d’un objet de 100 m (baisse de 10 m/s) Boucle : while (on ne connaît pas d’avance le nombre de répétitions, mais on connaît la condition d’arrêt)\nhauteur = 100 while hauteur \u003e 0: print(f\"Hauteur actuelle : {hauteur} m\") hauteur -= 10\rd. Lire une température jusqu’à ce qu’elle soit \u003c 0 Boucle : while\ntemperature = float(input(\"Entrez une température : \")) while temperature \u003e= 0: temperature = float(input(\"Entrez une température : \")) print(\"Température négative détectée. Fin du programme.\")\re. Tant que l’utilisateur ne tape pas 0 Boucle : while, sans break\nvaleur = int(input(\"Entrez un chiffre entre 1 et 10 (0 pour quitter) : \")) while valeur != 0: valeur = int(input(\"Entrez un chiffre entre 1 et 10 (0 pour quitter) : \")) print(\"Fin du programme.\")\rBoucle : while, avec break si nécessaire\nwhile True: valeur = int(input(\"Entrez un chiffre entre 1 et 10 (0 pour quitter) : \")) if valeur == 0: print(\"Fin du programme.\") break\rExercice 2 – Table de multiplication sans répétition n = int(input(\"Entrez un nombre entre 1 et 12 : \")) for i in range(1, 13): print(f\"{i} x {n} = {i * n}\")\rExercice 2 – Table de multiplication avec répétition continuer = 1 while continuer != 0: n = int(input(\"Entrez un nombre entre 1 et 12 : \")) for i in range(1, 13): print(f\"{i} x {n} = {i * n}\") continuer = int(input(\"Voulez-vous une autre table ? (1 = oui; 0 = non) : \"))\rExercice 3 – Température qui augmente jusqu’à 30 °C temp = 20.0 while temp \u003c 30: print(f\"Température actuelle : {temp:.1f} °C\") temp += 1.5\rExercice 4 – Boucle for avec range for i in range(1, 11): print(f\"Échantillon {i}\")\rExercice 5 – Corriger les erreurs Version corrigée : nom = input(\"Quel est ton nom? \") print(\"Bonjour\", nom) age = int(input(\"Quel âge as-tu? \")) print(\"Dans 10 ans, tu auras\", age + 10)",
    "description": "Exercice 1 – For ou While ? a. Afficher les nombres de 1 à 10 Boucle : for (on connaît le début et la fin)\nfor i in range(1, 11): print(i)\rb. Compter jusqu’à 100 par bonds de 10 Boucle : for\nfor i in range(0, 101, 10): print(i)\rc. Simuler la chute d’un objet de 100 m (baisse de 10 m/s) Boucle : while (on ne connaît pas d’avance le nombre de répétitions, mais on connaît la condition d’arrêt)",
    "tags": [],
    "title": " Boucles et débogage simple",
    "uri": "/solutions_exercices/4_boucles_debogage/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e \rSolutions des exercices",
    "content": "Listes Exercice 1 animaux = [\"chat\", \"chien\", \"lapin\", \"perroquet\", \"tigre\"] for animal in animaux: print(f\"Voici un/une {animal}\")\rExercice 2 grille = [ [1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16], [17, 18, 19, 20] ] for ligne in grille: for chiffre in ligne: print(chiffre)\rExercice 3 prenoms = [] for i in range(3): prenom = input(f\"Entrez le prénom {i+1} : \") prenoms.append(prenom) print(\"Ordre alphabétique croissant :\") for prenom in sorted(prenoms): print(prenom) print(\"Ordre alphabétique décroissant :\") for prenom in sorted(prenoms, reverse=True): print(prenom)\rExercice 4 suspects = [ [\"A\", \"T\", \"C\", \"G\"], [\"G\", \"A\", \"T\", \"G\"], [\"A\", \"T\", \"T\", \"G\"] ] print(suspects[0][1]) # 2e base de la 1re séquence → T print(suspects[2][-1]) # dernière base de la 3e séquence → G\rChaînes de caractères Exercice 5 mots = [\"chlorophylle\", \"atome\", \"protéine\"] nb_lettres = [] for mot in mots: nb_lettres.append(len(mot)) print(nb_lettres) # [12, 5, 8]\rExercice 6 adn = \"atgct\" arn = adn.upper().replace(\"T\", \"U\") print(arn) # AUGCU\rGraphiques avec matplotlib Exercice 7 import matplotlib.pyplot as plt heures = [0, 4, 8, 12, 16, 20, 24] temperatures = [-5, -2, 3, 7, 6, 1, -2] plt.plot(heures, temperatures) plt.title(\"Température en fonction de l’heure\") plt.xlabel(\"Heure (h)\") plt.ylabel(\"Température (C)\") plt.grid() plt.show()\rExercice 8 import matplotlib.pyplot as plt temp = [10, 20, 30, 40, 50] attendu = [2.1, 3.8, 5.6, 7.3, 9.0] mesure = [2.0, 3.9, 5.2, 7.5, 8.8] plt.plot(temp, attendu, \"ok-\", label=\"Valeurs attendues\") # o = rond, k = noir, - = ligne plt.bar(temp, mesure, color=\"blue\", alpha=0.5, label=\"Valeurs mesurées\") plt.title(\"Comparaison des concentrations\") plt.xlabel(\"Température (C)\") plt.ylabel(\"Concentration\") plt.grid() plt.legend() plt.show()",
    "description": "Listes Exercice 1 animaux = [\"chat\", \"chien\", \"lapin\", \"perroquet\", \"tigre\"] for animal in animaux: print(f\"Voici un/une {animal}\")\rExercice 2 grille = [ [1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16], [17, 18, 19, 20] ] for ligne in grille: for chiffre in ligne: print(chiffre)\rExercice 3 prenoms = [] for i in range(3): prenom = input(f\"Entrez le prénom {i+1} : \") prenoms.append(prenom) print(\"Ordre alphabétique croissant :\") for prenom in sorted(prenoms): print(prenom) print(\"Ordre alphabétique décroissant :\") for prenom in sorted(prenoms, reverse=True): print(prenom)\rExercice 4 suspects = [ [\"A\", \"T\", \"C\", \"G\"], [\"G\", \"A\", \"T\", \"G\"], [\"A\", \"T\", \"T\", \"G\"] ] print(suspects[0][1]) # 2e base de la 1re séquence → T print(suspects[2][-1]) # dernière base de la 3e séquence → G\rChaînes de caractères Exercice 5 mots = [\"chlorophylle\", \"atome\", \"protéine\"] nb_lettres = [] for mot in mots: nb_lettres.",
    "tags": [],
    "title": " Listes, chaines et visualisation des données",
    "uri": "/solutions_exercices/6_listes_chaines_visualisation/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e \rSolutions des exercices",
    "content": "Exercice 1 – Solubilité d’un sel import numpy as np sol = np.array([32.0, 35.5, np.nan, 37.2, 39.0]) # 1. Affiche les valeurs de solubilité print(\"Solubilités :\", sol) # 2. Moyenne sans NaN moyenne = np.nanmean(sol) print(\"Moyenne sans NaN :\", moyenne) # 3. Écart type ecart_type = np.nanstd(sol) print(f\"Écart type : {round(ecart_type,2)}\" )\rExercice 2 – Températures journalières temperatures = np.array([ [12.1, 17.3, 14.2], [11.8, 16.9, 13.9], [13.0, 18.1, 15.0], [12.5, 17.5, 14.7], [np.nan, 16.0, 14.0], [13.2, 18.0, 15.2], [12.0, 17.0, 14.5] ]) # 1. Forme du tableau print(f\"Forme : {temperatures.shape}\") # 2. Moyenne journalière par ligne (axis=1) moyennes_journalieres = np.nanmean(temperatures, axis=1) print(f\"Moyennes journalières : {moyennes_journalieres}\") # 3. Moyenne des températures du matin (colonne 0), sans NaN moyenne_matin = np.nanmean(temperatures[:, 0]) print(f\"Moyenne du matin : {moyenne_matin}\")\rExercice 3 – Analyse d’ADN ech1 = np.array([3.2, 2.8, 4.1, 3.9, 2.5]) ech2 = np.array([2.9, 3.0, 4.2, 4.0, 2.7]) # 1. Profil combiné profil_combine = ech1 + ech2 print(\"Profil combiné :\", profil_combine) # 2. Différence difference = ech1 - ech2 print(\"Différence :\", difference) # 3. Moyennes et écarts types print(f\"Moyenne éch1 : {round(np.mean(ech1),2)}\") print(f\"Écart type éch1 : {round(np.std(ech1),2)}\") print(f\"Moyenne éch2 : {round(np.mean(ech2),2)}\") print(f\"Écart type éch2 : {round(np.std(ech2),2)}\")\rExercice 4 – Pressions dans un cylindre (avec graphique) import numpy as np import matplotlib.pyplot as plt # Données hauteur = np.linspace(0, 50, 6) # [0, 10, 20, 30, 40, 50] pression = np.array([101.3, 100.0, 98.7, 97.5, 96.2, 95.0]) # 1. Affiche les hauteurs et les pressions print(f\"Hauteur (cm) : {hauteur}\" ) print(f\"Pression (kPa) : {pression}\") # 2. Variation de pression par tranche de 10 cm variation = np.diff(pression) # différences successives print(f\"Variation de pression par 10 cm : {variation}\") # 3. Moyenne de pression moyenne_pression = np.mean(pression) print(f\"Moyenne de pression : {round(moyenne_pression,2)} kPa\") # 4. Régression linéaire pour Pression = a*Hauteur + b a, b = np.polyfit(hauteur, pression, 1) # Tracé plt.scatter(hauteur, pression, label=\"Mesures\", color=\"blue\") plt.plot(hauteur, a*hauteur + b, label=f\"Régression linéaire: y={a:.2f}x+{b:.2f}\", color=\"red\") plt.xlabel(\"Hauteur (cm)\") plt.ylabel(\"Pression (kPa)\") plt.title(\"Pression en fonction de la hauteur\") plt.legend() plt.grid(True) plt.savefig(\"graphique_pression_regression.png\") plt.show()\rPoints notables np.diff() calcule directement les variations successives. La régression linéaire avec np.polyfit(x, y, 1) donne la pente a et l’ordonnée à l’origine b. Exercice 5 – Croissance d’une plante # 1. Tableau de la taille de la plante pendant 10 jours (sans engrais) jours = np.arange(0, 10) # Jours 0 à 9 taille_sans_engrais = 5 + 2 * jours # 2. Ajout de 1 cm supplémentaire (avec engrais) taille_avec_engrais = taille_sans_engrais + 1 # 3. Moyennes moyenne_sans = np.mean(taille_sans_engrais) moyenne_avec = np.mean(taille_avec_engrais) print(f\"Taille sans engrais : {taille_sans_engrais}\") print(f\"Taille avec engrais : {taille_avec_engrais}\") print(f\"Moyenne sans engrais : {moyenne_sans} cm\") print(f\"Moyenne avec engrais : {moyenne_avec} cm\")\rPoint notable l’utilisation de np.arange() permet de générer les jours facilement, et la croissance est calculée par formule.",
    "description": "Exercice 1 – Solubilité d’un sel import numpy as np sol = np.array([32.0, 35.5, np.nan, 37.2, 39.0]) # 1. Affiche les valeurs de solubilité print(\"Solubilités :\", sol) # 2. Moyenne sans NaN moyenne = np.nanmean(sol) print(\"Moyenne sans NaN :\", moyenne) # 3. Écart type ecart_type = np.nanstd(sol) print(f\"Écart type : {round(ecart_type,2)}\" )\rExercice 2 – Températures journalières temperatures = np.array([ [12.1, 17.3, 14.2], [11.8, 16.9, 13.9], [13.0, 18.1, 15.0], [12.5, 17.",
    "tags": [],
    "title": " Tableaux NumPy et droite de régression",
    "uri": "/solutions_exercices/7_numpy_regression/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e \rSolutions des exercices",
    "content": "Exercice 1 – Densités # Création du dictionnaire densites = { \"eau\": 1.0, \"éthanol\": 0.789, \"mercure\": 13.6 } # 1. Affiche la densité du mercure print(f\"Densité du mercure : {densites['mercure']} g/mL\") # 2. Ajout de la densité de l'huile densites[\"huile\"] = 0.91 # 3. Affiche toutes les substances et leur densité for substance, densite in densites.items(): print(f\"{substance} : {densite} g/mL\")\rExercice 2 – Chargement et exploration import pandas as pd # 1. Charger le fichier df = pd.read_csv(\"solubilite.csv\") # 2. Afficher les premières lignes print(df.head()) print(df.head(10)) # 3. Afficher les noms de colonnes print(df.columns) # 4. Afficher toutes les températures pour le composé \"NaCl\" nacl_temp = df[df[\"Composé\"] == \"NaCl\"][\"Température\"] print(\"Températures pour NaCl :\") print(nacl_temp)\rExercice 3 – Moyenne de solubilité # 1. Moyenne pour KNO3 moy_kno3 = df[df[\"Composé\"] == \"KNO3\"][\"Solubilité\"].mean() # 2. Moyenne pour NaCl moy_nacl = df[df[\"Composé\"] == \"NaCl\"][\"Solubilité\"].mean() # 3. Comparaison avec f-strings print(f\"Moyenne de solubilité - KNO3 : {moy_kno3:.2f} g/100 mL\") print(f\"Moyenne de solubilité - NaCl : {moy_nacl:.2f} g/100 mL\")\rExercice 4 – Boucle sur les composés # 1. Moyenne pour chaque composé composés = df[\"Composé\"].unique() for c in composés: moy = df[df[\"Composé\"] == c][\"Solubilité\"].mean() # 2. Vérifier si \u003e 80 if moy \u003e 80: etat = \"supérieure à 80\" else: etat = \"inférieure ou égale à 80\" print(f\"{c} : {moy:.2f} g/100 mL ({etat})\")\rExercice 5 – Ajout d’une colonne # 1. Création de la colonne \"Tendance\" # Avec np.where import numpy as np df[\"Tendance\"] = np.where(df[\"Solubilité\"] \u003e 80, \"Haute\", \"Faible\") # 2. Affichage des 10 premières lignes print(df.head(10))\rAvec df.loc # 1. Création de la colonne \"Tendance\" df[\"Tendance\"] = \"Faible\" df.loc[df[\"Solubilité\"] \u003e 80, \"Tendance\"] = \"Haute\" # 2. Affichage des 10 premières lignes print(df.head(10))",
    "description": "Exercice 1 – Densités # Création du dictionnaire densites = { \"eau\": 1.0, \"éthanol\": 0.789, \"mercure\": 13.6 } # 1. Affiche la densité du mercure print(f\"Densité du mercure : {densites['mercure']} g/mL\") # 2. Ajout de la densité de l'huile densites[\"huile\"] = 0.91 # 3. Affiche toutes les substances et leur densité for substance, densite in densites.items(): print(f\"{substance} : {densite} g/mL\")\rExercice 2 – Chargement et exploration import pandas as pd # 1.",
    "tags": [],
    "title": " Dictionnaires et fichiers texte",
    "uri": "/solutions_exercices/8_dict_fichiers/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences",
    "content": "02. Variables, types, entrées et fonctions\n03. Structures conditionnelles\n04. Boucles et débogage simple\n06. Listes, chaines et visualisation des données\n07. Tableaux NumPy et droite de régression",
    "description": "02. Variables, types, entrées et fonctions\n03. Structures conditionnelles\n04. Boucles et débogage simple\n06. Listes, chaines et visualisation des données\n07. Tableaux NumPy et droite de régression",
    "tags": [],
    "title": "Solutions des ateliers",
    "uri": "/solutions_ateliers/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e \rSolutions des ateliers",
    "content": "Exercice #1 - Expérience en chimie # Constantes q_initiale = 400 # en mL t_minutes = 10 + 15/60 # conversion des 15 s en minutes =\u003e 10.25 minutes taux_evaporation = 25 # en mL/min # Formule : q(t) = 400 - 25 * t quantite_restante = q_initiale - taux_evaporation * t_minutes print(f\"Quantité restante après {t_minutes} minutes : {quantite_restante:.2f} mL.\")\rRésultat attendu :\nQuantité restante après 10.25 minutes : 143.75 mL.\rExercice #2 - Calcul de la force gravitationnelle objet = input(\"Nom de l'objet : \") masse = float(input(\"Masse de l'objet (en kg) : \")) g = 9.8 # accélération gravitationnelle en m/s² force = masse * g print(f\"La force de la {objet} de {masse:.1f} Kg est de {force:.2f} N.\") # Tests # Test 1 # \u003e\u003e\u003e balle, 2.5 # Test 2 # \u003e\u003e\u003e voiture, 1000.0\rRésultats attendus :\nLa force de la balle de 2.5 Kg est de 24.50 N.\rLa force de la voiture de 1000.0 Kg est de 9800.00 N.\rExercice #3 - Calcul d’intérêts simple et composé # Montant initial montant = 100 # Intérêt simple : 3.2 % par an pendant 10 ans taux_simple = 0.032 duree = 10 valeur_simple = montant * (1 + taux_simple * duree) # Intérêt composé : 1.6 % deux fois par an pendant 10 ans taux_composé = 0.016 # tous les 6 mois periodes = 2 * duree # 2 fois par an pendant 10 ans valeur_composée = montant * (1 + taux_composé) ** periodes # Écart en pourcentage écart = ((valeur_composée - valeur_simple) / valeur_simple) * 100 # Affichage des résultats print(f\"Valeur avec intérêt simple : {valeur_simple:.2f} $\") print(f\"Valeur avec intérêt composé : {valeur_composée:.2f} $\") print(f\"Écart relatif : {écart:.2f} %\")\rRésultats attendus :\nValeur avec intérêt simple : 132.00 $\rValeur avec intérêt composé : 137.36 $\rÉcart relatif : 4.06 %\rExercice #4 - Calcul de la hauteur maximale # Demander la vitesse initiale à l'utilisateur vitesse_initiale = float(input(\"Entrez la vitesse initiale (en m/s) : \")) g = 9.81 # accélération gravitationnelle en m/s² # Calcul de la hauteur maximale h_max = (vitesse_initiale ** 2) / (2 * g) # Affichage print(f\"La hauteur maximale atteinte est de {h_max:.2f} mètres.\")\rTest suggestion :\nv = 20 m/s → h ≈ 20.39 m\rExercice #5 - Calcul de probabilité géométrique (Facultatif) Hypothèses :\nLe rectangle fait 10 cm de haut. Cela représente 2 diamètres, donc diamètre = 5 cm → rayon = 2.5 cm. Chaque cercle a une aire : πr² = π × 2.5² ≈ 19.63 cm² Il y a 6 cercles, donc aire totale des cercles ≈ 6 × 19.63 import math # Dimensions hauteur = 10 diametre = hauteur / 2 # car 2 diamètres = 10 cm rayon = diametre / 2 # donc rayon = 2.5 cm largeur = 3 * diametre # 3 cercles côte à côte → largeur = 15 cm # Aire du rectangle aire_rectangle = largeur * hauteur # Aire totale des 6 cercles aire_cercle = math.pi * rayon ** 2 aire_cercles = 6 * aire_cercle # Aire grise = tout sauf les cercles aire_grise = aire_rectangle - aire_cercles # Probabilité = aire grise / aire totale probabilite = aire_grise / aire_rectangle print(f\"Probabilité qu’un point tombe dans la région grise : {probabilite:.4f} (soit {probabilite*100:.2f} %)\")\rRésultat attendu :\nProbabilité qu’un point tombe dans la région grise : 0.2119 (soit 21.19 %)",
    "description": "Exercice #1 - Expérience en chimie # Constantes q_initiale = 400 # en mL t_minutes = 10 + 15/60 # conversion des 15 s en minutes =\u003e 10.25 minutes taux_evaporation = 25 # en mL/min # Formule : q(t) = 400 - 25 * t quantite_restante = q_initiale - taux_evaporation * t_minutes print(f\"Quantité restante après {t_minutes} minutes : {quantite_restante:.2f} mL.\")\rRésultat attendu :\nQuantité restante après 10.25 minutes : 143.75 mL.",
    "tags": [],
    "title": " Variables, types, entrées et fonction",
    "uri": "/solutions_ateliers/2_variables_types_entrees_fn/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e \rSolutions des ateliers",
    "content": "# Demander les données à l'utilisateur temperature = float(input(\"Température de l'eau en °C : \")) pression = float(input(\"Pression en atm (0.5, 1.0, 1.5 ou 2.0) : \")) # Déterminer le point d’ébullition selon la pression if pression == 0.5: ebullition = 81 elif pression == 1.0: ebullition = 100 elif pression == 1.5: ebullition = 112 elif pression == 2.0: ebullition = 120 else: # Version améliorée: gestion d'une pression invalide print(\"Pression invalide. Veuillez entrer 0.5, 1.0, 1.5 ou 2.0.\") exit(0) # ou exit(), mais cela fera \"crasher\" Python (Kernel) # Déterminer l’état de l’eau if temperature \u003c 0: etat = \"solide\" description = \"L’eau est sous forme de glace.\" elif temperature \u003c ebullition: etat = \"liquide\" description = \"L’eau est liquide à cette température et pression.\" else: etat = \"gaz\" description = \"L’eau est sous forme de vapeur.\" # Affichage print(f\"État de l’eau : {etat}\") print(description)\rExemples de sorties Exemple 1 : Température de l'eau en °C : 50\rPression en atm (0.5, 1.0, 1.5 ou 2.0) : 1.0\rÉtat de l’eau : liquide\rL’eau est liquide à cette température et pression.\rExemple 2 : Température de l'eau en °C : 101\rPression en atm (0.5, 1.0, 1.5 ou 2.0) : 1.0\rÉtat de l’eau : gaz\rL’eau est sous forme de vapeur.\rExemple 3 : Température de l'eau en °C : -5\rPression en atm (0.5, 1.0, 1.5 ou 2.0) : 2.0\rÉtat de l’eau : solide\rL’eau est sous forme de glace.\rVersion améliorée avec None # Demander la température temp = float(input(\"Température de l'eau en °C : \")) # Demander la pression pression = float(input(\"Pression en atm (0.5, 1.0, 1.5 ou 2.0) : \")) # Déterminer le point d'ébullition selon la pression ebullition = None # valeur par défaut si pression invalide if pression == 0.5: ebullition = 81 elif pression == 1.0: ebullition = 100 elif pression == 1.5: ebullition = 112 elif pression == 2.0: ebullition = 120 # Vérifier si la pression est valide if ebullition is None: print(\"Erreur : la pression doit être 0.5, 1.0, 1.5 ou 2.0 atm.\") else: # Déterminer l'état de l'eau if temp \u003c 0: etat = \"solide\" message = \"L’eau est sous forme de glace.\" elif temp \u003c ebullition: etat = \"liquide\" message = \"L’eau est liquide à cette température et pression.\" else: etat = \"gaz\" message = \"L’eau est sous forme de vapeur.\" # Afficher le résultat print(f\"État de l’eau : {etat}\") print(message)\rExemple d’exécution avec None pour une pression invalide : Température de l'eau en °C : 50\rPression en atm (0.5, 1.0, 1.5 ou 2.0) : 3\rErreur : la pression doit être 0.5, 1.0, 1.5 ou 2.0 atm.",
    "description": "# Demander les données à l'utilisateur temperature = float(input(\"Température de l'eau en °C : \")) pression = float(input(\"Pression en atm (0.5, 1.0, 1.5 ou 2.0) : \")) # Déterminer le point d’ébullition selon la pression if pression == 0.5: ebullition = 81 elif pression == 1.0: ebullition = 100 elif pression == 1.5: ebullition = 112 elif pression == 2.0: ebullition = 120 else: # Version améliorée: gestion d'une pression invalide print(\"Pression invalide.",
    "tags": [],
    "title": " Structures conditionnelles",
    "uri": "/solutions_ateliers/3_struct_cond/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e \rSolutions des ateliers",
    "content": "Exercice 1 : Réaction chimique # Réaction : 1 mL de A + 2 mL de B a_dispo = int(input(\"Quantité de A disponible (en mL) : \")) b_dispo = int(input(\"Quantité de B disponible (en mL) : \")) nb_reactions = 0 while a_dispo \u003e= 1 and b_dispo \u003e= 2: a_dispo -= 1 b_dispo -= 2 nb_reactions += 1 print(\"La réaction a eu lieu\", nb_reactions, \"fois.\") print(\"Il reste\", a_dispo, \"mL de A et\", b_dispo, \"mL de B.\")\rExercice 2 : Détection de mutation nb_total = int(input(\"Combien d’échantillons vas-tu analyser? \")) nb_mutations = 0 for i in range(1, nb_total + 1): reponse = int(input(f\"Échantillon {i} : sain (0) ou muté (1)? \")) if reponse == 1: nb_mutations += 1 pourcentage = (nb_mutations / nb_total) * 100 print(f\"{nb_mutations}/{nb_total} échantillons sont mutés.\") print(f\"Pourcentage de mutation : {pourcentage:.1f} %\")",
    "description": "Exercice 1 : Réaction chimique # Réaction : 1 mL de A + 2 mL de B a_dispo = int(input(\"Quantité de A disponible (en mL) : \")) b_dispo = int(input(\"Quantité de B disponible (en mL) : \")) nb_reactions = 0 while a_dispo \u003e= 1 and b_dispo \u003e= 2: a_dispo -= 1 b_dispo -= 2 nb_reactions += 1 print(\"La réaction a eu lieu\", nb_reactions, \"fois.\") print(\"Il reste\", a_dispo, \"mL de A et\", b_dispo, \"mL de B.",
    "tags": [],
    "title": " Boucles de débogage simple",
    "uri": "/solutions_ateliers/4_boucles_debogage/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e \rSolutions des ateliers",
    "content": "import matplotlib.pyplot as plt # Données temperatures = [ [15, 16, 14, 14, 17, 18, 19], # Ville A [22, 23, 21, 20, 24, 25, 26], # Ville B [5, 7, 6, 6, 8, 9, 7], # Ville C [10, 11, 12, 10, 13, 14, 15] # Ville D ] villes = [\"Ville A\", \"Ville B\", \"Ville C\", \"Ville D\"] jours = [\"Lun\", \"Mar\", \"Mer\", \"Jeu\", \"Ven\", \"Sam\", \"Dim\"] # 1. Affichage des températures for i in range(len(villes)): print(villes[i], \":\", end=\" \") for j in range(len(temperatures[i])): print(temperatures[i][j], end=\" \") print() # retour à la ligne # 2. Min et max for i in range(len(villes)): tmax = max(temperatures[i]) tmin = min(temperatures[i]) print(f\"La température maximale de {villes[i]} est {tmax} °C\") print(f\"La température minimale de {villes[i]} est {tmin} °C\") # 3. Classification des températures for i in range(len(villes)): print(f\"\\nClassification pour {villes[i]} :\") for j in range(len(temperatures[i])): t = temperatures[i][j] if t \u003c 10: print(t, \"=\u003e Froide\") elif 10 \u003c= t \u003c= 20: print(t, \"=\u003e Douce\") else: print(t, \"=\u003e Chaud\") # 4. Graphique for i in range(len(villes)): plt.plot(jours, temperatures[i], label=villes[i]) plt.title(\"Températures hebdomadaires\") plt.xlabel(\"Jour\") plt.ylabel(\"Température (°C)\") plt.grid(True) plt.legend() plt.savefig(\"temperatures.png\") plt.show()",
    "description": "import matplotlib.pyplot as plt # Données temperatures = [ [15, 16, 14, 14, 17, 18, 19], # Ville A [22, 23, 21, 20, 24, 25, 26], # Ville B [5, 7, 6, 6, 8, 9, 7], # Ville C [10, 11, 12, 10, 13, 14, 15] # Ville D ] villes = [\"Ville A\", \"Ville B\", \"Ville C\", \"Ville D\"] jours = [\"Lun\", \"Mar\", \"Mer\", \"Jeu\", \"Ven\", \"Sam\", \"Dim\"] # 1.",
    "tags": [],
    "title": " Listes, chaines et visualisation des données",
    "uri": "/solutions_ateliers/6_listes_chaines_visualisation/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e \rSolutions des ateliers",
    "content": "Résumé des résultats : Moyenne (Naturelle) = 12.86 cm, écart-type = 0.21 cm Moyenne (LED blanche) = 11.40 cm, écart-type = 0.16 cm Moyenne (LED rouge) = 10.23 cm, écart-type = 0.12 cm Condition avec la plus grande croissance moyenne : Naturelle\rimport numpy as np import matplotlib.pyplot as plt # Données avec valeurs manquantes hauteurs = np.array([ [12.5, 13.1, 12.9, 13.0, 12.8], [11.2, 11.6, np.nan, 11.5, 11.3], [10.4, 10.1, 10.2, np.nan, np.nan] ]) conditions = [\"Naturelle\", \"LED blanche\", \"LED rouge\"] # Moyenne et écart-type en ignorant les NaN moyennes = np.nanmean(hauteurs, axis=1) ecarts_type = np.nanstd(hauteurs, axis=1) # Affichage du résumé for i in range(3): print(f\"Moyenne ({conditions[i]}) = {moyennes[i]:.2f} cm, écart-type = {ecarts_type[i]:.2f} cm\") indice_max = np.argmax(moyennes) print(f\"Condition avec la plus grande croissance moyenne : {conditions[indice_max]}\") # Graphique x = np.arange(len(conditions)) plt.figure(figsize=(8, 5)) plt.bar(x, moyennes, yerr=ecarts_type, capsize=8, color=[\"green\", \"gray\", \"red\"]) plt.xticks(x, conditions) plt.ylabel(\"Hauteur moyenne (cm)\") plt.title(\"Effet de la lumière sur la croissance des plantes\") plt.grid(axis=\"y\") plt.tight_layout() plt.savefig(\"graphique_croissance_lumiere.png\") plt.show()",
    "description": "Résumé des résultats : Moyenne (Naturelle) = 12.86 cm, écart-type = 0.21 cm Moyenne (LED blanche) = 11.40 cm, écart-type = 0.16 cm Moyenne (LED rouge) = 10.23 cm, écart-type = 0.12 cm Condition avec la plus grande croissance moyenne : Naturelle\rimport numpy as np import matplotlib.pyplot as plt # Données avec valeurs manquantes hauteurs = np.array([ [12.5, 13.1, 12.9, 13.0, 12.8], [11.2, 11.6, np.nan, 11.5, 11.3], [10.4, 10.1, 10.",
    "tags": [],
    "title": " Tableaux NumPy et droite de régression",
    "uri": "/solutions_ateliers/7_numpy_regression/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Categories",
    "uri": "/categories/index.html"
  },
  {
    "breadcrumb": "",
    "content": "Description du cours Ce cours permet de se familiariser avec la programmation informatique dans un contexte scientifique et de faire le lien entre les technologies et le domaine des sciences.\nL’élève est introduit à la résolution de problèmes à l’aide d’algorithmes. Il doit traduire les algorithmes en code en utilisant un langage de programmation, tout en vérifiant le bon fonctionnement de son programme. Il traite des données et présente des résultats scientifiques à l’aide de la programmation lettrée.\nObjectifs du cours Comprendre la gestion des fichiers et dossiers sous Windows Apprendre les bases de la programmation en Python. Introduire les techniques de débogage et de traçage d’exécution. Appliquer la programmation à des problèmes scientifiques (mathématiques, physique, biologie, etc.). Automatiser des calculs et analyser des données expérimentales. Développer un raisonnement algorithmique et structuré. Maîtriser l’utilisation de Jupyter Notebook pour le développement scientifique. Planification du cours et règlements du cégep Plan du cours",
    "description": "Description du cours Ce cours permet de se familiariser avec la programmation informatique dans un contexte scientifique et de faire le lien entre les technologies et le domaine des sciences.\nL’élève est introduit à la résolution de problèmes à l’aide d’algorithmes. Il doit traduire les algorithmes en code en utilisant un langage de programmation, tout en vérifiant le bon fonctionnement de son programme. Il traite des données et présente des résultats scientifiques à l’aide de la programmation lettrée.",
    "tags": [],
    "title": "Programmation en sciences",
    "uri": "/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Tags",
    "uri": "/tags/index.html"
  }
]
