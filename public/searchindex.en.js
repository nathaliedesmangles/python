var relearn_searchindex = [
  {
    "breadcrumb": "Programmation en sciences¬†\u003e¬†\r√Ä FAIRE",
    "content": "Objectifs de la s√©ance R√©viser les structures conditionnelles (if, elif, else) Comprendre les boucles (while, for) Appliquer ces notions √† des situations scientifiques simples (physique, chimie, biologie) Plan de la s√©ance 0. Accueil et mise en contexte (10 min) Pr√©sentation des objectifs Br√®ve discussion sur ce que les √©tudiants trouvent difficile Partage d‚Äôun fichier Jupyter Notebook ou Google Colab 1. R√©vision des structures conditionnelles (30 min) Th√©orie (10 min) Rappel syntaxe : temp = 36.5 if temp \u003e 37.5: print(\"Fi√®vre\") elif temp \u003c 35.5: print(\"Hypothermie\") else: print(\"Temp√©rature normale\")\rOp√©rateurs de comparaison : ==, !=, \u003c, \u003e, \u003c=, \u003e= Op√©rateurs logiques : and, or, not Exemples scientifiques (10 min) Physique : vitesse et seuil de d√©passement vitesse = 120 if vitesse \u003e 100: print(\"D√©passement de vitesse\") else: print(\"Vitesse acceptable\")\rChimie : pH d‚Äôune solution pH = 3 if pH \u003c 7: print(\"Solution acide\") elif pH \u003e 7: print(\"Solution basique\") else: print(\"Solution neutre\")\rExercices guid√©s (10 min) Les √©tudiants partagent leurs r√©ponses via chat ou vocalement, ou √©crivent dans le notebook partag√©.\nUn corps a une temp√©rature de 39,5 ¬∞C. D√©terminez son √©tat.\nUn √©tudiant obtient 82 % √† un test. Cat√©gorisez la performance :\n\u003c 60 : √©chec 60‚Äì69 : passable 70‚Äì84 : bien 85 et + : excellent 2. Introduction aux boucles (30 min) Th√©orie (10 min) Boucle while compteur = 0 while compteur \u003c 5: print(compteur) compteur += 1\rBoucle for avec range() for i in range(5): print(i)\rApplications simples (10 min) Biologie : r√©p√©tition de cycles cellulaires cycles = 3 for cycle in range(cycles): print(f\"Cycle {cycle+1}: r√©plication de l‚ÄôADN\")\rChimie : simulation de gouttes de solution gouttes = 0 while gouttes \u003c 10: print(\"Ajout d'une goutte\") gouttes += 1\rExercices guid√©s (10 min) Affichez les entiers pairs de 2 √† 10. Simulez la d√©croissance radioactive sur 5 √©tapes (texte seulement). Demandez √† l‚Äôutilisateur un nombre, puis affichez tous les entiers jusqu‚Äô√† ce nombre. 3. Activit√© d‚Äôint√©gration (20 min) Probl√®me √† r√©soudre en petits groupes (ou seul si le groupe est petit) puis discussion en pl√©ni√®re.\n√ânonc√© :\nUn √©tudiant mesure le pH de plusieurs solutions. √âcrivez un programme qui :\nDemande √† l‚Äôutilisateur combien de solutions il veut tester. Pour chaque solution, demande le pH. Affiche si chaque solution est acide, basique ou neutre. Bonus : compter combien de solutions sont acides, basiques ou neutres.\n4. Retour et questions (10 min) Retour sur les concepts cl√©s R√©pondre aux questions Partage du code final et de ressources suppl√©mentaires (site Python Tutor, W3Schools, exercices sur exercicespython.fr) Mat√©riel √† pr√©parer Un notebook Google Colab (ou fichier Jupyter) avec :\nSections de code √† compl√©ter Exemples illustr√©s Cases de texte pour consignes Lien de partage en mode ‚Äúcommentaire‚Äù ou ‚Äú√©dition‚Äù",
    "description": "Objectifs de la s√©ance R√©viser les structures conditionnelles (if, elif, else) Comprendre les boucles (while, for) Appliquer ces notions √† des situations scientifiques simples (physique, chimie, biologie) Plan de la s√©ance 0. Accueil et mise en contexte (10 min) Pr√©sentation des objectifs Br√®ve discussion sur ce que les √©tudiants trouvent difficile Partage d‚Äôun fichier Jupyter Notebook ou Google Colab 1. R√©vision des structures conditionnelles (30 min) Th√©orie (10 min) Rappel syntaxe : temp = 36.",
    "tags": [],
    "title": "Boucles while et for",
    "uri": "/afaire/boucles/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences¬†\u003e¬†\r√Ä FAIRE",
    "content": "Contenu :\nLes fonctions personnalis√©es La documentation (docstring) Les tests unitaires avec PyTest Les fonctions arithm√©tiques int√©gr√©es (min, max, sum, abs, etc.) Le module math Objectifs de la s√©ance (2 heures) √Ä la fin de cette s√©ance, l‚Äô√©tudiant(e) sera capable de :\nUtiliser les fonctions arithm√©tiques int√©gr√©es et du module math Cr√©er ses propres fonctions avec param√®tres et valeurs de retour Documenter ses fonctions avec des docstrings √âcrire des tests unitaires simples avec pytest D√©roulement de la s√©ance üîπ 0:00 ‚Äì 0:10 | Accueil et plan de la s√©ance Br√®ve discussion : Pourquoi utiliser des fonctions ?\nPr√©sentation du plan :\nFonctions arithm√©tiques et math Fonctions personnalis√©es Docstrings Tests unitaires üîπ 0:10 ‚Äì 0:30 | Bloc 1 ‚Äî Fonctions arithm√©tiques et module math Fonctions int√©gr√©es (10 min) Pr√©sentation : min(), max(), sum(), abs(), round() Exemples : nombres = [3, 7, -5, 10] print(min(nombres)) # -5 print(sum(nombres)) # 15 print(abs(-9.2)) # 9.2\rPetit d√©fi (5 min) Trouver la valeur moyenne d‚Äôune liste de nombres, sans utiliser de module externe.\nModule math (5 min) Importation : import math Fonctions utiles : math.sqrt(), math.pow(), math.log(), math.sin(), math.pi, math.e Exemples :\nimport math print(math.sqrt(25)) # 5.0 print(math.log(100, 10)) # 2.0 print(math.pi) # 3.1415...\rüîπ 0:30 ‚Äì 1:00 | Bloc 2 ‚Äî Fonctions personnalis√©es Explication interactive (10 min) Syntaxe de def Param√®tres, arguments return vs affichage Exercice guid√© (15 min) Cr√©er une fonction energie_cinetique(masse, vitesse) avec retour de valeur.\nExercice autonome (5 min) Cr√©er une fonction energie_potentielle(m, h) avec g = 9.81.\nüîπ 1:00 ‚Äì 1:15 | Bloc 3 ‚Äî Docstrings Pr√©sentation (5 min) Format standard def nom_fonction(param): \"\"\" Description de la fonction. Param√®tres: - param (type): Description. Retour: - type: Description. \"\"\"\rExercice (10 min) Ajouter une docstring aux fonctions energie_cinetique et energie_potentielle.\nüîπ 1:15 ‚Äì 1:45 | Bloc 4 ‚Äî Tests unitaires avec pytest ‚öôÔ∏è Pr√©sentation (5 min) Pourquoi tester ? Syntaxe avec assert Exercice guid√© (15 min) Cr√©er un fichier test_physics.py :\nfrom mon_module import energie_cinetique def test_energie_cinetique(): assert energie_cinetique(2, 3) == 9.0\rLancer pytest dans le terminal.\nD√©fi bonus (10 min) Tester une fonction utilisant math.sqrt() (ex. : vitesse calcul√©e √† partir de l‚Äô√©nergie).\nüîπ 1:45 ‚Äì 2:00 | Consolidation, Q\u0026R R√©sum√© des notions vues.\nQuestions-r√©ponses.\nSuggestions d‚Äôexercices maison :\nFonctions pour des calculs en cin√©matique (ex. acc√©l√©ration) Ajouter docstrings et tests Explorer plus de fonctions dans math (ex. trigonom√©trie)",
    "description": "Contenu :\nLes fonctions personnalis√©es La documentation (docstring) Les tests unitaires avec PyTest Les fonctions arithm√©tiques int√©gr√©es (min, max, sum, abs, etc.) Le module math Objectifs de la s√©ance (2 heures) √Ä la fin de cette s√©ance, l‚Äô√©tudiant(e) sera capable de :\nUtiliser les fonctions arithm√©tiques int√©gr√©es et du module math Cr√©er ses propres fonctions avec param√®tres et valeurs de retour Documenter ses fonctions avec des docstrings √âcrire des tests unitaires simples avec pytest D√©roulement de la s√©ance üîπ 0:00 ‚Äì 0:10 | Accueil et plan de la s√©ance Br√®ve discussion : Pourquoi utiliser des fonctions ?",
    "tags": [],
    "title": "Fonctions personnalis√©es, docstring et test unitaires et Maths",
    "uri": "/afaire/fonctions/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences¬†\u003e¬†\r√Ä FAIRE",
    "content": "semaine 1: Cours et environnement de travail semaine 2: intro Python (variables, types, affichage, conversion et input) semaine 3: structures conditionnelles semaine 4: boucles semaine 5: introduction aux listes (base liste sans boucle, test #1 15% ‚Äì\u003e Semaines 1 √† 4 incl.)\nsemaine 6: liste et boucles semaine 7: dictionnaires semaine 8: intro aux fonctions (fn int√©gr√©es Math) et into aux graphiques semaine 9: tableaux Numpy semaine 10: test #2 20% ‚Äì\u003e Semaines 5 √† 9 incl.\nsemaine 11: pandas semaine 12: semaine 13: projet semaine 14: projet semaine 15: finalisation du projet et remise",
    "description": "semaine 1: Cours et environnement de travail semaine 2: intro Python (variables, types, affichage, conversion et input) semaine 3: structures conditionnelles semaine 4: boucles semaine 5: introduction aux listes (base liste sans boucle, test #1 15% ‚Äì\u003e Semaines 1 √† 4 incl.)\nsemaine 6: liste et boucles semaine 7: dictionnaires semaine 8: intro aux fonctions (fn int√©gr√©es Math) et into aux graphiques semaine 9: tableaux Numpy semaine 10: test #2 20% ‚Äì\u003e Semaines 5 √† 9 incl.",
    "tags": [],
    "title": "Planification",
    "uri": "/afaire/plan/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences¬†\u003e¬†\r√Ä FAIRE",
    "content": "Objectifs de la s√©ance Apprendre √† arr√™ter une boucle selon une condition. Apprendre √† cr√©er et manipuler une liste. Apprendre √† parcourir des listes ou des cha√Ænes de caract√®res avec la boucle for. Partie 1 ‚Äì Arr√™ter une boucle selon une condition Explication Une boucle while ou for continue tant qu‚Äôune condition est vraie. On peut aussi utiliser break pour arr√™ter manuellement une boucle. D√©monstration : boucle while valeur = 0 while valeur \u003c 100: print(\"Valeur actuelle :\", valeur) if valeur == 50: break # Arr√™te la boucle valeur += 1\rD√©monstration : boucle for for i in range(11):\t# i prends les valeurs 0,1,2,3,4,5,6,7,8,9,10 if i == 5: break\t# Arr√™te la boucle print(i) # Affiche: 0, 1, 2, 3, 4\rExercice 1 Demander √† l‚Äôutilisateur de saisir des temp√©ratures (float). La boucle s‚Äôarr√™te d√®s qu‚Äôon entre la valeur 0 (valeur sentinelle). # Saisie de temp√©ratures while True:\t# Toujours Vrai, pratique ici, mais √† √©viter temp = float(input(\"Entrez une temp√©rature (ou 0 pour arr√™ter) : \")) if temp == 0: print(\"Arr√™t de la saisie.\") break\rPartie 2 ‚Äì Cr√©er et manipuler une liste Explication Une liste permet de stocker plusieurs √©l√©ments (nombres, cha√Ænes, etc.) dans une seule variable. Dans une liste les √©l√©ments sont index√©s √† partir de 0, ce qui signifie que le premier √©l√©ment d‚Äôune liste et √† l‚Äôindice 0. Pour acc√©der √† un √©l√©ment d‚Äôune liste on utilise: nom-de-la-liste[index]. Exemple: Pour acc√©der au 3e √©l√©ment d‚Äôune liste nomm√©e ma_liste, on √©crit: ma_liste[2]. 2 √©tant l‚Äôindice du 3e √©l√©ment. D√©monstration : cr√©ation et acc√®s fruits = [\"pomme\", \"banane\", \"kiwi\"] print(fruits[0]) # Affiche 'pomme' fruits.append(\"mangue\")\t# Ajoute 'mangue' √† la fin print(fruits) # Ajoute un √©l√©ment\rD√©monstration : op√©rations utiles notes = [85, 90, 78, 92] print(\"Nombre de notes :\", len(notes))\t# Affiche le nombre d'√©l√©ments dans la liste \"notes\" print(\"Somme :\", sum(notes))\t# Affiche la somme des notes dans la liste print(\"Moyenne :\", sum(notes) / len(notes))\t# Affiche la moyenne des notes dans la liste\rLa fonction len donne la longueur d‚Äôune liste ou d‚Äôune chaine de caract√®res. Exercice 2 Cr√©er une liste de pH mesur√©s dans diff√©rents √©chantillons et calculer la moyenne. Afficher un message si un pH est inf√©rieur √† 4. Partie 3 ‚Äì Parcourir une liste ou une cha√Æne avec la boucle for Explication La boucle for permet de parcourir une liste ou une cha√Æne de caract√®res √©l√©ment par √©l√©ment. D√©monstration 5 : liste vitesses = [10.2, 11.5, 9.8, 12.0] for v in vitesses: print(\"Vitesse :\", v)\rD√©monstration : cha√Æne de caract√®res mot = \"glucose\" for lettre in mot: print(lettre)\rExercice 3 Demander de :\nCr√©er une liste de volumes en mL. Convertir chaque volume en L (1 L = 1000 mL) et afficher les conversions avec une boucle for. Exercices d‚Äôint√©gration Exercice 4 On a mesur√© la concentration d‚Äôun solut√© (en g/L) √† 6 moments diff√©rents. La boucle :\nAffiche chaque concentration Affiche un message d‚Äôalerte si \u003e 20 g/L Calcule la moyenne √† la fin Solution attendue (exemple guid√©) concentrations = [12.5, 18.0, 22.3, 19.5, 21.0, 15.7] somme = 0 for c in concentrations: print(\"Concentration :\", c) if c \u003e 20: print(\"Attention : concentration √©lev√©e !\") somme += c moyenne = somme / len(concentrations) print(\"Moyenne :\", moyenne)\rExercice 5 √âcrire une fonction qui prend une liste de temp√©ratures et retourne la temp√©rature maximale et sa position Exemple de nom de fonction: temperature_max(une_liste) Exemple d‚Äôutilisation de la fonction: liste = [15,34,23,12,31,8,20] temp_max = temperature_max(liste) print(\"La temp√©rature maximum est\", temp_max)\rExercice 6 On vous donne une s√©quence d‚ÄôADN repr√©sent√©e par une cha√Æne de caract√®res compos√©e uniquement des lettres A, T, C et G. Par exemple : sequence = \"ATGCGCATTAAGGCCGTA\"\rParcourez la s√©quence avec une boucle for. Comptez le nombre de bases A, T, C et G. Affichez le nombre total de bases. Affichez le pourcentage de G+C dans la s√©quence. Indices Une lettre dans une cha√Æne peut √™tre parcourue avec une boucle for. Pour augmenter un compteur, on peut faire : compteur += 1 Calcul du pourcentage : Pourcentage de G+C = (nombre de G + nombre de C) / nombre total de bases * 100\rSolution attendue (exemple guid√©) sequence = \"ATGCGCATTAAGGCCGTA\" nb_A = 0 nb_T = 0 nb_C = 0 nb_G = 0 for base in sequence: if base == 'A': nb_A += 1 elif base == 'T': nb_T += 1 elif base == 'C': nb_C += 1 elif base == 'G': nb_G += 1 total = len(sequence) gc_content = ((nb_G + nb_C) / total) * 100 print(\"A :\", nb_A) print(\"T :\", nb_T) print(\"C :\", nb_C) print(\"G :\", nb_G) print(\"Total :\", total) print(\"Pourcentage de G+C :\", round(gc_content, 2), \"%\")\rVariante possible Ajouter une v√©rification : si une base n‚Äôest pas A, T, C ou G, afficher un message d‚Äôerreur. Compter les codons (groupes de 3 bases) avec une boucle for allant de 0 √† len(sequence)-3 par pas de 3.",
    "description": "Objectifs de la s√©ance Apprendre √† arr√™ter une boucle selon une condition. Apprendre √† cr√©er et manipuler une liste. Apprendre √† parcourir des listes ou des cha√Ænes de caract√®res avec la boucle for. Partie 1 ‚Äì Arr√™ter une boucle selon une condition Explication Une boucle while ou for continue tant qu‚Äôune condition est vraie. On peut aussi utiliser break pour arr√™ter manuellement une boucle. D√©monstration : boucle while valeur = 0 while valeur \u003c 100: print(\"Valeur actuelle :\", valeur) if valeur == 50: break # Arr√™te la boucle valeur += 1\rD√©monstration : boucle for for i in range(11):\t# i prends les valeurs 0,1,2,3,4,5,6,7,8,9,10 if i == 5: break\t# Arr√™te la boucle print(i) # Affiche: 0, 1, 2, 3, 4\rExercice 1 Demander √† l‚Äôutilisateur de saisir des temp√©ratures (float).",
    "tags": [],
    "title": "break, continue, liste et boucle",
    "uri": "/afaire/break_continue_liste/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences¬†\u003e¬†\r√Ä FAIRE",
    "content": "Objectifs de la s√©ance (2h) Comprendre comment fonctionne le d√©bogueur dans PyCharm. Apprendre √† utiliser les points d‚Äôarr√™t (breakpoints), la fen√™tre des variables, les options Step Over, Step Into, Evaluate Expression, etc. R√©viser les structures conditionnelles (if/elif/else) et les boucles (for, while) en les testant pas √† pas. Apprendre √† identifier les erreurs logiques classiques en sciences (unit√©s, ordre des op√©rations, initialisation incorrecte, etc.). Plan de la s√©ance (2h) Temps Activit√© 0:00-0:15 Introduction au d√©bogueur PyCharm (d√©monstration) 0:15-0:35 Exemple guid√© 1 : if/elif/else ‚Äì temp√©rature de changement d‚Äô√©tat 0:35-1:00 Exercice 1 : Identifier les erreurs dans un mod√®le de dilatation thermique 1:00-1:20 Exemple guid√© 2 : boucle for ‚Äì somme des masses d‚Äô√©chantillons 1:20-1:40 Exercice 2 : Corriger une boucle while mal conditionn√©e (demi-vie radioactive) 1:40-2:00 D√©fi final : simulation simplifi√©e de chute libre avec erreur √† trouver Outils PyCharm install√©. Mode ‚ÄúDebug‚Äù activ√© (menu Run \u003e Debug‚Ä¶). Possibilit√© de partager l‚Äô√©cran de l‚Äô√©l√®ve ou d‚Äôutiliser un environnement collaboratif si permis. Vid√©o YouTube Site JetBrains Exemple guid√© 1 : Conditions ‚Äì Temp√©rature de l‚Äôeau temp = 100 if temp \u003c 0: print(\"Solide (glace)\") elif temp \u003c 100: print(\"Liquide\") else: print(\"Gaz (vapeur)\")\rBut : mettre des points d‚Äôarr√™t Ajouter un point d‚Äôarr√™t sur chaque ligne. Ex√©cuter le programme en mode Debug. Observer la variable temp et les branches conditionnelles prises. Modifier la valeur de temp √† 50 et recommencer. üîß Exercice 1 : Dilatation thermique (avec erreur) # Dilatation thermique: ŒîL = L0 * Œ± * ŒîT L0 = 10 # longueur initiale en m alpha = 0.000012 # coefficient de dilatation (/¬∞C) temp_initiale = 20 temp_finale = 50 delta_L = alpha * L0 + (temp_finale - temp_initiale) # ERREUR ICI print(\"Allongement =\", delta_L, \"m\")\rT√¢ches de l‚Äô√©l√®ve Mettre des points d‚Äôarr√™t. Corriger l‚Äôerreur dans le calcul (+ au lieu de *). Modifier L0, alpha et v√©rifier le r√©sultat attendu. Exemple guid√© 2 : Boucle for ‚Äì Masse totale masses = [1.2, 3.5, 2.1, 0.9] somme = 0 for m in masses: somme += m print(\"Masse totale:\", somme, \"g\")\rObjectifs : Suivre l‚Äô√©volution de somme √† chaque it√©ration. Utiliser l‚Äôinspecteur de variables. Tester avec une liste vide ou avec des valeurs n√©gatives. Exercice 2 : Boucle while ‚Äì Demi-vie radioactive (avec erreur logique) # Masse d‚Äôun isotope radioactif qui d√©cro√Æt √† chaque p√©riode masse = 100 demi_vie = 5 temps = 0 while masse \u003e 0: masse = masse / 2 temps = temps + demi_vie print(\"Temps total:\", temps)\rErreurs √† d√©tecter : Boucle infinie possible si masse devient tr√®s petit mais jamais exactement 0. Ajouter une masse minimale d√©tectable comme crit√®re d‚Äôarr√™t. Version corrig√©e propos√©e : masse = 100 demi_vie = 5 temps = 0 seuil = 0.1 while masse \u003e seuil: masse = masse / 2 temps += demi_vie print(\"Temps √©coul√©:\", temps, \"ans\")\rD√©fi final : Chute libre (d√©tection d‚Äôun bug) # Chute libre avec v = v0 + g*t, h = h0 - v*t g = 9.8 v0 = 0 h0 = 100 t = 0 dt = 1 h = h0 while h \u003e 0: v = v0 + g * t h = h0 - v * t print(f\"Temps: {t}s, Hauteur: {h:.2f}m\") t += dt\rProbl√®mes : v est recalcul√©e √† chaque fois en fonction du temps total, pas de l‚Äô√©tape actuelle. h0 reste fixe ‚Äì il faut accumuler les vitesses √† chaque pas. Version corrig√©e : g = 9.8 v = 0 h = 100 t = 0 dt = 1 while h \u003e 0: v = v + g * dt h = h - v * dt print(f\"Temps: {t}s, Hauteur: {h:.2f}m\") t += dt\r√Ä faire apr√®s la s√©ance Reprendre les exercices avec d‚Äôautres donn√©es ou contextes scientifiques (e.g., r√©action exothermique, refroidissement de Newton). Installer un plugin PyCharm comme ‚ÄúEduTools‚Äù pour avoir d‚Äôautres exercices interactifs. Faire une fiche-rappel des symboles du d√©bogueur (Step Over, Into, Out, Resume, etc.).",
    "description": "Objectifs de la s√©ance (2h) Comprendre comment fonctionne le d√©bogueur dans PyCharm. Apprendre √† utiliser les points d‚Äôarr√™t (breakpoints), la fen√™tre des variables, les options Step Over, Step Into, Evaluate Expression, etc. R√©viser les structures conditionnelles (if/elif/else) et les boucles (for, while) en les testant pas √† pas. Apprendre √† identifier les erreurs logiques classiques en sciences (unit√©s, ordre des op√©rations, initialisation incorrecte, etc.). Plan de la s√©ance (2h) Temps Activit√© 0:00-0:15 Introduction au d√©bogueur PyCharm (d√©monstration) 0:15-0:35 Exemple guid√© 1 : if/elif/else ‚Äì temp√©rature de changement d‚Äô√©tat 0:35-1:00 Exercice 1 : Identifier les erreurs dans un mod√®le de dilatation thermique 1:00-1:20 Exemple guid√© 2 : boucle for ‚Äì somme des masses d‚Äô√©chantillons 1:20-1:40 Exercice 2 : Corriger une boucle while mal conditionn√©e (demi-vie radioactive) 1:40-2:00 D√©fi final : simulation simplifi√©e de chute libre avec erreur √† trouver Outils PyCharm install√©.",
    "tags": [],
    "title": "D√©bogage pas √† pas",
    "uri": "/afaire/debogage/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences¬†\u003e¬†\r√Ä FAIRE",
    "content": "Voici une le√ßon concise et essentielle sur la r√©daction d‚Äôun notebook Jupyter clair et bien structur√© en Python, avec des explications adapt√©es √† des √©tudiants de premi√®re session en sciences de la nature.\nüßæ Le√ßon : üéØ Objectifs Utiliser le Markdown pour structurer les sections du notebook S√©parer clairement la th√©orie, le code et l‚Äôinterpr√©tation Ajouter des commentaires dans le code S‚Äôassurer que toutes les cellules s‚Äôex√©cutent sans erreur, du haut vers le bas 1. üìù Utiliser Markdown pour structurer le notebook Markdown permet d‚Äô√©crire du texte format√© dans les cellules non-code.\nüîπ Titres et sous-titres √âl√©ment Syntaxe Markdown Titre principal # Titre Sous-titre ## Sous-titre Sous-section ### Sous-section üìå Exemple : # Analyse d'une exp√©rience ## Objectif √âtudier l‚Äô√©volution de la temp√©rature en fonction du temps. ## Donn√©es exp√©rimentales Les donn√©es sont fournies dans un fichier CSV.\r2. üß± S√©parer : Th√©orie / Code / Interpr√©tation Organise chaque section de ton notebook comme suit :\nTh√©orie (Markdown) : But, formule, contexte scientifique Code Python (cellule code) : Lecture des donn√©es, calculs, trac√© Interpr√©tation (Markdown) : R√©sultats obtenus, analyse 3. üí¨ Ajouter des commentaires dans le code Utilise # pour √©crire un commentaire sur une ligne dans une cellule de code.\nüìå Exemple : # Charger les biblioth√®ques n√©cessaires import pandas as pd import matplotlib.pyplot as plt # Lire les donn√©es exp√©rimentales df = pd.read_csv(\"temperature.csv\")\r‚û°Ô∏è R√®gle : chaque bloc de code doit avoir des commentaires clairs.\n4. ‚úÖ Ex√©cution sans erreur : haut en bas Avant de partager ton notebook :\nVa dans le menu ‚ÄúKernel‚Äù ‚Üí ‚ÄúRestart \u0026 Run All‚Äù (ou √©quivalent dans Google Colab : Runtime \u003e Run all) Toutes les cellules doivent s‚Äôex√©cuter dans l‚Äôordre sans erreur. Aucune cellule ne doit d√©pendre de code non ex√©cut√© auparavant. ‚úÖ R√©sum√© minimal Bonnes pratiques Exemples Markdown pour titres # Titre, ## Sous-titre Th√©orie avant le code Explication en Markdown Commentaires dans le code # Calcul de la moyenne Cellules ex√©cutables sans erreur Run all sans blocage üß™ Exercice guid√© üîß Exercice ‚Äì Structure ton notebook Cr√©e un petit notebook contenant :\nUn titre principal (# √âtude d‚Äôun ph√©nom√®ne physique) Une section Markdown expliquant le but de l‚Äôexp√©rience Un bloc de code lisant un petit tableau CSV fictif Une interpr√©tation en Markdown (m√™me si br√®ve) Des commentaires dans chaque cellule de code Aucune erreur √† l‚Äôex√©cution compl√®te",
    "description": "Voici une le√ßon concise et essentielle sur la r√©daction d‚Äôun notebook Jupyter clair et bien structur√© en Python, avec des explications adapt√©es √† des √©tudiants de premi√®re session en sciences de la nature.\nüßæ Le√ßon : üéØ Objectifs Utiliser le Markdown pour structurer les sections du notebook S√©parer clairement la th√©orie, le code et l‚Äôinterpr√©tation Ajouter des commentaires dans le code S‚Äôassurer que toutes les cellules s‚Äôex√©cutent sans erreur, du haut vers le bas 1.",
    "tags": [],
    "title": "√âcrire un notebook Python bien structur√©",
    "uri": "/afaire/markdown/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences¬†\u003e¬†\r√Ä FAIRE",
    "content": "Programmation scientifique en Python ‚Äî Le√ßon : Fichiers, Tableaux et Visualisation 1. Lire et √©crire des fichiers de donn√©es (.csv) Les fichiers .csv (Comma-Separated Values) permettent de stocker des tableaux de donn√©es.\n√âcrire un fichier .csv with open(\"donnees.csv\", \"w\") as f: f.write(\"Nom,√Çge\\n\") f.write(\"Alice,20\\n\") f.write(\"Bob,22\\n\")\rLire un fichier .csv with open(\"donnees.csv\", \"r\") as f: contenu = f.read() print(contenu)\rPour des donn√©es num√©riques, on peut utiliser numpy.savetxt() et numpy.loadtxt() : import numpy as np # Sauvegarder un tableau tableau = np.array([[1, 2], [3, 4]]) np.savetxt(\"tableau.csv\", tableau, delimiter=\",\") # Charger un tableau donnees = np.loadtxt(\"tableau.csv\", delimiter=\",\") print(donnees)\r2. Tableaux num√©riques avec NumPy NumPy est une biblioth√®que sp√©cialis√©e pour manipuler efficacement des tableaux.\nCr√©ation d‚Äôun tableau : import numpy as np a = np.array([1, 2, 3, 4]) b = np.array([[1, 2], [3, 4]])\rQuelques fonctions utiles : np.zeros((2, 3)) # tableau 2x3 rempli de 0 np.ones((3, 2)) # tableau 3x2 rempli de 1 np.arange(0, 10, 2) # [0 2 4 6 8]\r3. Op√©rations sur les tableaux NumPy Les op√©rations sont automatiques et √©l√©ment par √©l√©ment.\na = np.array([1, 2, 3]) b = np.array([4, 5, 6]) print(a + b) # [5 7 9] print(a * b) # [4 10 18] print(a ** 2) # [1 4 9]\rLes op√©rations fonctionnent aussi sur des matrices :\nmat = np.array([[1, 2], [3, 4]]) print(mat.T) # transpos√©e\r4. Fonctions statistiques utiles data = np.array([1, 2, 3, 4, 5]) print(np.sum(data)) # 15 print(np.mean(data)) # 3.0 print(np.std(data)) # 1.41\r5. Graphiques de base avec Matplotlib import matplotlib.pyplot as plt x = np.array([0, 1, 2, 3]) y = np.array([0, 1, 4, 9]) plt.plot(x, y) # Tracer y en fonction de x plt.title(\"Graphique simple\") plt.xlabel(\"x\") plt.ylabel(\"y\") plt.show()\rAutres types de graphiques :\nplt.scatter(x, y) # Nuage de points plt.bar(x, y) # Diagramme √† barres\r6. Les instructions conditionnelles R√©sum√© des outils par th√®me Th√®me Fonctions / Notions cl√©s Fichiers .csv open(), write(), read(), loadtxt(), savetxt() Tableaux np.array(), np.zeros(), np.ones() Op√©rations sur tableaux +, *, .T Statistiques np.sum(), np.mean(), np.std() Graphiques plt.plot(), plt.scatter(), plt.show() Conditions if, elif, else Souhaitez-vous que je transforme cette le√ßon en fichier .ipynb (Jupyter Notebook) avec exemples ex√©cutables et sections bien structur√©es ?",
    "description": "Programmation scientifique en Python ‚Äî Le√ßon : Fichiers, Tableaux et Visualisation 1. Lire et √©crire des fichiers de donn√©es (.csv) Les fichiers .csv (Comma-Separated Values) permettent de stocker des tableaux de donn√©es.\n√âcrire un fichier .csv with open(\"donnees.csv\", \"w\") as f: f.write(\"Nom,√Çge\\n\") f.write(\"Alice,20\\n\") f.write(\"Bob,22\\n\")\rLire un fichier .csv with open(\"donnees.csv\", \"r\") as f: contenu = f.read() print(contenu)\rPour des donn√©es num√©riques, on peut utiliser numpy.savetxt() et numpy.loadtxt() : import numpy as np # Sauvegarder un tableau tableau = np.",
    "tags": [],
    "title": "L‚Äô√©criture et la lecture de donn√©es (csv)",
    "uri": "/afaire/lecture_ecriture_csv_numpy/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences¬†\u003e¬†\r√Ä FAIRE",
    "content": "Qu‚Äôest-ce qu‚Äôun tableau 2D ? C‚Äôest une liste de listes.\nExemple d‚Äôun tableau 3 lignes √ó 4 colonnes rempli de 0 :\ntableau = [ [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0] ]\rChaque sous-liste repr√©sente une ligne.\nBoucler sur les lignes (1 niveau) for ligne in tableau: print(ligne)\r‚û° On affiche chaque ligne enti√®re.\nBoucler sur chaque √©l√©ment (2 niveaux) Pour acc√©der √† chaque case du tableau, on utilise deux boucles imbriqu√©es :\nfor ligne in tableau: for case in ligne: print(case)\r‚û° On affiche chaque √©l√©ment un par un.\nAvec indices (si on veut conna√Ætre les positions) for i in range(len(tableau)): # i = index de ligne for j in range(len(tableau[i])): # j = index de colonne print(f\"Case [{i}][{j}] = {tableau[i][j]}\")\r‚û° Cette m√©thode permet de savoir √† quelle position se trouve chaque √©l√©ment.\nExercice guid√© 1 ‚Äì Remplir un tableau 3x3 avec la somme des indices tableau = [] for i in range(3): ligne = [] for j in range(3): ligne.append(i + j) tableau.append(ligne) print(tableau)\rR√©sultat :\n[[0, 1, 2],\r[1, 2, 3],\r[2, 3, 4]]\rExercice guid√© 2 ‚Äì Compter les z√©ros dans un tableau tableau = [ [0, 1, 0], [2, 0, 3], [0, 4, 5] ] compteur = 0 for ligne in tableau: for case in ligne: if case == 0: compteur += 1 print(\"Nombre de z√©ros :\", compteur)\r‚û° R√©sultat : Nombre de z√©ros : 4\n√Ä retenir Structure Utilit√© for ligne in tableau Parcourir chaque ligne for case in ligne Parcourir chaque √©l√©ment for i in range(len(...)) Parcourir avec indices (i, j) tableau[i][j] Acc√®s √† une case sp√©cifique Exercice ‚Äì Grille de temp√©ratures en laboratoire Contexte scientifique Une technicienne en laboratoire a pris des mesures de temp√©ratures (¬∞C) dans 3 chambres de croissance de plantes, √† 4 moments diff√©rents dans la journ√©e. Les donn√©es sont enregistr√©es dans un tableau 2D.\n# tableau des temp√©ratures [chambre][moment] temperatures = [ [22.1, 22.5, 23.0, 23.2], # Chambre 1 [21.8, 22.2, 22.6, 22.9], # Chambre 2 [23.5, 23.3, 23.0, 22.8] # Chambre 3 ]\rObjectif Afficher chaque temp√©rature avec la chambre et le moment de mesure. Calculer la temp√©rature moyenne de chaque chambre. Trouver la temp√©rature la plus √©lev√©e de toutes les mesures. Solution guid√©e pas √† pas 1. Afficher toutes les temp√©ratures for i in range(len(temperatures)): # index des chambres for j in range(len(temperatures[i])): # index des moments print(f\"Chambre {i+1}, Moment {j+1} : {temperatures[i][j]} ¬∞C\")\r2. Moyenne par chambre for i in range(len(temperatures)): moyenne = sum(temperatures[i]) / len(temperatures[i]) print(f\"Moyenne de la chambre {i+1} : {moyenne:.2f} ¬∞C\")\r3. Temp√©rature maximale max_temp = temperatures[0][0] # on part du premier √©l√©ment for ligne in temperatures: for temp in ligne: if temp \u003e max_temp: max_temp = temp print(\"Temp√©rature maximale enregistr√©e :\", max_temp, \"¬∞C\")\rVariante possible ajouter une 4e chambre, de d√©tecter la temp√©rature minimale, ou de colorer en rouge les temp√©ratures \u003e 23‚ÄØ¬∞C avec un message sp√©cial.",
    "description": "Qu‚Äôest-ce qu‚Äôun tableau 2D ? C‚Äôest une liste de listes.\nExemple d‚Äôun tableau 3 lignes √ó 4 colonnes rempli de 0 :\ntableau = [ [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0] ]\rChaque sous-liste repr√©sente une ligne.\nBoucler sur les lignes (1 niveau) for ligne in tableau: print(ligne)\r‚û° On affiche chaque ligne enti√®re.\nBoucler sur chaque √©l√©ment (2 niveaux) Pour acc√©der √† chaque case du tableau, on utilise deux boucles imbriqu√©es :",
    "tags": [],
    "title": "Boucler sur un tableau 2D",
    "uri": "/afaire/boucler_tableaux2d/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences",
    "content": "Outils et locaux pour pratiquer Quel logiciel je peux installer sur mon ordinateur personnel pour pratiquer √† la maison ? Alternatives √† VS Code La sauvegarde automatique dans Visual Studio Code. Sauvegarde dans VS Code Les raccourcis clavier (copier, coller, couper, enregistrer, etc.) Trucs pratiques pour bien coder O√π se trouve les touches pour [, ], {, }, @, \u003c, \u003e, etc. sur un clavier QWERTY. Trucs pratiques pour bien coder Dans quels locaux du c√©gep, je peux aller pratiquer ? Locaux avec Python, VS Code et Jupyter √Ä propos des √©valuations Faut-il remettre les ateliers ? Oui. Il ne sont pas not√©s, mais ils servent √† ce que vous pratiquez et √† voir o√π sont les difficult√©s des √©tudiants.\nQuand faut-il remettre les ateliers ? Chaque semaine, au plus tard √† la fin du cours, √† moins d‚Äôun avis contraire de l‚Äôenseignante.\nFaut-il remettre les ateliers ? Oui. Il ne sont pas not√©s, mais ils servent √† ce que vous pratiquez et √† voir o√π sont les difficult√©s des √©tudiants.\nPuis-je avoir les solutions des exercices des cours ? Oui. Ils sont faits en classe et ajout√©s ICI au fur et √† mesure.\nPuis-je avoir les solutions des ateliers ? Oui. Ils sont ajout√©s ICI au fur et √† mesure.\nQuelle date est l‚Äôexamen ? Voir le plan de cours accompagn√© du calendrier scolaire/r√©partition des semaines Voir le site Web du cours\nQu‚Äôavons-nous droit pour les examens ? √âvaluation 1 : 1 feuille recto-verso (manuscrite ou imprim√©e).\n√âvaluation 2 : 1 feuille recto-verso (manuscrite ou imprim√©e).\nExamen final: Le site web du cours.\nCombien vaut l‚Äôexamen ? √âvaluation 1 : 25%\n√âvaluation 2 : 35%\nExamen final: 25%\nSur quoi portera l‚Äôexamen ? √âvaluation 1 : La mati√®re des 4 premi√®res semaines inclusivement.\n√âvaluation 2 : La mati√®re des semaines 6 √† 9 inclusivement.\nExamen final: Toute la mati√®re, mais acc√®s sur le projet.\nLe projet (fichier .ipynb) est-il not√© ? Oui. Il compte pour 15% de la note finale",
    "description": "Outils et locaux pour pratiquer Quel logiciel je peux installer sur mon ordinateur personnel pour pratiquer √† la maison ? Alternatives √† VS Code La sauvegarde automatique dans Visual Studio Code. Sauvegarde dans VS Code Les raccourcis clavier (copier, coller, couper, enregistrer, etc.) Trucs pratiques pour bien coder O√π se trouve les touches pour [, ], {, }, @, \u003c, \u003e, etc. sur un clavier QWERTY. Trucs pratiques pour bien coder Dans quels locaux du c√©gep, je peux aller pratiquer ?",
    "tags": [],
    "title": "Foire Aux Questions",
    "uri": "/faq/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences¬†\u003e¬†\rFoire Aux Questions",
    "content": "Deux alternatives populaires Si vous cherchez une alternative simple et accessible √† VS Code avec Jupyter, Google Colab est une excellente option. Colab est un environnement de notebooks en ligne gratuit, offert par Google, qui ne n√©cessite aucune installation. Il vous permet d‚Äô√©crire et d‚Äôex√©cuter du code Python directement dans votre navigateur, tout en profitant d‚Äôun acc√®s facile √† des biblioth√®ques scientifiques populaires comme NumPy, pandas, ou matplotlib. C‚Äôest l‚Äôoutil id√©al pour d√©buter en programmation scientifique ou collaborer √† distance, puisqu‚Äôil s‚Äôint√®gre √† Google Drive et permet de partager vos notebooks aussi facilement qu‚Äôun document Google Docs.\nDe son c√¥t√©, PyCharm est un environnement de d√©veloppement int√©gr√© (IDE) puissant con√ßu sp√©cialement pour Python. Contrairement √† Google Colab, il s‚Äôinstalle sur votre ordinateur, mais offre une panoplie de fonctionnalit√©s avanc√©es comme l‚Äôautocompl√©tion intelligente, le d√©bogueur int√©gr√©, et la gestion de projets complexes. Pour les d√©butants ou les utilisateurs interm√©diaires qui souhaitent aller plus loin que les notebooks Jupyter, PyCharm repr√©sente une solution robuste et professionnelle. Il existe en version gratuite (Community) et en version payante (Professional) avec essai gratuit.\rGoogle Colab, ou Colaboratory, est un service cloud gratuit propos√© par Google, bas√© sur Jupyter Notebook. Colab permet d‚Äôex√©cuter du code Python directement dans le navigateur sans n√©cessiter de configuration pr√©alable, tout en offrant un acc√®s gratuit aux processeurs graphiques, pour acc√©l√©rer les calculs.\nAcc√©der √† Google Colab Pour commencer √† utiliser Google Colab, suivez ces √©tapes simples :\nM√©thode 1: Via le site de Google Colab Allez sur le site: Google Colab. Cliquez sur le bouton Open Colab. Si la fen√™tre Ouvrir le notebook s‚Äôouvre, cliquez sur le bouton + Nouveau notebook pour cr√©er un nouveau notebook. Sinon, une fois sur l‚Äôinterface de Colab, vous pouvez cr√©er un nouveau notebook en utilisant le menu Fichier et en s√©lectionnant Nouveau notebook. Les notebooks Colab permettent d‚Äô√©crire et d‚Äôex√©cuter du code Python. Par exemple, pour ex√©cuter une cellule de code, cliquez dessus et appuyez sur le bouton de lecture ou utilisez le raccourci clavier Ctrl+Entr√©e.\nM√©thode 2: Via votre compte Google Drive (Si vous en avez un) Ouvrez votre compte Google Drive, cliquez sur Nouveau, puis sur Plus et s√©lectionnez Google Colaboratory. Importer un fichier de l‚Äôordinateur vers Colab Pour importer un fichier .ipynb (notebook Jupyter) ou .csv (fichier de donn√©es) depuis votre ordinateur local vers Google Colab, vous pouvez utiliser l‚Äôune des deux m√©thodes suivantes :\nM√©thode 1 : Utiliser l‚Äôinterface de Google Colab (plus simple) Pour un fichier .ipynb : Va sur https://colab.research.google.com/ Clique sur l‚Äôonglet ‚ÄúT√©l√©verser‚Äù (Upload). S√©lectionne ton fichier .ipynb depuis ton ordinateur. Pour un fichier .csv : Dans un notebook Colab ouvert, ex√©cute la cellule suivante :\nfrom google.colab import files uploaded = files.upload()\rCela ouvrira une bo√Æte de dialogue pour t√©l√©verser des fichiers.\nUne fois le fichier .csv t√©l√©vers√©, tu peux l‚Äôutiliser comme suit :\nimport pandas as pd df = pd.read_csv('nom_du_fichier.csv') df.head()\rM√©thode 2 : Monter Google Drive et acc√©der aux fichiers Si tu veux garder les fichiers disponibles √† long terme :\nMonte ton Google Drive :\nfrom google.colab import drive drive.mount('/content/drive')\rAcc√®de aux fichiers (ex. un .csv) avec un chemin comme :\ndf = pd.read_csv('/content/drive/MyDrive/chemin/vers/fichier.csv')\rUtilisation des biblioth√®ques Python Colab permet d‚Äôutiliser des biblioth√®ques populaires pour l‚Äôanalyse et la visualisation des donn√©es. Par exemple, pour g√©n√©rer des donn√©es al√©atoires avec NumPy et les visualiser avec Matplotlib :\nimport numpy as np import matplotlib.pyplot as plt ys = 200 + np.random.randn(100) x = [x for x in range(len(ys))] plt.figure(figsize=(10, 6)) plt.plot(x, ys, '-') plt.fill_between(x, ys, 195, where=(ys \u003e 195), facecolor='g', alpha=0.6) plt.show()\rLes notebooks Colab sont enregistr√©s dans votre compte Google Drive, ce qui facilite le partage et la collaboration. Vous pouvez partager vos notebooks avec d‚Äôautres utilisateurs, qui peuvent les commenter ou les modifier.\nPour en savoir plus sur Colab Lire ce notebook\nD√©velopp√© par JetBrains, PyCharm est √† ce jour une plateforme tr√®s populaire pour Python. Cette plateforme hybride est couramment utilis√©e pour le d√©veloppement d‚Äôapplications Python, et notamment par de grandes entreprises telles que Twitter, Facebook, Amazon ou Pinterest.\nCompatible avec Windows, Linux et macOS, PyCharm contient des modules et des packages aidant les d√©veloppeurs √† programmer des logiciels avec Python plus rapidement et avec moins d‚Äôefforts.\nInstallation et configuration T√©l√©charger PyCharm T√©l√©chargez PyCharm en cliquant sur le lien de t√©l√©chargement.\nCliquez sur le bouton Download\nSauvegardez le fichier .exe (en date de juin 2025, c‚Äôest pycharm-2025.1.1.1.exe) Installation Les instructions varient selon votre syst√®me d‚Äôexploitation. Pour Windows: Lancez l‚Äôinstallation en cliquant deux fois sur le fichier pycharm-2025.1.1.1.exe t√©l√©charg√© pr√©c√©demment. Autorisez l‚Äôapplication Suivez les √©tapes en cliquant sur *Next. Cochez les cases de configuration de PyCharm, puis cliquez sur Next, puis Install Patientez, le temps que l‚Äôinstallation se fasse6. (environ 2-3 minutes). Red√©marrer votre ordinateur. Deux choix possibles: Choisir l‚Äôoption Reboot now, puis cliquez sur Finish. Choisir l‚Äôoption I want to manually reboot later, pour red√©marrer l‚Äôordinateur plus tard. Cliquez sur Finish. Lancer PyCharm Retrouvez l‚Äôapplication PyCharm √† l‚Äôaide de la loupe Recherche sur la barre des t√¢ches Lors du premier lancement de PyCharm, il vous sera demand√© de vous connecter √† votre compte JetBrains ou de d√©marrer une √©valuation gratuite.\n√âcran d‚Äôaccueil Lorsque vous ouvrez PyCharm pour la premi√®re fois, vous √™tes accueilli par l‚Äô√©cran d‚Äôaccueil.\nDepuis l‚Äô√©cran d‚Äôaccueil de PyCharm, vous pouvez explorer cinq sections principales :\nOnglet ‚ÄúLearn PyCharm‚Äù : il contient des liens vers la documentation et d‚Äôautres ressources. Vous pouvez √©galement vous inscrire √† l‚Äôoutil interactif ‚ÄúFeature Trainer‚Äù, con√ßu pour vous enseigner rapidement des astuces de productivit√© dans PyCharm.\nOnglet ‚ÄúPlugins‚Äù : il vous permet d‚Äôinstaller des extensions suppl√©mentaires comme des th√®mes personnalis√©s ou des raccourcis clavier (keymaps), utiles si vous venez d‚Äôun autre √©diteur ou IDE.\nKeymaps : installer des keymaps facilite la transition depuis d‚Äôautres √©diteurs. Pour rechercher, commencez √† taper ‚Äúkeymaps‚Äù, par exemple, et PyCharm vous proposera les keymaps disponibles pour les √©diteurs les plus populaires. Choisissez celui qui vous convient le mieux et cliquez pour l‚Äôinstaller.\nSection ‚ÄúCustomize‚Äù : elle vous permet de modifier certains param√®tres courants. Par exemple, vous pouvez changer le th√®me Darcula pour IntelliJ Light. Vous pouvez √©galement synchroniser l‚Äôapparence avec celle de votre syst√®me d‚Äôexploitation. Si vous avez install√© un keymap ou un th√®me, vous devrez les activer ici.\nOnglet ‚ÄúProjects‚Äù : c‚Äôest ici que vous pouvez cr√©er, ouvrir ou cloner un projet pour commencer √† travailler.\nVid√©o sur YouTube L‚Äôinstallation en vid√©o\nCr√©er un premier projet dans PyCharm. Pour cette √©tape, vous pouvez:\nRegarder la vid√©o sur YouTube: vid√©o ou Lire (en anglais) les instruction sur le site de PyCharm Comprendre l‚Äôinterface de PyCharm Pour cette √©tape, vous pouvez:\nRegarder la vid√©o sur YouTube: vid√©o Ou Lire le tutoriel sur le site de PyCharm",
    "description": "Deux alternatives populaires Si vous cherchez une alternative simple et accessible √† VS Code avec Jupyter, Google Colab est une excellente option. Colab est un environnement de notebooks en ligne gratuit, offert par Google, qui ne n√©cessite aucune installation. Il vous permet d‚Äô√©crire et d‚Äôex√©cuter du code Python directement dans votre navigateur, tout en profitant d‚Äôun acc√®s facile √† des biblioth√®ques scientifiques populaires comme NumPy, pandas, ou matplotlib. C‚Äôest l‚Äôoutil id√©al pour d√©buter en programmation scientifique ou collaborer √† distance, puisqu‚Äôil s‚Äôint√®gre √† Google Drive et permet de partager vos notebooks aussi facilement qu‚Äôun document Google Docs.",
    "tags": [],
    "title": "Alternatives √† VS Code",
    "uri": "/faq/alternatives/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences¬†\u003e¬†\rFoire Aux Questions",
    "content": "Locaux o√π se donne le cours 420-SN1-RE A-3820 B-2302 B-2303 B-3376 B-3410 Autres locaux (√† confirmer) * *",
    "description": "Locaux o√π se donne le cours 420-SN1-RE A-3820 B-2302 B-2303 B-3376 B-3410 Autres locaux (√† confirmer) * *",
    "tags": [],
    "title": "Locaux avec Python",
    "uri": "/faq/locaux_python/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences¬†\u003e¬†\rPr√©sentation du cours et l'environnement de travail",
    "content": "OneDrive OneDrive est un stockage et synchronisation de fichiers personnels ou scolaires dans le cloud et accessible √† partir de n‚Äôimporte quel emplacement sur n‚Äôimporte quel appareil. Id√©al pour le travail en cours et le partage avec des personnes sp√©cifiques. Les documents sont priv√©s jusqu‚Äô√† ce que vous les partagez. 1. Rep√©rer l‚Äôic√¥ne OneDrive Vous devriez voir l‚Äôic√¥ne de OneDrive (scolaire = en bleu) (personnel = en gris), sur la barre des t√¢ches, en bas √† droite de l‚Äô√©cran (pr√®s de l‚Äôhorloge). Si ce n‚Äôest pas le cas, cliquez sur la fl√®che (encradr√© en bleu) pour voir les ic√¥nes cach√©es. Recherchez l‚Äôic√¥ne de nuage OneDrive ! Si vous ne trouvez pas l‚Äôic√¥ne de OneDrive, passez √† l‚Äô√©tape 2. 2. Se connecter √† son compte scolaire/professionnel Aller √† l‚Äôadresse suivante https://login.microsoftonline.com/?whr=cmontmorency.qc.ca\nEntrer votre nom d‚Äôutilisateur, i.e. les 7 derniers chiffres du num√©ro de DA, soit le nom utilis√© pour se connecter sur les ordinateurs du Coll√®ge, suivi de @cmontmorency.qc.ca\nEntrer votre mot de passe, soit le m√™me que celui pour le sans-fil (Wi-Fi) et pour se connecter sur les ordinateurs du Coll√®ge\nN. B. Ce mot de passe initial se trouve dans Col.NET sous ‚ÄúDossier personnel / Autres informations‚Äù. S‚Äôil n‚Äôy a pas de mot de passe c‚Äôest que votre compte n‚Äôa pas encore √©t√© cr√©√©, rev√©rifiez plus tard. Si la connexion √©choue, r√©essayez dans quelques heures, il se peut qu‚Äôil y ait un d√©lai. S‚Äôil exc√®de 48h, faites une demande sur le portail de service. Cliquer sur Suivant au message indiquant Plus d‚Äôinformations requises.\nN. B. Pour configurer votre authentification multifacteur (MFA) avec un num√©ro de cellulaire, s√©lectionner Je veux configurer une autre m√©thode au bas de la fen√™tre pour et suivre l‚Äô√©tape #7.\n2.1 Lancer la configuration Cliquez sur l‚Äôic√¥ne OneDrive, puis sur Se connecter. üì∏ Capture sugg√©r√©e : fen√™tre ‚ÄúSe connecter √† OneDrive‚Äù avec champ pour courriel.\n2.2 Entrer votre adresse courriel scolaire/professionnelle Tapez votre adresse (ex. prenom.nom@ecole.ca), puis cliquez sur Se connecter. üì∏ Capture sugg√©r√©e : saisie de l‚Äôadresse courriel.\n2.3 Entrer votre mot de passe Vous serez redirig√© vers la page de votre √©tablissement pour entrer le mot de passe. Cliquez ensuite sur Suivant. üì∏ Capture sugg√©r√©e : page de connexion Microsoft 365.\n√âtape 3 : Choisir l‚Äôemplacement du dossier OneDrive 3.1 Emplacement du dossier OneDrive vous propose un dossier par d√©faut (g√©n√©ralement dans votre dossier utilisateur). Cliquez sur Suivant pour l‚Äôaccepter, ou sur Modifier l‚Äôemplacement si vous voulez changer. üì∏ Capture sugg√©r√©e : √©cran ‚ÄúVoici votre dossier OneDrive‚Äù.\n‚òÅÔ∏è √âtape 4 : Synchronisation des fichiers 4.1 Synchronisation automatique Une fois connect√©, OneDrive synchronise automatiquement vos fichiers avec le cloud. Les fichiers que vous ajoutez dans ce dossier seront automatiquement sauvegard√©s en ligne. üì∏ Capture sugg√©r√©e : dossier OneDrive ouvert dans l‚ÄôExplorateur de fichiers.\n√âtape 5 : G√©rer les fichiers et dossiers 5.1 Ajouter un fichier ou dossier Faites un clic droit dans le dossier OneDrive \u003e Nouveau \u003e Dossier ou Document texte, etc. üì∏ Capture sugg√©r√©e : clic droit dans le dossier OneDrive. 5.2 Copier ou d√©placer un fichier Glissez-d√©posez un fichier dans le dossier OneDrive pour qu‚Äôil soit sauvegard√© automatiquement. üì∏ Capture sugg√©r√©e : d√©placement d‚Äôun fichier dans OneDrive.\n5.3 Acc√©der √† OneDrive en ligne Faites clic droit sur l‚Äôic√¥ne OneDrive dans la barre des t√¢ches \u003e Afficher en ligne. Cela ouvre votre OneDrive dans le navigateur. üì∏ Capture sugg√©r√©e : menu clic droit sur l‚Äôic√¥ne OneDrive avec ‚ÄúAfficher en ligne‚Äù s√©lectionn√©.\nComprendre les ic√¥nes de synchronisation Ic√¥ne Signification ‚òÅÔ∏è Nuage Fichier uniquement en ligne ‚úÖ Cercle vert Fichier synchronis√© et disponible hors ligne üîÑ Fl√®ches bleues Synchronisation en cours ‚ùå Croix rouge Erreur de synchronisation üì∏ Capture sugg√©r√©e : quelques fichiers avec ic√¥nes diff√©rentes dans OneDrive.\nüéØ R√©sum√© √âtape Action 1 Ouvrir OneDrive 2 Se connecter avec son courriel scolaire/professionnel 3 Choisir o√π stocker le dossier OneDrive 4 Laisser OneDrive synchroniser 5 G√©rer ses fichiers dans l‚Äôexplorateur ou en ligne Pause 5 minutes",
    "description": "OneDrive OneDrive est un stockage et synchronisation de fichiers personnels ou scolaires dans le cloud et accessible √† partir de n‚Äôimporte quel emplacement sur n‚Äôimporte quel appareil. Id√©al pour le travail en cours et le partage avec des personnes sp√©cifiques. Les documents sont priv√©s jusqu‚Äô√† ce que vous les partagez. 1. Rep√©rer l‚Äôic√¥ne OneDrive Vous devriez voir l‚Äôic√¥ne de OneDrive (scolaire = en bleu) (personnel = en gris), sur la barre des t√¢ches, en bas √† droite de l‚Äô√©cran (pr√®s de l‚Äôhorloge).",
    "tags": [],
    "title": "OneDrive et gestion des fichiers et dossiers",
    "uri": "/semaine1/onedrive/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences¬†\u003e¬†\rPr√©sentation du cours et l'environnement de travail",
    "content": "1. Visual Studio Code (VS Code) Visual Studio Code est un √©diteur de code moderne, simple et tr√®s utilis√© pour programmer avec Python. Il vous permet aussi de bien organiser vos projets gr√¢ce √† une gestion intuitive des dossiers et fichiers.\nCe que vous pouvez faire avec VS Code : √âcrire et ex√©cuter du code Python Ouvrir et modifier des notebooks Jupyter (.ipynb) Voir tous les fichiers de votre projet dans un seul endroit Lire les erreurs et d√©boguer plus facilement Gestion des dossiers et fichiers Avant de commencer, assurez-vous d‚Äô√™tre connect√©s √† votre compte OneDrive du c√©gep.\nDans votre OneDrive, cr√©ez un dossier pour le cours d‚Äôaujourd‚Äôhui (par exemple : python-cours1) dans l‚ÄôExplorateur Windows.\nOuvrez VS Code Ouvrez le dossier python-cours1 dans VS Code : S√©lectionnez le dossier\nDans VS Code, dans le panneau √† gauche, vous pouvez : Ajouter un nouveau fichier Cr√©er un nouveau fichier nomm√© intro-python.ipynb en tapant le nom complet, suivi de la touche Enter.\nCr√©er un sous-dossier Cr√©er un nouveau dossier nomm√© exercices en tapant le nom complet, suivi de la touche Enter.\nPour supprimer ou renommer des fichiers ou des dossiers, simplement faites un clic-droit sur le nom du fichier ou dossier, puis choisissez l‚Äôoption souhait√©e. Supprimez le fichier nomm√© intro-python.ipynb.\nLes fichiers .py (scripts Python) et .ipynb (notebooks) seront tous visibles ici. Notez que\rDans ce cours nous utiliserons uniquement des fichiers .ipynb(iPython NoteBook)\n2. Jupyter Notebook Jupyter Notebook vous permet d‚Äô√©crire du texte et du code Python dans un m√™me document. C‚Äôest un outil id√©al pour exp√©rimenter, visualiser des donn√©es et commenter vos r√©sultats.\nPourquoi l‚Äôutiliser ? On peut √©crire du code Python et l‚Äôex√©cuter cellule par cellule. On peut ins√©rer des explications ou des titres entre les blocs de code. Tr√®s pratique pour les calculs scientifiques, les graphiques et les analyses de donn√©es. Comment l‚Äôutiliser dans VS Code √Ä partir de Moodle (Section Semaine 1), t√©l√©chargez le fichier introduction.ipynb. Par d√©faut, le fichier se trouvera dans le dossier T√©l√©chargement.\nVia l‚ÄôExplorateur de fichiers, d√©placer (Glisser-D√©poser) le fichier introduction.ipynb du dossier T√©l√©chargement vers le dossier Exercices Revenez dans VS Code, assurez-vous de voir le fichier introduction_pyton.ipynb dans le dossier exercices. Une fois ouvert, √† droite, vous verrez des cellules :\nCertaines celules servent √† √©crire du texte explicatif (format Markdown) D‚Äôautres servent √† √©crire du code Python Cliquez sur ‚ñ∂ pour ex√©cuter une cellule Bonnes pratiques Organisez bien vos projets : Utilisez un dossier par th√®me ou par semaine Nommez vos fichiers clairement : calcul_masse.ipynb, analyse_temp.ipynb La sauvegarde automatique ou sauvegardez r√©guli√®rement Si un rond blanc est pr√©sent √† droit du nom du fichier dans l‚Äôonglet, c‚Äôest parce qu‚Äôil n‚Äôest PAS sauvegard√© (comme dans l‚Äôexemple ci-dessous).\nPour activer la sauvegarde automatique, cliquez l‚Äôonglet Fichier, puis cliquez sur Enregistrement automatique.\nVous devriez maintenant voir un crochet √† gauche de cette option.\nPour ce fichier, VS Code d√©tectera les modifications et fera la sauvegarde automatiquement, mais vous pouvez √† tout moment appuyer sur Ctrl + S pour forcer la sauvegarde Il devrait maintenant avoir un X √† gauche du nom du fichier dans l‚Äôonglet du haut. Ce qui signifie que le fichier est sauvegard√©.\nFermez les notebooks proprement En haut √† droite du nom d‚Äôun notebook, cliquez sur X pour fermer le fichier Pause 5 minutes",
    "description": "1. Visual Studio Code (VS Code) Visual Studio Code est un √©diteur de code moderne, simple et tr√®s utilis√© pour programmer avec Python. Il vous permet aussi de bien organiser vos projets gr√¢ce √† une gestion intuitive des dossiers et fichiers.\nCe que vous pouvez faire avec VS Code : √âcrire et ex√©cuter du code Python Ouvrir et modifier des notebooks Jupyter (.ipynb) Voir tous les fichiers de votre projet dans un seul endroit Lire les erreurs et d√©boguer plus facilement Gestion des dossiers et fichiers Avant de commencer, assurez-vous d‚Äô√™tre connect√©s √† votre compte OneDrive du c√©gep.",
    "tags": [],
    "title": "Visual Studio Code et Jupyter Notebook",
    "uri": "/semaine1/vscodejupyter/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences",
    "content": "Se connecter √† OneDrive Fichiers et r√©pertoires/dossiers Utiliser Visual Studio Code (VS Code) Sauvegarde dans VS Code D√©boguer dans VS Code Utiliser un bloc-note Jupyter Astuces et touches sp√©ciales Markdown pour les rapports",
    "description": "Se connecter √† OneDrive Fichiers et r√©pertoires/dossiers Utiliser Visual Studio Code (VS Code) Sauvegarde dans VS Code D√©boguer dans VS Code Utiliser un bloc-note Jupyter Astuces et touches sp√©ciales Markdown pour les rapports",
    "tags": [],
    "title": "Outils de d√©veloppement",
    "uri": "/outils_dev/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences¬†\u003e¬†\rIntroduction √† Python (Variables, types et expressions)",
    "content": "Copier les exercices qui utilisent input pour les mettre dans l‚Äôatelier de la semaine 3 Remanier les exercices pour enlever la saisie au clavier\nObjectifs Manipuler des variables. Utiliser des types de donn√©es diff√©rents. Afficher des r√©sultats. Exercice 1 : Conversion de temp√©rature Un thermom√®tre donne des relev√©s en Fahrenheit, mais vous devez les convertir en Celsius et Kelvin.\nUtiliser une variable pour stockez une temp√©rature en ¬∞C. Convertissez cette temp√©rature en ¬∞F et en K. Affichez les trois valeurs avec des messages clairs. Formules :\n$ ¬∞F = (¬∞C √ó 9/5) + 32 $ $ K = ¬∞C + 273.15 $\rExercice 2 : La loi d‚ÄôOhm Un technicien de laboratoire vous demande d‚Äô√©crire un programme Python pour calculer la tension (U) en volts selon la loi d‚ÄôOhm. Il voudrait pouvoir entrer la valeur de la r√©sistance (en ohms) et la valeur du courant (en amp√®res), puis obtenir la tension.\nLoi d‚ÄôOhm : $ U = R √ó I $\rLe programme demande √† l‚Äôutilisateur d‚Äôentrer la valeur de la r√©sistance (en ohms) Le programme demande √† l‚Äôutilisateur d‚Äôentrer la valeur du courant (en amp√®res) Calculer et afficher la tension √† l‚Äôaide d‚Äôune phrase. Ajouter des explications en commentaire dans le code. R√©sultat attendu :\nEntrer la r√©sistance en ohms : 10\rEntrer le courant en amp√®res : 2\rLa tension est de 20.0 V\rExercice 3 : Calcul de concentration molaire Un technicien pr√©pare une solution en dissolvant une masse donn√©e de solut√© dans un certain volume de solvant. √âcrire un programme qui calcule la concentration molaire (mol/L) selon la formule :\n$ C = n / V $ o√π $ n = m / M $\rm : masse du solut√© (en grammes) M : masse molaire du solut√© (en g/mol) V : volume de la solution (en litres) Exemple d‚Äôutilisation : Entrer la masse, la masse molaire, et le volume. Le programme retourne la concentration.\nExercice 4 : Vitesse moyenne d‚Äôune r√©action Lors d‚Äôune exp√©rience de cin√©tique chimique, on mesure la variation de la concentration d‚Äôun r√©actif au cours du temps. √âcrire un programme qui calcule la vitesse moyenne de disparition selon :\n$ v = \\frac{\\Delta [A]}{\\Delta t} $\ro√π [A] est la concentration du r√©actif.\nExemple : [R√©actif A] passe de 0.80 mol/L √† 0.20 mol/L en 120 secondes. Calculer la vitesse moyenne.",
    "description": "Copier les exercices qui utilisent input pour les mettre dans l‚Äôatelier de la semaine 3 Remanier les exercices pour enlever la saisie au clavier\nObjectifs Manipuler des variables. Utiliser des types de donn√©es diff√©rents. Afficher des r√©sultats. Exercice 1 : Conversion de temp√©rature Un thermom√®tre donne des relev√©s en Fahrenheit, mais vous devez les convertir en Celsius et Kelvin.\nUtiliser une variable pour stockez une temp√©rature en ¬∞C. Convertissez cette temp√©rature en ¬∞F et en K.",
    "tags": [],
    "title": "Atelier 2",
    "uri": "/semaine2/atelier/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences¬†\u003e¬†\rOutils de d√©veloppement",
    "content": "√âtape 1 ‚Äì Acc√©der √† la page de connexion Aller √† l‚Äôadresse suivante : https://login.microsoftonline.com/?whr=cmontmorency.qc.ca\n√âtape 2 ‚Äì Entrer les identifiants Nom d‚Äôutilisateur : Le m√™me que pour se connecter sur les ordinateurs du Coll√®ge, suivi de @cmontmorency.qc.ca.\nil s‚Äôagit des 7 derniers chiffres du num√©ro de DA.\nMot de passe : Le m√™me que pour le Wi-Fi ou les ordinateurs du Coll√®ge.\nLe mot de passe initial se trouve dans Col.NET ‚Üí Dossier personnel ‚Üí Autres informations Aucun mot de passe affich√© ? Votre compte n‚Äôest peut-√™tre pas encore cr√©√©. R√©essayez plus tard. Connexion √©chou√©e ? R√©essayez dans quelques heures. Si le probl√®me dure plus de 48h, faites une demande sur le portail de service.\n√âtape 3 ‚Äì S√©curisation du compte (MFA) Cliquer sur Suivant lorsqu‚Äôun message s‚Äôaffiche disant : ¬´ S√©curisons votre compte ¬ª.\nPour configurer l‚Äôauthentification multifacteur (MFA) avec un t√©l√©phone :\nCliquer sur ¬´ Je veux configurer une autre m√©thode ¬ª Suivre l‚Äô√©tape 7 ci-dessous √âtape 4 ‚Äì Installer Microsoft Authenticator Sur votre t√©l√©phone, installez l‚Äôapplication : Microsoft Authenticator (disponible dans le Play Store ou App Store)\nCliquez sur Suivant deux fois sur l‚Äôordinateur.\nSur la page qui affiche un code QR :\nOuvrir l‚Äôapplication sur votre t√©l√©phone Appuyer sur le + Choisir Compte professionnel ou scolaire Choisir Analyser le code QR Num√©riser le code QR affich√© √† l‚Äô√©cran de votre ordinateur Votre compte s‚Äôaffiche dans l‚Äôapplication.\nSur l‚Äôordinateur, cliquer sur Suivant\nDeux chiffres apparaissent √† l‚Äô√©cran :\nEntrez-les sur votre t√©l√©phone Cliquer sur Suivant, puis Termin√©\n√âtape 5 ‚Äì Mise √† jour du mot de passe (si demand√©) Si un message indique : ¬´ Mettre √† jour votre mot de passe ¬ª, suivez les crit√®res suivants :\n12 caract√®res minimum\nInclure au moins 3 des √©l√©ments suivants :\nMinuscules (a-z) Majuscules (A-Z) Chiffres (0-9) Caract√®res sp√©ciaux (√©viter les lettres accentu√©es comme √©, √®, √ß, etc.) Ne pas inclure votre pr√©nom, nom ou code utilisateur\nUtiliser un mot de passe unique que vous n‚Äôutilisez pas ailleurs\n√âtape 6 ‚Äì Associer son num√©ro de t√©l√©phone (facultatif) Non recommand√©, car :\nRisque de frais selon votre forfait Processus long si vous changez d‚Äôappareil ou de num√©ro Moins fiable √† l‚Äô√©tranger Si vous souhaitez quand m√™me l‚Äôajouter :\nAller √† : https://mysignins.microsoft.com/security-info Cliquer sur + Ajouter une m√©thode de connexion Choisir T√©l√©phone ‚Üí Ajouter S√©lectionner Canada (+1), entrer votre num√©ro, puis cliquer sur Suivant Entrer le code SMS re√ßu Votre t√©l√©phone est maintenant associ√©.",
    "description": "√âtape 1 ‚Äì Acc√©der √† la page de connexion Aller √† l‚Äôadresse suivante : https://login.microsoftonline.com/?whr=cmontmorency.qc.ca\n√âtape 2 ‚Äì Entrer les identifiants Nom d‚Äôutilisateur : Le m√™me que pour se connecter sur les ordinateurs du Coll√®ge, suivi de @cmontmorency.qc.ca.\nil s‚Äôagit des 7 derniers chiffres du num√©ro de DA.\nMot de passe : Le m√™me que pour le Wi-Fi ou les ordinateurs du Coll√®ge.\nLe mot de passe initial se trouve dans Col.",
    "tags": [],
    "title": "Connexion √† OneDrive ‚Äì Compte scolaire",
    "uri": "/outils_dev/onedrive/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences¬†\u003e¬†\rOutils de d√©veloppement",
    "content": "Qu‚Äôest-ce qu‚Äôun fichier et un dossier ? Fichier : Un document ou un programme (ex. : texte, image, tableur). Exemples : rapport.docx, photo.jpg, budget.xlsx\nDossier (ou r√©pertoire) : Contenant qui regroupe des fichiers et d‚Äôautres dossiers. Exemple : le dossier Documents contient des fichiers Word, PDF, etc.\nL‚Äôexplorateur de fichiers Ouvrir l‚Äôexplorateur : Raccourci clavier : Windows + E Ou clique sur l‚Äôic√¥ne üìÅ dans la barre des t√¢ches Principales zones : Volet de navigation √† gauche : acc√®s rapide √† Ce PC, T√©l√©chargements, Documents, etc. Zone principale : affiche le contenu du dossier s√©lectionn√© Barre d‚Äôadresse : montre le chemin du dossier actuel (ex. : Ce PC \u003e Documents \u003e Travaux) Barre d‚Äôoutils : bouton pour cr√©er, renommer, copier, coller, supprimer‚Ä¶ Cr√©er et organiser ses fichiers Cr√©er un dossier : Clique droit dans un espace vide S√©lectionne Nouveau \u003e Dossier Nomme le dossier (ex. : Projet Science) Renommer un fichier ou dossier : Clique droit \u003e Renommer Ou clique lentement deux fois sur le nom D√©placer un fichier : Glisser-d√©poser vers un autre dossier Ou : Copier (Ctrl + C) \u003e Coller (Ctrl + V) dans l‚Äôautre dossier Ou : Couper (Ctrl + X) \u003e Coller (Ctrl + V) pour le d√©placer Supprimer : S√©lectionner l‚Äô√©l√©ment \u003e touche Suppr Ou clic droit \u003e Supprimer Chemin d‚Äôacc√®s Un chemin indique l‚Äôemplacement d‚Äôun fichier.\nExemple :\nC:\\Utilisateurs\\Nathalie\\Documents\\Projet\\rapport.docx\rC: ‚Üí Disque dur principal Utilisateurs\\Nathalie ‚Üí ton profil Documents\\Projet ‚Üí dossiers imbriqu√©s rapport.docx ‚Üí fichier Extensions de fichiers L‚Äôextension indique le type de fichier. (ex. .docx, .jpg, .pdf, .xlsx, .mp3, etc.)\nPar d√©faut, Windows cache les extensions. Pour les voir :\nOuvre un dossier Clique sur Affichage \u003e Afficher \u003e Extensions de noms de fichiers Bonnes pratiques Nomme les fichiers de mani√®re claire (ex. : rapport_bio_2025.docx) Organise ton travail par sujets ou projets dans des dossiers Sauvegarde tes fichiers importants dans OneDrive ou sur une cl√© USB √âvite les accents et espaces dans les noms de fichiers si tu veux les utiliser dans des programmes (ex. : travaux_chimie au lieu de travaux chimie)",
    "description": "Qu‚Äôest-ce qu‚Äôun fichier et un dossier ? Fichier : Un document ou un programme (ex. : texte, image, tableur). Exemples : rapport.docx, photo.jpg, budget.xlsx\nDossier (ou r√©pertoire) : Contenant qui regroupe des fichiers et d‚Äôautres dossiers. Exemple : le dossier Documents contient des fichiers Word, PDF, etc.\nL‚Äôexplorateur de fichiers Ouvrir l‚Äôexplorateur : Raccourci clavier : Windows + E Ou clique sur l‚Äôic√¥ne üìÅ dans la barre des t√¢ches Principales zones : Volet de navigation √† gauche : acc√®s rapide √† Ce PC, T√©l√©chargements, Documents, etc.",
    "tags": [],
    "title": "Fichiers et r√©pertoires (dossiers)",
    "uri": "/outils_dev/fichiers_dossiers/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences¬†\u003e¬†\rOutils de d√©veloppement",
    "content": "Installation \u0026 premier lancement √âtapes : Aller sur le site officiel : https://code.visualstudio.com Cliquer sur Download for Windows Lancer le fichier t√©l√©charg√© (VSCodeSetup.exe) Accepter les conditions ‚Üí clique sur Suivant plusieurs fois Cocher ‚ÄúAdd to PATH‚Äù si disponible Cliquer sur Installer Lorsque l‚Äôinstallation est termin√©e, cliquer sur le raccourci Visual Studio Code dans le menu D√©marrer ou cherche ‚ÄúVisual Studio Code‚Äù dans la barre de recherche Tu devrais voir l‚Äô√©cran d‚Äôaccueil (Bienvenue ou Welcome)\nInterface principale Barre d‚Äôactivit√© (gauche) : acc√®s √† l‚Äôexplorateur, extensions, etc. Volet Explorateur : tes fichiers/sous-dossiers. √âditeur : l√† o√π tu √©cris ton code. Barre d‚Äôonglets : navigation entre fichiers ouverts. Terminal int√©gr√© (en bas, pas visible sur l‚Äôimage). Barre d‚Äô√©tat : info sur format du fichier, erreurs, etc. Lettre Nom anglais En fran√ßais A Activity Bar Barre d‚Äôactivit√©s B Primary Side Bar Volet lat√©ral principal C Editor Groups Groupes d‚Äô√©diteurs D Panel Panneau E Status Bar Barre d‚Äô√©tat Barre d‚Äôactivit√© La barre d‚Äôactivit√© situ√©e √† gauche de l‚Äô√©diteur, est une zone essentielle de l‚Äôinterface utilisateur. Elle donne acc√®s √† plusieurs vues et fonctionnalit√©s importantes. Elle contient les boutons suivants :\nLe bouton Explorateur (Explorer) vous donne acc√®s au panneau Explorateur, o√π vos fichiers appara√Ætront lorsque vous ouvrirez un dossier. Le bouton Recherche (Search) ouvre le panneau Recherche, o√π vous pouvez rechercher du texte dans les fichiers d‚Äôun dossier ouvert. Le bouton Contr√¥le de code source (Source Control) ouvre le panneau Contr√¥le de code source, o√π vous pouvez suivre les modifications apport√©es √† vos fichiers √† l‚Äôaide de Git. Le bouton Ex√©cuter et d√©boguer (Run and Debug) vous donne acc√®s au d√©bogueur VS Code. Le bouton Extensions ouvre un panneau o√π l‚Äôon peut installer et g√©rer les extensions de VS Code. Les extensions sont des modules qui ajoutent des fonctionnalit√©s √† VS Code. En fonction des extensions que vous avez install√©es, la barre d‚Äôactivit√© peut inclure d‚Äôautres ic√¥nes.\nVid√©o YouTube: Interface de VS Code\nOuvrir ou cr√©er un projet Fichier ‚Üí Ouvrir un dossier‚Ä¶ (Ctrl+K Ctrl+O). Cr√©e ou s√©lectionne un dossier (ex. mon-projet), puis clique S√©lectionner un dossier. Le dossier s‚Äôaffiche dans l‚ÄôExplorateur, pr√™t √† √™tre utilis√© . Cr√©er \u0026 √©diter des fichiers Clique droit sur le volet Explorateur ‚Üí Nouveau fichier ‚Üí nomme-le (projet.ipynb, script.py, etc.). Le voici ouvert dans l‚Äô√©diteur. Les captures montrent l‚Äô√©diteur avec du code actif ([4]). Installation des outils Pour ceux qui ont un syst√®me d‚Äôexploitation Windows, voici deux fichiers ex√©cutables qui installeront automatiquement VS Code, Python et toutes les librairies n√©cessaires :\nPremi√®re √©tape Deuxi√®me √©tape Pour une installation manuelle : voici les liens utiles pour installer les outils de d√©veloppement (sur votre ordinateur personnel):\nT√©l√©charger et installer Python : Python T√©l√©charger et installer Visual Studio Code : Visual Studio Code - Mac, Linux, Windows Les extensions et biblioth√®ques √† installer dans VS Code: Python, Run, Pandas, Numpy, Matplotlib, SciPy Tutoriel pour installer des extensions sur VS Code Installer Jupyter Notebook sur Visual Studio Code (en anglais) : How to Install Jupyter Notebook in VSCode | Jupyter Notebook in Visual Studio Code (Easy) Extensions utiles Python (Microsoft) : ex√©cution et d√©bogage. Jupyter : bloc-notes Jupyter. NumPy : Fonctions math√©matiques statistiques. Matplotlib : Graphiques. SciPy : Fonctions scientifiques et graphiques (ex: droite de r√©gression lin√©aire) Pandas : Traitement de fichiers CSV (extraction et nettoyage des donn√©es) Astuces clavier \u0026 productivit√© Glisser-d√©poser fichiers pour les ouvrir. Commenter : Ctrl+/. Aller √† une ligne : Ctrl+G. Formatage : Ctrl+K Ctrl+F. Renommer symboles : F2. IntelliSense : suggestions automatiques avec Ctrl+Space R√©f√©rences Tutorial: Get started with Visual Studio Code Interface de VS Code Getting started with Visual Studio Code My first VS Code Extension Trucs \u0026 Astuces ===========================\nD√©couverte de l‚Äôinterface √âl√©ment Description Barre lat√©rale Explorer, Rechercher, Contr√¥le Git, Extensions Onglet ‚ÄúExplorer‚Äù Voir et ouvrir fichiers/dossiers Zone centrale √âditeur de texte Barre du haut Onglets des fichiers ouverts Terminal int√©gr√© Acc√®s direct √† la ligne de commande Ouvrir ou cr√©er un fichier ou dossier Ouvrir un dossier : Menu Fichier \u003e Ouvrir un dossier Choisis le dossier de ton projet Cr√©er un fichier : Clique droit dans le panneau Explorer \u003e Nouveau fichier Exemple : script.py ou index.html Configurer VS Code pour Python Installer Python Va sur https://python.org \u003e T√©l√©charge et installe Python Coche ‚ÄúAdd Python to PATH‚Äù avant de cliquer sur ‚ÄúInstall Now‚Äù Installer l‚Äôextension Python Dans VS Code, clique sur Extensions (ic√¥ne des blocs) ou Ctrl+Shift+X Recherche Python Clique sur Installer (√©diteur : Microsoft) Ex√©cuter du code Pour un script Python : Ouvre script.py Clique sur le bouton Run ‚ñ∂Ô∏è en haut √† droite Ou utilise le raccourci Ctrl + F5 Utiliser le terminal int√©gr√© Menu : Terminal \u003e Nouveau terminal Tu peux ex√©cuter des commandes comme : python script.py\rou\ndir\r(sous Windows)\nExtensions utiles Extension Pour quoi faire ? Python (Microsoft) Ex√©cuter et d√©boguer du code Python Jupyter Ouvrir des notebooks .ipynb Live Server Voir tes pages HTML en direct Prettier Formater ton code GitLens Suivre les modifications dans Git Personnaliser l‚Äôapparence Menu : Fichier \u003e Pr√©f√©rences \u003e Th√®me de couleur Essaie ‚ÄúDark+‚Äù, ‚ÄúLight‚Äù, ou installe de nouveaux th√®mes dans les extensions Astuces pour d√©butants Tu peux glisser-d√©poser des fichiers dans VS Code pour les ouvrir Le raccourci Ctrl + / commente/d√©commente une ligne Sauvegarde souvent avec Ctrl + S Utilise Ctrl + P pour ouvrir rapidement un fichier dans ton projet",
    "description": "Installation \u0026 premier lancement √âtapes : Aller sur le site officiel : https://code.visualstudio.com Cliquer sur Download for Windows Lancer le fichier t√©l√©charg√© (VSCodeSetup.exe) Accepter les conditions ‚Üí clique sur Suivant plusieurs fois Cocher ‚ÄúAdd to PATH‚Äù si disponible Cliquer sur Installer Lorsque l‚Äôinstallation est termin√©e, cliquer sur le raccourci Visual Studio Code dans le menu D√©marrer ou cherche ‚ÄúVisual Studio Code‚Äù dans la barre de recherche Tu devrais voir l‚Äô√©cran d‚Äôaccueil (Bienvenue ou Welcome)",
    "tags": [],
    "title": " ",
    "uri": "/outils_dev/vs-code/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences¬†\u003e¬†\rOutils de d√©veloppement¬†\u003e¬†",
    "content": "Extensions de d√©bogage VS Code prend en charge le d√©bogage pour Node.js et peut d√©boguer JavaScript, TypeScript, et d‚Äôautres langages compil√©s en JavaScript. Pour d‚Äôautres langages et environnements d‚Äôex√©cution, il existe des extensions de d√©bogage dans le Marketplace de VS Code.\nPar exemple pour Python:\nLe d√©bogueur est un outil utile qui vous permet d‚Äôinspecter le flux d‚Äôex√©cution de votre code et d‚Äôidentifier plus facilement les erreurs, ainsi que d‚Äôexplorer comment vos variables et donn√©es changent au fur et √† mesure que votre programme s‚Äôex√©cute.\nVous pouvez commencer le d√©bogage en d√©finissant un point d‚Äôarr√™t dans votre projet Python en cliquant dans la marge √† c√¥t√© de la ligne que vous souhaitez inspecter.\nLes points d‚Äôarr√™t D√©finition\rUn point d‚Äôarr√™t est un marqueur que vous placez dans votre code pour indiquer au d√©bogueur o√π arr√™ter l‚Äôex√©cution du programme. Cela vous permet d‚Äôinspecter l‚Äô√©tat de votre application √† ce moment pr√©cis, de v√©rifier les valeurs des variables et de suivre le flux d‚Äôex√©cution du code.\nAjout de points d‚Äôarr√™t Cliquez dans la marge gauche √† c√¥t√© d‚Äôune ligne de code. Vous pouvez √©galement s√©lectionner la ligne et appuyer sur F9, s√©lectionner D√©boguer \u003e Basculer le point d'arr√™t, ou faire un clic droit et s√©lectionner Point d'arr√™t \u003e Ins√©rer un point d'arr√™t.\nLe point d‚Äôarr√™t appara√Æt sous forme de point rouge dans la marge gauche.\nLorsque vous d√©boguez, une fois que votre programme atteint le point d‚Äôarr√™t, l‚Äôex√©cution s‚Äôarr√™te au point d‚Äôarr√™t, avant que le code sur cette ligne ne soit ex√©cut√©. Vous pourrait alors suivre les donn√©es dans la console de d√©bogage Python, et de progresser dans votre programme en utilisant la barre d‚Äôoutils de d√©bogage.\nVoici quelques instructions g√©n√©rales pour travailler avec les points d‚Äôarr√™t.\nLe point d‚Äôarr√™t est un bascule. Vous pouvez cliquer dessus, appuyer sur F9, ou utiliser D√©boguer \u003e Basculer le point d'arr√™t pour le supprimer ou le r√©ins√©rer. Pour d√©sactiver un point d‚Äôarr√™t sans le supprimer, survolez-le ou faites un clic droit dessus, et s√©lectionnez D√©sactiver le point d'arr√™t. Les points d‚Äôarr√™t d√©sactiv√©s apparaissent sous forme de points vides dans la marge gauche ou la fen√™tre des points d‚Äôarr√™t. Pour r√©activer un point d‚Äôarr√™t, survolez-le ou faites un clic droit dessus, et s√©lectionnez Activer le point d'arr√™t. Interface utilisateur du d√©bogueur Vue Ex√©cuter et D√©boguer : Affiche toutes les informations li√©es √† l‚Äôex√©cution et au d√©bogage. Barre d‚Äôoutils de d√©bogage : Contient des boutons pour les actions de d√©bogage courantes. Console de d√©bogage : Permet de voir et d‚Äôinteragir avec la sortie de votre code en cours d‚Äôex√©cution. Barre lat√©rale de d√©bogage : Permet d‚Äôinteragir avec la pile d‚Äôappels, les points d‚Äôarr√™t, les variables et les variables surveill√©es. D√©marrer le d√©bogage Pour commencer le d√©bogage, initialisez le d√©bogueur en appuyant sur F5. Comme c‚Äôest la premi√®re fois que vous d√©boguez ce fichier, un menu de configuration s‚Äôouvrira, vous permettant de s√©lectionner le type d‚Äôapplication que vous souhaitez d√©boguer. S‚Äôil s‚Äôagit d‚Äôun script Python, vous pouvez s√©lectionner Fichier Python ou Bloc-notes Jupyter.\nVue Ex√©cuter et D√©boguer : S√©lectionnez l‚Äôic√¥ne Ex√©cuter et D√©boguer dans la barre d‚Äôactivit√© ou utilisez le raccourci clavier ‚áß‚åòD (Windows, Linux Ctrl+Shift+D).\nActions de d√©bogage Une fois qu‚Äôune session de d√©bogage commence, la barre d‚Äôoutils de d√©bogage appara√Ætra en haut de l‚Äô√©diteur.\nbarre menu\nAction Raccourci Explication Continue / Pause F5 Continue : Reprendre l‚Äôex√©cution normale du programme/script (jusqu‚Äôau prochain point d‚Äôarr√™t).\nPause : Inspecter le code en cours d‚Äôex√©cution √† la ligne actuelle et d√©boguer ligne par ligne. Step Over F10 Ex√©cuter la m√©thode suivante comme une seule commande sans inspecter ou suivre ses √©tapes internes. Step Into F11 Entrer dans la m√©thode suivante pour suivre son ex√©cution ligne par ligne. Step Out Shift+F11 Lorsqu‚Äôon est dans une m√©thode ou une sous-routine, revenir au contexte d‚Äôex√©cution pr√©c√©dent en ex√©cutant les lignes restantes de la m√©thode actuelle comme une seule commande. Restart Ctrl+Shift+F5 Terminer l‚Äôex√©cution actuelle du programme et recommencer le d√©bogage en utilisant la configuration de lancement actuelle. Stop Shift+F5 Terminer l‚Äôex√©cution actuelle du programme. R√©f√©rences Deboguer dans VS Code\nDeboguer du Python dans VS Code\nGuide de d√©marrage rapide pour Python dans VS Code",
    "description": "Extensions de d√©bogage VS Code prend en charge le d√©bogage pour Node.js et peut d√©boguer JavaScript, TypeScript, et d‚Äôautres langages compil√©s en JavaScript. Pour d‚Äôautres langages et environnements d‚Äôex√©cution, il existe des extensions de d√©bogage dans le Marketplace de VS Code.\nPar exemple pour Python:\nLe d√©bogueur est un outil utile qui vous permet d‚Äôinspecter le flux d‚Äôex√©cution de votre code et d‚Äôidentifier plus facilement les erreurs, ainsi que d‚Äôexplorer comment vos variables et donn√©es changent au fur et √† mesure que votre programme s‚Äôex√©cute.",
    "tags": [],
    "title": "D√©boguer dans VS Code",
    "uri": "/outils_dev/vs-code/debogueur/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences¬†\u003e¬†\rOutils de d√©veloppement¬†\u003e¬†",
    "content": "Sur cette page, vous trouverez les √©tapes pour sauvegarder vos programmes dans VS Code.\nSauvegarde automatique Si un rond est pr√©sent √† droit du nom du fichier dans l‚Äôonglet en haut, c‚Äôest que votre travail n‚Äôest PAS sauvegard√© (comme dans l‚Äôexemple ci-dessous).\nPour ACTIVER la sauvegarde automatique, allez dans fichier, puis cliquez sur Enregistrement automatique.\nVous devriez maintenant voir un crochet √† gauche de cette option.\nIl devrait maintenant avoir un X √† gauche du nom du fichier dans l‚Äôonglet du haut. Ce qui signifie que le fichier est sauvegard√©.\nEnregistrer sous Lorsque vous ouvrez un fichier que vous avez t√©l√©charg√© (de la page du cours), vous pouvez l‚Äôenregistrer sous afin qu‚Äôil se sauvegarde au bon endroit. Par exemple dans votre One Drive du coll√®ge.\nS√©lectionnez Fichier, puis enregistrer sous.\nAssurez de choisir le bon dossier (exemple: OneDrive\\420-SN1-RE\\semaine_2). Vous pouvez renommer le fichier si vous le d√©sirez. Ensuite, appuyez sur Enregistrer.\nOuvrir le dossier Dans le panneau de gauche, s√©lectionnez Ouvrir le dossier. L‚Äôoption Ouvrir le dossier est aussi dans l‚Äôonlget Fichier.\nS√©lectionnez le dossier dans lequel vous voulez travailler.\nDans le panneau de gauche, vous devriez avoir tous les dossiers et fichiers contenus dans le dossier que vous avez choisi.\nDans l‚Äôexemple ci-dessous, nous pouvons voir le fichier (programme.ipynb) qui a √©t√© sauvegard√© dans la semaine 3.",
    "description": "Sur cette page, vous trouverez les √©tapes pour sauvegarder vos programmes dans VS Code.\nSauvegarde automatique Si un rond est pr√©sent √† droit du nom du fichier dans l‚Äôonglet en haut, c‚Äôest que votre travail n‚Äôest PAS sauvegard√© (comme dans l‚Äôexemple ci-dessous).\nPour ACTIVER la sauvegarde automatique, allez dans fichier, puis cliquez sur Enregistrement automatique.\nVous devriez maintenant voir un crochet √† gauche de cette option.\nIl devrait maintenant avoir un X √† gauche du nom du fichier dans l‚Äôonglet du haut.",
    "tags": [],
    "title": "Sauvegarde dans VS Code",
    "uri": "/outils_dev/vs-code/sauvegarde/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences¬†\u003e¬†\rOutils de d√©veloppement",
    "content": "Tutoriel pour VS Code et Jupyter Notebook Voici un fichier qui vous expliquera comment utiliser jupyter notebook dans VS Code : Tutoriel pour utiliser Jupyter avec VS Code\nBlocs-notes Jupyter dans VS Code Jupyter (anciennement IPython Notebook) est un projet open source qui vous permet de combiner facilement du texte Markdown et du code source Python ex√©cutable sur un canevas appel√© notebook.\nVisual Studio Code prend en charge l‚Äôutilisation des blocs-notes Jupyter en mode natif et via des fichiers de code Python.\nCr√©er, ouvrir et enregistrer des blocs-notes Jupyter Utiliser des cellules de code Jupyter Afficher, inspecter et filtrer les variables √† l‚Äôaide de l‚ÄôExplorateur de variables et de la visionneuse de donn√©es Se connecter √† un serveur Jupyter distant D√©boguer un bloc-notes Jupyter Configuration de votre environnement Pour utiliser Python dans Jupyter Notebooks, vous devez activer un environnement Anaconda dans VS Code ou un autre environnement Python dans lequel vous avez install√© le package Jupyter. Pour s√©lectionner un environnement, utilisez la commande Python : S√©lectionner un interpr√©teur dans la palette de commandes (Ctrl+Maj+P).\nUne fois l‚Äôenvironnement appropri√© activ√©, vous pouvez cr√©er et ouvrir un bloc-notes Jupyter, vous connecter √† un serveur Jupyter distant pour ex√©cuter des cellules de code et exporter un bloc-notes Jupyter sous forme de fichier Python.\nApprobation de l‚Äôespace de travail Lorsque vous commencez √† utiliser Jupyter Notebooks, vous devez vous assurer que vous travaillez dans un espace de travail approuv√©. Du code nuisible peut √™tre incorpor√© dans des blocs-notes et la fonctionnalit√© d‚Äôapprobation de l‚Äôespace de travail vous permet d‚Äôindiquer quels dossiers et leur contenu doivent autoriser ou restreindre l‚Äôex√©cution automatique de code.\nSi vous tentez d‚Äôouvrir un bloc-notes lorsque VS Code se trouve dans un espace de travail non approuv√© ex√©cutant le mode restreint, vous ne pourrez pas ex√©cuter de cellules et les sorties enrichies seront masqu√©es.\nCr√©er ou ouvrir un bloc-notes Jupyter Vous pouvez cr√©er un bloc-notes Jupyter en ex√©cutant la commande Cr√©er : un nouveau bloc-notes Jupyter √† partir de la palette de commandes (Ctrl+Maj+P) ou en cr√©ant un fichier dans votre espace de travail..ipynb\nEnsuite, s√©lectionnez un noyau √† l‚Äôaide du s√©lecteur de noyau en haut √† droite.\nApr√®s avoir s√©lectionn√© un noyau, le s√©lecteur de langue situ√© en bas √† droite de chaque cellule de code sera automatiquement mis √† jour vers la langue prise en charge par le noyau.\nSi vous disposez d‚Äôun bloc-notes Jupyter, vous pouvez l‚Äôouvrir en cliquant avec le bouton droit sur le fichier et en l‚Äôouvrant avec VS Code, ou via l‚Äôexplorateur de fichiers VS Code.\nCellules en cours d‚Äôex√©cution Ex√©cuter une seule cellule de code Une fois votre code ajout√©, vous pouvez ex√©cuter une cellule √† l‚Äôaide de l‚Äôic√¥ne Ex√©cuter √† gauche de la cellule et la sortie sera affich√©e sous la cellule de code.\nPour ex√©cuter une cellule de code s√©lectionn√©e, vous pouvez √©galement utiliser des raccourcis clavier en mode commande et en mode √©dition.\nCtrl+Entr√©e ex√©cute la cellule actuellement s√©lectionn√©e. Maj+Entr√©e ex√©cute la cellule actuellement s√©lectionn√©e et ins√®re une nouvelle cellule juste en dessous (le focus se d√©place vers la nouvelle cellule). Alt+Entr√©e ex√©cute la cellule actuellement s√©lectionn√©e et ins√®re une nouvelle cellule juste en dessous (le focus reste sur la cellule actuelle). Ex√©cuter plusieurs cellules de code L‚Äôex√©cution de plusieurs cellules de code peut √™tre accomplie de plusieurs fa√ßons. Vous pouvez utiliser la double fl√®che dans la barre d‚Äôoutils principale de l‚Äô√©diteur de bloc-notes pour ex√©cuter toutes les cellules du bloc-notes ou en s√©lectionnant Ex√©cuter tout, Ex√©cuter tout au-dessus ou Ex√©cuter tout en dessous au-dessus ou en dessous de la cellule de code actuelle.\nEx√©cuter des cellules dans la section Pour ex√©cuter plus facilement des cellules associ√©es dans un bloc-notes, vous pouvez ex√©cuter des cellules regroup√©es par un en-t√™te de section Markdown avec l‚Äôaction Ex√©cuter les cellules dans la section. Cette action est disponible dans la vue Plan du bloc-notes et pour les √©l√©ments Sticky Scroll.\nDans les √©l√©ments Sticky Scroll, cliquez avec le bouton droit sur l‚Äôen-t√™te de votre choix et ex√©cutez la section via l‚Äôaction dans le menu contextuel. Dans la vue Plan, s√©lectionnez l‚Äôic√¥ne de barre d‚Äôoutils qui appara√Æt au survol ou √† la s√©lection, puis ex√©cutez une seule cellule ou une section de cellules via les actions pr√©sent√©es.\nVid√©o: Ex√©cuter des cellules\nEnregistrez votre bloc-notes Jupyter Vous pouvez enregistrer votre bloc-notes Jupyter √† l‚Äôaide du raccourci clavier Ctrl+S ou Fichier \u003e enregistrer.\nExporter votre bloc-notes Jupyter Vous pouvez exporter un bloc-notes Jupyter sous forme de fichier Python, de fichier PDF ou de fichier HTML. Pour exporter, s√©lectionnez ... \u003e Exporter dans la barre d‚Äôoutils principale. Une liste d√©roulante d‚Äôoptions de format de fichier vous est alors pr√©sent√©e.\nNote: Pour l‚Äôexportation PDF, vous devez avoir install√© TeX (Installation Tex). Si vous ne le faites pas, vous serez averti que vous devez l‚Äôinstaller lorsque vous s√©lectionnerez l‚Äôoption PDF. Sachez √©galement que si vous avez une sortie SVG uniquement dans votre bloc-notes, elle ne sera pas affich√©e dans le PDF. Pour avoir des graphiques SVG dans un PDF, assurez-vous que votre sortie inclut un format d‚Äôimage non SVG, ou bien vous pouvez d‚Äôabord exporter au format HTML, puis enregistrer au format PDF √† l‚Äôaide de votre navigateur.\nUtiliser des cellules de code dans l‚Äô√©diteur de bloc-notes L‚Äô√©diteur de bloc-notes facilite la cr√©ation, la modification et l‚Äôex√©cution de cellules de code dans votre bloc-notes Jupyter.\nCr√©er une cellule de code Par d√©faut, un bloc-notes vierge aura une cellule de code vide pour commencer et un bloc-notes existant en placera une en bas. Ajoutez votre code √† la cellule de code vide pour commencer.\nModes de cellule de code Lorsque vous utilisez des cellules de code, une cellule peut √™tre dans trois √©tats : non s√©lectionn√©, mode commande et mode √©dition. Une barre verticale √† gauche d‚Äôune cellule de code et de la bordure de l‚Äô√©diteur indique l‚Äô√©tat actuel d‚Äôune cellule. Lorsqu‚Äôaucune barre n‚Äôest visible, la cellule est d√©s√©lectionn√©e. Lorsqu‚Äôune cellule est s√©lectionn√©e, elle peut √™tre en mode commande ou en mode √©dition.\nEn mode commande, une barre verticale pleine appara√Ætra √† gauche de la cellule. La cellule peut √™tre utilis√©e et accepte les commandes au clavier.\nEn mode √©dition, une barre verticale pleine est reli√©e par une bordure autour de l‚Äô√©diteur de cellules. Le contenu de la cellule (code ou Markdown) peut √™tre modifi√©.\nPour changer de mode, vous pouvez utiliser votre clavier ou votre souris. Sur votre clavier, appuyez sur la touche Entr√©e pour passer en mode √©dition ou sur la touche √âchap pour passer en mode commande. Avec votre souris, cliquez sur la barre verticale √† gauche de la cellule ou en dehors de la zone code/Markdown dans la cellule de code.\nAjouter des cellules de code suppl√©mentaires Vous pouvez ajouter des cellules de code √† l‚Äôaide de la barre d‚Äôoutils principale, de la barre d‚Äôoutils Ajouter une cellule (visible au survol) et des commandes clavier.\nPour ajouter une nouvelle cellule sous la cellule actuellement s√©lectionn√©e, utilisez l‚Äôic√¥ne plus dans la barre d‚Äôoutils principale ou la barre d‚Äôoutils de survol d‚Äôune cellule.\nLorsqu‚Äôune cellule de code est en mode commande, utilisez la touche A pour ajouter une cellule au-dessus et la touche B pour ajouter une cellule au-dessous de la cellule s√©lectionn√©e.\nS√©lectionnez une cellule de code Vous pouvez modifier une cellule de code s√©lectionn√©e √† l‚Äôaide de la souris ou des touches fl√©ch√©es haut/bas du clavier. Lorsqu‚Äôune cellule de code est en mode commande, vous pouvez √©galement utiliser la touche J (bas) et la touche K (haut).\nS√©lectionner plusieurs cellules de code Pour s√©lectionner plusieurs cellules, commencez par une cellule en mode s√©lectionn√©. Un arri√®re-plan rempli indique les cellules s√©lectionn√©es. Pour s√©lectionner des cellules cons√©cutives, maintenez la touche Maj enfonc√©e et cliquez sur la derni√®re cellule que vous souhaitez s√©lectionner. Pour s√©lectionner un groupe de cellules, maintenez la touche Ctrl enfonc√©e et cliquez sur les cellules que vous souhaitez ajouter √† votre s√©lection.\nD√©placer une cellule de code Vous pouvez d√©placer des cellules vers le haut ou vers le bas dans un bloc-notes par glisser-d√©poser. Pour les cellules de code, la zone de glisser-d√©poser se trouve √† gauche de l‚Äô√©diteur de cellule, comme indiqu√© ci-dessous. Pour les cellules Markdown rendues, vous pouvez cliquer n‚Äôimporte o√π pour faire glisser et d√©poser des cellules.\nPour d√©placer plusieurs cellules, vous pouvez utiliser les m√™mes zones de glisser-d√©poser dans n‚Äôimporte quelle cellule incluse dans la s√©lection.\nLe raccourci clavier Alt+Fl√®che d√©place √©galement une ou plusieurs cellules s√©lectionn√©es.\nSupprimer une cellule de code Pour supprimer du code, vous pouvez utiliser l‚Äôic√¥ne Supprimer dans la barre d‚Äôoutils de la cellule de code. Lorsque la cellule de code s√©lectionn√©e est en mode commande, vous pouvez utiliser le raccourci clavier dd.\nAnnuler votre derni√®re modification Vous pouvez utiliser la touche z pour annuler votre modification pr√©c√©dente, par exemple, si vous avez effectu√© une modification accidentelle, vous pouvez l‚Äôannuler √† l‚Äô√©tat correct pr√©c√©dent, ou si vous avez supprim√© une cellule accidentellement, vous pouvez la r√©cup√©rer.\nBasculer entre le code et Markdown L‚Äô√©diteur de bloc-notes vous permet de modifier facilement les cellules de code entre Markdown et le code. La s√©lection du s√©lecteur de langue en bas √† droite d‚Äôune cellule vous permettra de basculer entre Markdown et, le cas √©ch√©ant, toute autre langue prise en charge par le noyau s√©lectionn√©.\nVous pouvez √©galement utiliser le clavier pour modifier le type de cellule. Lorsqu‚Äôune cellule est s√©lectionn√©e et en mode commande, la touche M bascule le type de cellule sur Markdown et la touche Y bascule le type de cellule sur code.\nUne fois Markdown d√©fini, vous pouvez entrer du contenu au format Markdown dans la cellule de code.\nPour afficher des cellules Markdown, vous pouvez cocher la barre d‚Äôoutils de la cellule ou utiliser les raccourcis clavier Ctrl+Entr√©e et Maj+Entr√©e.\nEffacer la sortie ou red√©marrer/interrompre le noyau Si vous souhaitez effacer toutes les sorties de cellule de code ou red√©marrer/interrompre le noyau, vous pouvez le faire √† l‚Äôaide de la barre d‚Äôoutils principale de l‚Äô√©diteur de bloc-notes.\nActiver/d√©sactiver les num√©ros de ligne Lorsque vous √™tes en mode commande, vous pouvez activer ou d√©sactiver la num√©rotation des lignes dans une seule cellule de code √† l‚Äôaide de la touche L.\nPour basculer la num√©rotation des lignes pour l‚Äôensemble du bloc-notes, utilisez Maj+L en mode commande sur n‚Äôimporte quelle cellule.\nTable des mati√®res Pour naviguer dans votre bloc-notes, ouvrez l‚ÄôExplorateur de fichiers dans la barre d‚Äôactivit√©. Ouvrez ensuite l‚Äôonglet Plan dans la barre lat√©rale.\nNote: Par d√©faut, le plan n‚Äôaffichera que Markdown. Pour afficher les cellules de code, activez le param√®tre suivant : Contour du bloc-notes \u003e : Afficher les cellules de code.\nPrise en charge d‚ÄôIntelliSense dans l‚Äô√©diteur de bloc-notes Jupyter La fen√™tre Python Jupyter Notebook Editor contient des informations compl√®tes sur IntelliSense : saisie semi-automatique du code, listes de membres, informations rapides sur les m√©thodes et conseils de param√®tre. Vous pouvez √™tre tout aussi productif en tapant dans la fen√™tre de l‚Äô√©diteur de bloc-notes que dans l‚Äô√©diteur de code.\nExplorateur de variables et visionneuse de donn√©es Dans un bloc-notes Python, il est possible d‚Äôafficher, d‚Äôinspecter, de trier et de filtrer les variables de votre session Jupyter actuelle. En s√©lectionnant l‚Äôic√¥ne Variables dans la barre d‚Äôoutils principale apr√®s avoir ex√©cut√© le code et les cellules, vous verrez une liste des variables actuelles, qui seront automatiquement mises √† jour au fur et √† mesure que les variables sont utilis√©es dans le code. Le volet des variables s‚Äôouvre en bas du bloc-notes.\nVisionneuse de donn√©es Pour plus d‚Äôinformations sur vos variables, vous pouvez √©galement double-cliquer sur une ligne ou utiliser le bouton Afficher la variable dans la visionneuse de donn√©es en regard de la variable pour obtenir une vue plus d√©taill√©e d‚Äôune variable dans la visionneuse de donn√©es.\nVous pouvez √©galement utiliser l‚Äôexp√©rience de visualisation des donn√©es offerte par d‚Äôautres extensions comme Data Wrangler. L‚Äôextension Data Wrangler offre une interface utilisateur riche pour afficher des informations sur vos donn√©es et vous aide √† effectuer le profilage des donn√©es, les contr√¥les qualit√©, les transformations, etc.\nFiltrage des lignes Le filtrage des lignes dans la visionneuse de donn√©es peut √™tre effectu√© en tapant dans la zone de texte en haut de chaque colonne. Tapez une cha√Æne que vous souhaitez rechercher et toute ligne contenant cette cha√Æne dans la colonne sera trouv√©e :\nSi vous voulez trouver une correspondance exacte, faites pr√©c√©der votre filtre de ‚Äò=‚Äô :\nSauvegarde des parcelles Pour enregistrer un trac√© √† partir de votre bloc-notes, il suffit de survoler la sortie et de s√©lectionner l‚Äôic√¥ne Enregistrer en haut √† droite.\nD√©boguer un bloc-notes Jupyter Il existe deux fa√ßons diff√©rentes de d√©boguer un notebook Jupyter : un mode plus simple appel√© ¬´ Run by Line ¬ª et un mode de d√©bogage complet.\nNote: Ces deux fonctionnalit√©s n√©cessitent ipykernel 6+.\nD√©boguer par ligne Ex√©cuter par ligne vous permet d‚Äôex√©cuter une cellule une ligne √† la fois, sans √™tre distrait par d‚Äôautres fonctionnalit√©s de d√©bogage VS Code. Pour commencer, s√©lectionnez le bouton Ex√©cuter par ligne dans la barre d‚Äôoutils de la cellule :\nUtilisez le m√™me bouton pour avancer d‚Äôune d√©claration. Vous pouvez s√©lectionner le bouton Arr√™ter la cellule pour arr√™ter plus t√¥t ou le bouton Continuer dans la barre d‚Äôoutils pour continuer √† s‚Äôex√©cuter jusqu‚Äô√† la fin de la cellule.\nD√©boguer la cellule Si vous souhaitez utiliser l‚Äôensemble complet des fonctionnalit√©s de d√©bogage prises en charge dans VS Code, telles que les points d‚Äôarr√™t et la possibilit√© d‚Äôeffectuer un pas √† pas d√©taill√© dans d‚Äôautres cellules et modules, vous pouvez utiliser le d√©bogueur VS Code complet.\nCommencez par d√©finir les points d‚Äôarr√™t dont vous avez besoin en cliquant dans la marge gauche d‚Äôune cellule de bloc-notes. S√©lectionnez ensuite le bouton D√©boguer la cellule dans le menu en regard du bouton Ex√©cuter. Cela ex√©cutera la cellule dans une session de d√©bogage et s‚Äôarr√™tera sur vos points d‚Äôarr√™t dans tout code en cours d‚Äôex√©cution, m√™me s‚Äôil se trouve dans une autre cellule ou un autre fichier..py Vous pouvez utiliser la vue D√©boguer, la console D√©boguer et tous les boutons de la barre d‚Äôoutils D√©boguer comme vous le feriez normalement dans VS Code. Rechercher dans le bloc-notes Vous pouvez effectuer une recherche dans un bloc-notes (ou des parties de celui-ci en filtrant les options de recherche) √† l‚Äôaide du raccourci clavier Ctrl/Cmd + F. Cliquez sur l‚Äôoption Filtrer (ic√¥ne en forme d‚Äôentonnoir) pour effectuer une recherche dans :\nEntr√©e de cellule Markdown (Markdown Source) Sortie de cellule Markdown (Markdown rendu) Entr√©e de cellule de code (Source de cellule de code) Sortie de cellule de code (Sortie de cellule) Les recherches de bloc-notes sont des entr√©es de cellule filtr√©es uniquement par d√©faut.\nR√©f√©rence: Documentation de VS Code",
    "description": "Tutoriel pour VS Code et Jupyter Notebook Voici un fichier qui vous expliquera comment utiliser jupyter notebook dans VS Code : Tutoriel pour utiliser Jupyter avec VS Code\nBlocs-notes Jupyter dans VS Code Jupyter (anciennement IPython Notebook) est un projet open source qui vous permet de combiner facilement du texte Markdown et du code source Python ex√©cutable sur un canevas appel√© notebook.\nVisual Studio Code prend en charge l‚Äôutilisation des blocs-notes Jupyter en mode natif et via des fichiers de code Python.",
    "tags": [],
    "title": " ",
    "uri": "/outils_dev/jupyter/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences¬†\u003e¬†\rOutils de d√©veloppement",
    "content": "Cette page rassemble une s√©rie de petits d√©tails importants pour bien d√©buter en programmation. Ces astuces visent √† rendre l‚Äôutilisation du clavier et de l‚Äôenvironnement plus fluide, surtout en contexte de cours avec Jupyter Notebook.\nRaccourcis clavier utiles Copier, couper, coller Ctrl + C : Copie la s√©lection. Ctrl + X : Coupe la s√©lection (la s√©lection sera effac√©e, mais pourra √™tre coll√©e). Ctrl + V : Colle le contenu pr√©c√©demment copi√© ou coup√©. Astuce\rSi aucun texte n‚Äôest s√©lectionn√©, Ctrl + C ou Ctrl + X agit sur toute la ligne courante. Cela permet de d√©placer rapidement du code sans avoir √† s√©lectionner manuellement.\nAnnuler et refaire Ctrl + Z : Annule la derni√®re action (effacement, erreur de frappe‚Ä¶). Ctrl + Y : Refait une action qui a √©t√© annul√©e (r√©tablir). Supprimer dans les deux directions Retour arri√®re (‚Üê ou Backspace) : Efface le caract√®re √† gauche du curseur. Suppr (ou Delete) : Efface le caract√®re √† droite du curseur. √Ä retenir\rLa touche Suppr permet de corriger plus rapidement sans d√©placer le curseur.\nChanger de fen√™tre Alt + Tab : Permet de basculer rapidement d‚Äôune fen√™tre ouverte √† une autre (navigateur, Notebook, etc.). Astuce\rTu peux garder Alt enfonc√© et appuyer plusieurs fois sur Tab pour faire d√©filer les fen√™tres disponibles.\nDiviser son √©cran de travail Travailler avec deux fen√™tres c√¥te √† c√¥te facilite la lecture de consignes tout en codant.\nAvec le clavier : Touche Windows + ‚Üê ou ‚Üí pour coller une fen√™tre √† gauche ou √† droite. Touche Windows + ‚Üë pour que la fen√™tre prenne tout l‚Äô√©cran. Touche Windows + ‚Üì pour d√©coller la fen√™tre. Avec la souris : Clique sur la barre de titre de la fen√™tre (le haut), puis glisse-la vers le c√¥t√© gauche ou droit de l‚Äô√©cran. Elle s‚Äôalignera automatiquement pour occuper la moiti√© de l‚Äô√©cran. Astuce\rTu peux ensuite s√©lectionner une autre fen√™tre √† mettre dans l‚Äôautre moiti√© de l‚Äô√©cran.\nEx√©cution d‚Äôun programme dans Jupyter Notebook Ex√©cuter une cellule Ctrl + Entr√©e : Ex√©cute la cellule actuelle, sans passer √† la suivante. Shift + Entr√©e : Ex√©cute la cellule, puis passe √† la suivante (ou cr√©e une nouvelle cellule si n√©cessaire). Diff√©rence entre les deux\rCtrl + Entr√©e est utile pour r√©ex√©cuter plusieurs fois une m√™me cellule. Shift + Entr√©e permet d‚Äôencha√Æner l‚Äôex√©cution de plusieurs cellules vers le bas. Arr√™ter un programme bloqu√© Quand un programme tourne en boucle ou prend trop de temps √† s‚Äôex√©cuter dans une cellule :\nClique dans la cellule Appuie sur le bouton ‚ÄúStop‚Äù dans la barre du notebook (g√©n√©ralement un carr√© noir) Ou utilise le menu Kernel \u003e Interrupt ou Interrompre Attention\rN‚Äôessaie pas de recharger la page tout de suite : essaie d‚Äôabord d‚Äôinterrompre l‚Äôex√©cution proprement.\nTrouver les symboles importants du clavier En programmation, on utilise souvent des caract√®res sp√©cifiques.\nLes images suivantes permettent de situer les touches pour obtenir ces carct√®res:\nCaract√®res Emplacement sur le clavier { } [ ] : \u0026 + ' ' \" \" ( ) | / \\ R√©sum√© des raccourcis Action Raccourci D√©tail Copier Ctrl + C Copie la s√©lection ou toute la ligne si rien n‚Äôest s√©lectionn√© Couper Ctrl + X Coupe la s√©lection ou toute la ligne si rien n‚Äôest s√©lectionn√© Coller Ctrl + V Colle le contenu copi√© ou coup√© Annuler Ctrl + Z Annule la derni√®re action Refaire Ctrl + Y Refait une action annul√©e Supprimer √† gauche Retour arri√®re Efface le caract√®re pr√©c√©dent Supprimer √† droite Suppr (Delete) Efface le caract√®re suivant Changer de fen√™tre Alt + Tab Bascule d‚Äôune fen√™tre √† une autre Coller une fen√™tre √† gauche/droite Win + ‚Üê / Win + ‚Üí Organise les fen√™tres sur l‚Äô√©cran Ex√©cuter une cellule (Jupyter) Ctrl + Entr√©e Ex√©cute sans passer √† la cellule suivante Ex√©cuter et avancer (Jupyter) Shift + Entr√©e Ex√©cute et passe √† la cellule suivante Arr√™ter un programme Bouton ‚ÄúStop‚Äù ou menu Interrompt un programme bloqu√© dans une cellule Notebook",
    "description": "Cette page rassemble une s√©rie de petits d√©tails importants pour bien d√©buter en programmation. Ces astuces visent √† rendre l‚Äôutilisation du clavier et de l‚Äôenvironnement plus fluide, surtout en contexte de cours avec Jupyter Notebook.\nRaccourcis clavier utiles Copier, couper, coller Ctrl + C : Copie la s√©lection. Ctrl + X : Coupe la s√©lection (la s√©lection sera effac√©e, mais pourra √™tre coll√©e). Ctrl + V : Colle le contenu pr√©c√©demment copi√© ou coup√©.",
    "tags": [],
    "title": "Astuces, touches sp√©ciales et +",
    "uri": "/outils_dev/trucs_pratiques/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences¬†\u003e¬†\rOutils de d√©veloppement",
    "content": "Introduction au Markdown dans Jupyter Notebook Markdown est un langage de balisage l√©ger qui vous permet de formater du texte en utilisant une syntaxe simple. Dans Jupyter Notebook, vous pouvez utiliser des cellules Markdown pour ajouter des titres, des listes, des liens, des images, et bien plus encore.\nComment cr√©er une cellule Markdown Cr√©er une nouvelle cellule : Cliquez sur le bouton ‚Äú+‚Äù dans la barre d‚Äôoutils pour ajouter une nouvelle cellule. Changer le type de cellule : Cliquez sur le menu d√©roulant ‚ÄúCode‚Äù dans la barre d‚Äôoutils et s√©lectionnez ‚ÄúMarkdown‚Äù. Vous pouvez √©galement utiliser le raccourci clavier Esc puis M. √âcrire du texte en Markdown : Tapez votre texte en utilisant la syntaxe Markdown. Ex√©cuter la cellule : Appuyez sur Shift + Enter pour ex√©cuter la cellule et afficher le texte format√©. Les bases du Markdown Titres et sous-titres:\nUtilisez les di√®ses # pour cr√©er des titres. Le nombre de di√®ses indique le niveau du titre.\n# Titre de niveau 1 ## Titre de niveau 2 ### Titre de niveau 3\rTexte en gras et en italique:\nPour mettre du texte en gras, encadrez-le avec deux ast√©risques ** ou deux tirets bas __.\n**texte en gras** __texte en gras__\rPour mettre du texte en italique, encadrez-le avec un ast√©risque * ou un tiret bas _.\n*texte en italique* _texte en italique_\rPour mettre du texte en gras et en italique, encadrez-le avec trois ast√©risques *** ou trois tirets bas ___.\n***Gras et italique*** ___Gras et italique___\rListes:\nListes √† puces:\nUtilisez des tirets -, des ast√©risques * ou des signes plus + pour cr√©er des listes √† puces.\n- √âl√©ment 1 - √âl√©ment 2 - √âl√©ment 3\rListes num√©rot√©es:\nUtilisez des chiffres suivis d‚Äôun point pour cr√©er des listes num√©rot√©es.\n1. Premier √©l√©ment 2. Deuxi√®me √©l√©ment 3. Troisi√®me √©l√©ment\rLiens et images:\nPour ins√©rer un lien, utilisez la syntaxe suivante :\n[Texte du lien](URL_du_lien)\rPour ins√©rer une image, utilisez la syntaxe suivante :\n![Texte alternatif](URL_de_l'image)\rBlocs de code:\nUtilisez des accents graves ` (backticks) pour ins√©rer du code en ligne :\n`print(\"Hello, World!\")`\rTableaux:\nCr√©ez des tableaux en utilisant des barres verticales | et des traits d‚Äôunion - pour d√©limiter les en-t√™tes et les colonnes :\n| En-t√™te 1 | En-t√™te 2 | |-----------|-----------| | Cellule 1 | Cellule 2 | | Cellule 3 | Cellule 4 |\rCitations:\nUtilisez le symbole \u003e pour cr√©er des citations.\n\u003e Ceci est une citation.\rFormules math√©matiques:\nUtilisez LaTeX pour √©crire des formules math√©matiques. Encadrez vos formules avec des signes dollar $.\n$E = mc^2$\rTexte barr√©:\nUtilisez deux tildes ~~ pour barrer du texte.\n~~texte barr√©~~\rBlocs de texte surlign√©:\nUtilisez trois accents graves ^^^ pour surligner des blocs de texte.\n^^^markdown\rExemples pratiques Exemple de titre et de paragraphe # Mon chapitre sur le Markdown Bienvenue dans ce chapitre sur le Markdown dans Jupyter Notebook. Vous apprendrez √† formater du texte facilement.\rExemple de liste et de lien ## Liste des sujets abord√©s - Introduction au Markdown - Syntaxe de base - Les titres - Texte en gras et en italique - Les listes - Exemples pratiques - [Documentation officielle](https://jupyter-notebook.readthedocs.io/en/stable/examples/Notebook/Working%20With%20Markdown%20Cells.html)\rExemple d‚Äôimage et de bloc de code ## Exemple d'image ![Logo Jupyter](https://jupyter.org/assets/main-logo.svg) ## Exemple de code Python ```python def salut(nom): return f\"Hello, {nom}!\" print(salut(\"world\"))\rVid√©o YouTube Cr√©er des cellules Markdowns dans Jupyter Notebook",
    "description": "Introduction au Markdown dans Jupyter Notebook Markdown est un langage de balisage l√©ger qui vous permet de formater du texte en utilisant une syntaxe simple. Dans Jupyter Notebook, vous pouvez utiliser des cellules Markdown pour ajouter des titres, des listes, des liens, des images, et bien plus encore.\nComment cr√©er une cellule Markdown Cr√©er une nouvelle cellule : Cliquez sur le bouton ‚Äú+‚Äù dans la barre d‚Äôoutils pour ajouter une nouvelle cellule.",
    "tags": [],
    "title": " ",
    "uri": "/outils_dev/markdown/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences",
    "content": "1. Comporte-toi comme si tu √©tais d√©j√† en emploi. Arrive √† l‚Äôheure, sois pr√™t √† travailler, et respecte les √©ch√©ances. Ton attitude ici pr√©pare ton avenir professionnel.\n2. Respecte-toi, donc agis avec respect. Ton comportement refl√®te la mani√®re dont tu te consid√®res. Adopte une attitude calme, polie et attentive envers toi-m√™me, les autres et l‚Äôenseignant¬∑e.\n3. Sois pr√©sent, mentalement et physiquement. Utilise ton cellulaire seulement pour les besoins du cours. Reste concentr√©¬∑e pendant les activit√©s, comme tu le ferais dans un contexte de travail.\n4. Ose poser des questions, mais aussi √©couter. Ton implication est valoris√©e. La participation active et l‚Äô√©coute respectueuse des autres sont essentielles √† une ambiance d‚Äôapprentissage saine.\n5. Travaille avec rigueur et honn√™tet√©. Faire de son mieux, c‚Äôest une forme de respect de soi. Le plagiat ou la tricherie nuisent √† ton apprentissage r√©el et √† ta cr√©dibilit√© future.",
    "description": "1. Comporte-toi comme si tu √©tais d√©j√† en emploi. Arrive √† l‚Äôheure, sois pr√™t √† travailler, et respecte les √©ch√©ances. Ton attitude ici pr√©pare ton avenir professionnel.\n2. Respecte-toi, donc agis avec respect. Ton comportement refl√®te la mani√®re dont tu te consid√®res. Adopte une attitude calme, polie et attentive envers toi-m√™me, les autres et l‚Äôenseignant¬∑e.\n3. Sois pr√©sent, mentalement et physiquement. Utilise ton cellulaire seulement pour les besoins du cours. Reste concentr√©¬∑e pendant les activit√©s, comme tu le ferais dans un contexte de travail.",
    "tags": [],
    "title": "R√®glements de classe",
    "uri": "/regles/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences¬†\u003e¬†\rEntr√©es/Sorties, Algorithme, d√©bogage et fonctions",
    "content": "Objectifs p√©dagogiques √ätre capable de :\nSaisir des donn√©es au clavier. Convertir des types de donn√©es Traduire un algorithme simple en code Python Rep√©rer et corriger des erreurs dans un script Utiliser des fonctions pr√©d√©finies pour faire des calculs ou manipuler des donn√©es Exercice 1 ‚Äì Traduire un algorithme Voici un algorithme :\nDemander la distance parcourue (en m√®tres) Demander le temps √©coul√© (en secondes) Calculer la vitesse moyenne (v = d / t) Afficher la vitesse moyenne Consigne : Traduis cet algorithme en code Python.\nExercice 2 ‚Äì D√©bogage : trouver l‚Äôerreur Voici un script contenant une erreur :\nnom = input(\"Entrez votre nom : ) print(\"Bonjour\", nom)\rConsigne :\nCopie-colle le code et ex√©cute-le. Observe le message d‚Äôerreur. Corrige le code. Exercice 3 ‚Äì Erreur logique : l‚Äôaire du rectangle Voici un script avec une erreur logique :\nlongueur = 4 largeur = 3 aire = longueur + largeur print(\"Aire =\", aire)\rConsigne :\nIdentifie l‚Äôerreur. Corrige-la pour obtenir la bonne aire. Modifie le programme pour demander la longueur et la largeur √† l‚Äôutilisateur avec input(). Exercice 4 ‚Äì Utiliser les fonctions pr√©d√©finies √âcris un programme qui :\nDemande un mot √† l‚Äôutilisateur Affiche le mot en majuscules Affiche le nombre de lettres dans ce mot Pistes : input(), print(), len(), str.upper()\nExercice 5 ‚Äì Utiliser le module math √âcris un programme qui :\nDemande √† l‚Äôutilisateur de saisir un rayon Calcule l‚Äôaire d‚Äôun cercle (œÄ √ó r¬≤) Affiche le r√©sultat arrondi √† 2 d√©cimales Pistes : import math, math.pi, math.pow(), round()\nBonus ‚Äì Exercice de consolidation Voici un mini-algorithme :\nDemander le nom d‚Äôun √©l√©ment chimique Demander sa masse atomique Afficher un message : \"L'√©l√©ment [nom] a une masse atomique de [valeur] u.\" Traduis-le en code Python.",
    "description": "Objectifs p√©dagogiques √ätre capable de :\nSaisir des donn√©es au clavier. Convertir des types de donn√©es Traduire un algorithme simple en code Python Rep√©rer et corriger des erreurs dans un script Utiliser des fonctions pr√©d√©finies pour faire des calculs ou manipuler des donn√©es Exercice 1 ‚Äì Traduire un algorithme Voici un algorithme :\nDemander la distance parcourue (en m√®tres) Demander le temps √©coul√© (en secondes) Calculer la vitesse moyenne (v = d / t) Afficher la vitesse moyenne Consigne : Traduis cet algorithme en code Python.",
    "tags": [],
    "title": "Atelier 3",
    "uri": "/semaine3/atelier/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences",
    "content": "",
    "description": "",
    "tags": [],
    "title": "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ",
    "uri": "/separateur_section/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences¬†\u003e¬†\rD√©cider avec `if`, `elif`, `else` et les op√©rateurs",
    "content": "Objectifs p√©dagogiques Utiliser les op√©rateurs de comparaison et logiques. Utiliser les structures conditionnelles if, elif, else. Travailler avec les types num√©riques (float, int). Exercice 1 Contexte L‚Äô√©tat physique de l‚Äôeau d√©pend de la temp√©rature et de la pression. √Ä pression atmosph√©rique normale (1 atm) :\nL‚Äôeau g√®le √† 0‚ÄØ¬∞C et bout √† 100‚ÄØ¬∞C. En altitude, la pression est plus faible, donc l‚Äôeau bout √† une temp√©rature plus basse. En autocuiseur, la pression est plus √©lev√©e, donc l‚Äôeau bout √† une temp√©rature plus √©lev√©e. On suppose ici un mod√®le tr√®s simple :\nPression (atm) Temp√©rature d‚Äô√©bullition (¬∞C) 0.5 81 1.0 100 1.5 112 2.0 120 Le point de cong√©lation demeure √† 0‚ÄØ¬∞C peu importe la pression.\n√Ä faire √âcris un programme Python qui :\nDemande √† l‚Äôutilisateur d‚Äôentrer :\nLa temp√©rature de l‚Äôeau en ¬∞C La pression en atm (choix parmi 0.5, 1.0, 1.5, 2.0) D√©termine et affiche l‚Äô√©tat physique de l‚Äôeau : \"solide\", \"liquide\" ou \"gaz\".\nExemples de fonctionnements attendus Temp√©rature (¬∞C) : 50 Pression (atm) : 1.0 √âtat de l‚Äôeau : liquide\rTemp√©rature (¬∞C) : 101 Pression (atm) : 1.0 √âtat de l‚Äôeau : gaz\rTemp√©rature (¬∞C) : -5 Pression (atm) : 2.0 √âtat de l‚Äôeau : solide\rPistes / rappels Utiliser des conditions imbriqu√©es ou combin√©es (if ... and ..., elif) Pour simplifier, tu peux faire un if sur la pression pour d√©finir le point d‚Äô√©bullition Utilise des variables pour stocker les seuils Bonus (facultatif) G√©rer des cas d‚Äôerreurs (ex. : pression invalide) Afficher une petite phrase plus descriptive selon l‚Äô√©tat : ‚ÄúL‚Äôeau est sous forme de vapeur.‚Äù ou ‚ÄúL‚Äôeau est liquide √† cette temp√©rature et pression.‚Äù",
    "description": "Objectifs p√©dagogiques Utiliser les op√©rateurs de comparaison et logiques. Utiliser les structures conditionnelles if, elif, else. Travailler avec les types num√©riques (float, int). Exercice 1 Contexte L‚Äô√©tat physique de l‚Äôeau d√©pend de la temp√©rature et de la pression. √Ä pression atmosph√©rique normale (1 atm) :\nL‚Äôeau g√®le √† 0‚ÄØ¬∞C et bout √† 100‚ÄØ¬∞C. En altitude, la pression est plus faible, donc l‚Äôeau bout √† une temp√©rature plus basse. En autocuiseur, la pression est plus √©lev√©e, donc l‚Äôeau bout √† une temp√©rature plus √©lev√©e.",
    "tags": [],
    "title": "Atelier 4",
    "uri": "/semaine4/atelier/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences¬†\u003e¬†\rD√©cider avec `if`, `elif`, `else` et les op√©rateurs¬†\u003e¬†\rAtelier 4",
    "content": "√âtat de l‚Äôeau selon temp√©rature et pression # Demander les donn√©es √† l'utilisateur temp = float(input(\"Temp√©rature de l'eau en ¬∞C : \")) pression = float(input(\"Pression en atm (0.5, 1.0, 1.5 ou 2.0) : \")) # D√©terminer le point d‚Äô√©bullition selon la pression if pression == 0.5: ebullition = 81 elif pression == 1.0: ebullition = 100 elif pression == 1.5: ebullition = 112 elif pression == 2.0: ebullition = 120 else: print(\"Pression invalide. Choisissez 0.5, 1.0, 1.5 ou 2.0.\") ebullition = None # V√©rifier l‚Äô√©tat de l‚Äôeau seulement si la pression est valide if ebullition is not None: if temp \u003c 0: etat = \"solide\" message = \"L‚Äôeau est sous forme de glace.\" elif temp \u003c ebullition: etat = \"liquide\" message = \"L‚Äôeau est liquide √† cette temp√©rature et pression.\" else: etat = \"gaz\" message = \"L‚Äôeau est sous forme de vapeur.\" print(f\"‚Üí √âtat de l‚Äôeau : {etat}\") print(message)\rExemple d‚Äôex√©cution dans Jupyter Notebook Temp√©rature de l'eau en ¬∞C : 105\rPression en atm (0.5, 1.0, 1.5 ou 2.0) : 1.5\rs√âtat de l‚Äôeau : liquide\rL‚Äôeau est liquide √† cette temp√©rature et pression.",
    "description": "√âtat de l‚Äôeau selon temp√©rature et pression # Demander les donn√©es √† l'utilisateur temp = float(input(\"Temp√©rature de l'eau en ¬∞C : \")) pression = float(input(\"Pression en atm (0.5, 1.0, 1.5 ou 2.0) : \")) # D√©terminer le point d‚Äô√©bullition selon la pression if pression == 0.5: ebullition = 81 elif pression == 1.0: ebullition = 100 elif pression == 1.5: ebullition = 112 elif pression == 2.0: ebullition = 120 else: print(\"Pression invalide.",
    "tags": [],
    "title": "Solution",
    "uri": "/semaine4/atelier/solution/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences¬†\u003e¬†\rR√©p√©ter avec `for` et `while`",
    "content": "Objectifs d‚Äôapprentissage Utiliser les boucles for et while pour automatiser des t√¢ches r√©p√©titives. Appliquer les boucles √† une situation scientifique concr√®te. Travailler en collaboration pour planifier une solution et tester diff√©rents sc√©narios. Exercice 1 ‚Äì Table de multiplication √âcrire un programme Python qui affiche la table de multiplication d‚Äôun nombre donn√© par l‚Äôusager (entre 1 et 12), jusqu‚Äô√† 12 √ó ce nombre.\nExemple de sortie :\nEntrez un nombre entre 1 et 12 : 7\r1 x 7 = 7\r2 x 7 = 14\r3 x 7 = 21\r...\r12 x 7 = 84\rVariante : demander √† l‚Äôusager s‚Äôil veut une table en ordre croissant ou d√©croissant. Version bonus : utiliser une boucle while pour refaire une autre table tant que l‚Äôusager le souhaite. Exercice 2 ‚Äì Utiliser while pour atteindre un objectif Une temp√©rature initiale est de 20 ¬∞C. Chaque heure, elle augmente de 1,5 ¬∞C. √âcrire un programme qui affiche l‚Äô√©volution de la temp√©rature jusqu‚Äô√† ce qu‚Äôelle atteigne 30 ¬∞C.\nAide pas √† pas :\nCr√©e une variable temp avec 20 comme valeur initiale. Utilise une boucle while pour v√©rifier si temp est inf√©rieure √† 30. √Ä chaque tour, affiche la temp√©rature. Augmente la temp√©rature de 1.5. Exercice 3 ‚Äì R√©p√©ter une mesure fixe avec for On veut afficher les num√©ros de 10 √©chantillons : √âchantillon 1, √âchantillon 2, ‚Ä¶, √âchantillon 10.\nAide pas √† pas :\nUtilise une boucle for avec range(1, 11). √Ä chaque tour, affiche √âchantillon suivi du num√©ro. Exercice 4 ‚Äì Arr√™ter une boucle avec break (Semaine 7) Un √©tudiant r√©pond √† un test. Tu veux simuler les questions jusqu‚Äô√† la question 10, mais arr√™ter d√®s qu‚Äôil donne une mauvaise r√©ponse.\nAide pas √† pas :\nSimule des r√©ponses avec une variable (par exemple, une bonne r√©ponse = ‚ÄúA‚Äù). Utilise une boucle for pour passer les questions. Si la r√©ponse est incorrecte, affiche ‚ÄúTest termin√©‚Äù et utilise break. Exercice 4 ‚Äì Motif croissant simple Utilise deux boucles for imbriqu√©es. Aucun input() n‚Äôest requis. Le r√©sultat doit s‚Äôafficher exactement comme ci-dessous. Affichage attendu :\n1\r12\r123\rExercice 5 ‚Äì Motif croissant invers√© (triangle renvers√©) Utilise une boucle for pour afficher un motif d√©croissant. Aucune liste n‚Äôest n√©cessaire. Ne pas utiliser de conditions (if). Affichage attendu :\n123\r12\r1\rExercice 6 ‚Äì Motif avec nombres d√©croissants par ligne Affiche les nombres dans l‚Äôordre d√©croissant sur chaque ligne. Utilise deux boucles for imbriqu√©es. Ne pas utiliser de cha√Ænes pr√©fabriqu√©es (ex: \"321\"). Affichage attendu :\n321\r21\r1\rExercice 7 ‚Äì Triangle align√© √† droite avec nombres croissants Utilise les fonctions print() et la multiplication de cha√Ænes (\" \" * n). Aligne le motif √† droite. Ne pas utiliser de fonctions avanc√©es comme rjust(). Affichage attendu :\n1\r12\r123\rExercice 8 ‚Äì Triangle invers√© avec d√©calage √† gauche Utilise deux boucles imbriqu√©es et des espaces (\" \") pour le d√©calage. Le triangle doit se d√©caler d‚Äôune position √† droite √† chaque ligne. Affichage attendu :\n123\r12\r1\rExercice 9 ‚Äì Triangle invers√© sym√©trique d‚Äô√©toiles Le motif doit √™tre centr√©. Le nombre d‚Äô√©toiles par ligne suit la suite : 5, 3, 1 (soit 2*i ‚Äì 1). Utilise des boucles pour g√©rer les espaces et les √©toiles. Affichage attendu :\n*****\r***\r*",
    "description": "Objectifs d‚Äôapprentissage Utiliser les boucles for et while pour automatiser des t√¢ches r√©p√©titives. Appliquer les boucles √† une situation scientifique concr√®te. Travailler en collaboration pour planifier une solution et tester diff√©rents sc√©narios. Exercice 1 ‚Äì Table de multiplication √âcrire un programme Python qui affiche la table de multiplication d‚Äôun nombre donn√© par l‚Äôusager (entre 1 et 12), jusqu‚Äô√† 12 √ó ce nombre.\nExemple de sortie :\nEntrez un nombre entre 1 et 12 : 7\r1 x 7 = 7\r2 x 7 = 14\r3 x 7 = 21\r.",
    "tags": [],
    "title": "Atelier 6",
    "uri": "/semaine6/atelier/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences¬†\u003e¬†\rR√©p√©ter avec `for` et `while`¬†\u003e¬†\rAtelier 6",
    "content": "Exercice 1 ‚Äì Table de multiplication Solution de base (avec boucle for) # Demande √† l'usager un nombre entre 1 et 12 n = int(input(\"Entrez un nombre entre 1 et 12 : \")) # V√©rifie que le nombre est valide if 1 \u003c= n \u003c= 12: for i in range(1, 13): print(f\"{i} x {n} = {i * n}\") else: print(\"Le nombre doit √™tre entre 1 et 12.\")\rVariante : ordre croissant ou d√©croissant n = int(input(\"Entrez un nombre entre 1 et 12 : \")) if 1 \u003c= n \u003c= 12: ordre = input(\"Voulez-vous l‚Äôordre croissant (c) ou d√©croissant (d) ? \") if ordre.lower() == 'c': for i in range(1, 13): print(f\"{i} x {n} = {i * n}\") elif ordre.lower() == 'd': for i in range(12, 0, -1): print(f\"{i} x {n} = {i * n}\") else: print(\"Choix non reconnu.\") else: print(\"Le nombre doit √™tre entre 1 et 12.\")\rVersion bonus : recommencer avec boucle while continuer = \"oui\" while continuer.lower() == \"oui\": n = int(input(\"Entrez un nombre entre 1 et 12 : \")) if 1 \u003c= n \u003c= 12: ordre = input(\"Ordre croissant (c) ou d√©croissant (d) ? \") if ordre.lower() == 'c': for i in range(1, 13): print(f\"{i} x {n} = {i * n}\") elif ordre.lower() == 'd': for i in range(12, 0, -1): print(f\"{i} x {n} = {i * n}\") else: print(\"Choix non reconnu.\") else: print(\"Le nombre doit √™tre entre 1 et 12.\") continuer = input(\"Voulez-vous une autre table ? (oui/non) : \")\rExercice 2 But : utiliser une boucle while pour augmenter la temp√©rature jusqu‚Äô√† 30‚ÄØ¬∞C\ntemp = 20 # temp√©rature initiale while temp \u003c 30: print(\"Temp√©rature actuelle :\", temp, \"¬∞C\") temp += 1.5 # on augmente de 1.5 ¬∞C par heure\rCe que √ßa fait : Affiche la temp√©rature de 20 ¬∞C √† 28.5 ¬∞C (inclus). S‚Äôarr√™te lorsque temp atteint 30 ou plus. Exercice 3 But : afficher les num√©ros des √©chantillons de 1 √† 10\nfor i in range(1, 11): print(\"√âchantillon\", i)\rCe que √ßa fait : Affiche :\n√âchantillon 1\r√âchantillon 2\r...\r√âchantillon 10\rExercice 4 (Semaine 7) But : simuler un test qui s‚Äôarr√™te d√®s qu‚Äôil y a une mauvaise r√©ponse\n# On suppose que les bonnes r√©ponses sont \"A\" # et que l'√©tudiant fait une erreur √† la 4e question reponses = [\"A\", \"A\", \"A\", \"B\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\"] for i in range(10): print(\"Question\", i + 1) if reponses[i] != \"A\": print(\"R√©ponse incorrecte. Test termin√©.\") break else: print(\"Bonne r√©ponse.\")\rCe que √ßa fait : Affiche les 3 premi√®res bonnes r√©ponses. √Ä la 4e question, la r√©ponse est fausse ‚Üí le test s‚Äôarr√™te avec break. Exercice #4 Exercice #5 Exercice 6: Nombres d√©croissants sur chaque ligne Affichage :\n321\r21\r1\rCode :\nfor i in range(3, 0, -1): for j in range(i, 0, -1): print(j, end=\"\") print()\rExercice 7: Triangle invers√© align√© √† droite Affichage :\n1\r12\r123\rCode :\nn = 3 for i in range(1, n + 1): print(\" \" * (n - i) + \"\".join(str(j) for j in range(1, i + 1)))\rExercice 8: Triangle invers√© avec espace et d√©calage Affichage :\n123\r12\r1\rn = 3 for i in range(n, 0, -1): print(\" \" * (n - i) + \"\".join(str(j) for j in range(1, i + 1)))\rExercice 9: Triangle invers√© sym√©trique avec des √©toiles * Affichage :\n*****\r***\r*\rn = 3 for i in range(n, 0, -1): etoiles = \"*\" * (2 * i - 1) espaces = \" \" * (n - i) print(espaces + etoiles)",
    "description": "Exercice 1 ‚Äì Table de multiplication Solution de base (avec boucle for) # Demande √† l'usager un nombre entre 1 et 12 n = int(input(\"Entrez un nombre entre 1 et 12 : \")) # V√©rifie que le nombre est valide if 1 \u003c= n \u003c= 12: for i in range(1, 13): print(f\"{i} x {n} = {i * n}\") else: print(\"Le nombre doit √™tre entre 1 et 12.\")\rVariante : ordre croissant ou d√©croissant n = int(input(\"Entrez un nombre entre 1 et 12 : \")) if 1 \u003c= n \u003c= 12: ordre = input(\"Voulez-vous l‚Äôordre croissant (c) ou d√©croissant (d) ?",
    "tags": [],
    "title": "Solution",
    "uri": "/semaine6/atelier/solution/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences¬†\u003e¬†\rListes de donn√©es et cha√Ænes de caract√®res",
    "content": "Objectifs d‚Äôapprentissage Qu‚Äôest-ce qu‚Äôun dictionnaire? Un dictionnaire est une structure de donn√©es qui associe des cl√©s √† des valeurs. Il permet de stocker des informations organis√©es, un peu comme un mini-fichier Excel, mais avec des √©tiquettes personnalis√©es au lieu d‚Äôindices num√©riques.\nSyntaxe de base :\nmon_dictionnaire = { \"cl√©1\": valeur1, \"cl√©2\": valeur2 }\rExemple Un dictionnaire contenant les masses molaires de quelques √©l√©ments :\nmasses_molaires = { \"H\": 1.008, \"O\": 15.999, \"C\": 12.011 }\rAcc√©der √† une valeur avec une cl√© print(masses_molaires[\"O\"]) # Affiche : 15.999\rSi la cl√© n‚Äôexiste pas, Python d√©clenche une erreur KeyError.\nAjouter ou modifier une valeur Ajouter : masses_molaires[\"N\"] = 14.007\rModifier : masses_molaires[\"C\"] = 12.01 # Correction\rV√©rifier si une cl√© est pr√©sente if \"H\" in masses_molaires: print(\"L‚Äôhydrog√®ne est dans le dictionnaire.\")\rParcourir un dictionnaire a) Les cl√©s : for element in masses_molaires: print(element)\rb) Les valeurs : for valeur in masses_molaires.values(): print(valeur)\r.values() permet d‚Äôobtenir uniquement les valeurs du dictionnaire, sans les cl√©s. Utile quand on veut faire un calcul avec les valeurs, comme une moyenne ou une somme. for valeur in densites.values(): print(valeur)\rc) Les paires cl√©-valeur : for element, masse in masses_molaires.items(): print(f\"{element} ‚Üí {masse}\")\r.items() permet d‚Äôobtenir les couples cl√©-valeur sous forme de paires (appel√©es aussi tuples en Python). Utile quand on veut √† la fois le nom (cl√©) et la valeur associ√©e pour un affichage ou un traitement. Supprimer une entr√©e del masses_molaires[\"H\"]\rUtilisation fr√©quente en sciences Les dictionnaires sont utiles pour :\nAssocier des symboles d‚Äô√©l√©ments √† des valeurs (masse molaire, charge, √©tat) Regrouper des r√©sultats par √©chantillon (ex. temp√©rature par lieu) Associer des noms de g√®nes √† leur expression Exercice Cr√©e un dictionnaire densites qui contient la densit√© (en g/mL) de l‚Äôeau, de l‚Äô√©thanol et du mercure :\ndensites = { \"eau\": ..., \"√©thanol\": ..., \"mercure\": ... }\rPuis :\nAffiche la densit√© du mercure. Ajoute la densit√© de l‚Äôhuile (0.91 g/mL). Affiche toutes les substances et leur densit√©. =======\nüîπ .items() Cette m√©thode permet d‚Äôobtenir les couples cl√©-valeur sous forme de paires (appel√©es aussi tuples en Python).\nfor substance, densite in densites.items(): print(f\"{substance} ‚Üí {densite} g/mL\")\rR√©sultat :\neau ‚Üí 1.0 g/mL\r√©thanol ‚Üí 0.789 g/mL\rmercure ‚Üí 13.6 g/mL\r‚úÖ Utile quand on veut √† la fois le nom (cl√©) et la valeur associ√©e pour un affichage ou un traitement.\nüß™ R√©sum√© visuel Expression Donne quoi ? dico.values() Les valeurs (seules) dico.items() Les paires (cl√©, valeur) Souhaites-tu que je l‚Äôint√®gre √† la le√ßon pr√©c√©dente ou qu‚Äôon fasse un petit quiz rapide √† choix multiples sur ces notions?",
    "description": "Objectifs d‚Äôapprentissage Qu‚Äôest-ce qu‚Äôun dictionnaire? Un dictionnaire est une structure de donn√©es qui associe des cl√©s √† des valeurs. Il permet de stocker des informations organis√©es, un peu comme un mini-fichier Excel, mais avec des √©tiquettes personnalis√©es au lieu d‚Äôindices num√©riques.\nSyntaxe de base :\nmon_dictionnaire = { \"cl√©1\": valeur1, \"cl√©2\": valeur2 }\rExemple Un dictionnaire contenant les masses molaires de quelques √©l√©ments :\nmasses_molaires = { \"H\": 1.008, \"O\": 15.",
    "tags": [],
    "title": "Dictionnaires",
    "uri": "/semaine7/dictionnaires/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences¬†\u003e¬†\rListes de donn√©es et cha√Ænes de caract√®res",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Atelier 7",
    "uri": "/semaine7/atelier/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences¬†\u003e¬†\rListes et tableaux imbriqu√©s",
    "content": "Sujet Th√®me : Structures de donn√©es (listes et dictionnaires) Dur√©e pr√©vue : 1 h 30 √† 1 h 50 Travail en √©quipe de 2 ou 3\nObjectifs p√©dagogiques Savoir repr√©senter des entit√©s scientifiques sous forme de structures de donn√©es Python Utiliser les dictionnaires pour associer des cl√©s et des valeurs significatives Acc√©der et modifier les √©l√©ments d‚Äôune structure Appliquer ces comp√©tences √† des situations authentiques en sciences Contexte Les structures de donn√©es comme les dictionnaires et les listes sont tr√®s utiles pour repr√©senter de l‚Äôinformation scientifique structur√©e. Cette activit√© propose trois mini-situations o√π vous devrez utiliser ces outils pour mod√©liser et manipuler des donn√©es pertinentes.\nPartie 1 ‚Äì Mini-tableau p√©riodique (Dictionnaire) On souhaite repr√©senter certains √©l√©ments du tableau p√©riodique dans un dictionnaire Python. Chaque √©l√©ment est repr√©sent√© par son symbole, et on veut stocker son nom et sa masse atomique.\nelements = { \"H\": {\"nom\": \"Hydrog√®ne\", \"masse\": 1.008}, \"O\": {\"nom\": \"Oxyg√®ne\", \"masse\": 15.999}, \"C\": {\"nom\": \"Carbone\", \"masse\": 12.011} }\rT√¢ches\nAjouter un nouvel √©l√©ment (N pour azote, masse 14.007) Afficher la masse atomique de l‚Äôoxyg√®ne Afficher tous les symboles et noms avec une boucle Partie 2 ‚Äì Masse molaire d‚Äôune mol√©cule (Listes et dictionnaire) Une mol√©cule est une liste d‚Äôatomes, et on veut calculer sa masse molaire √† partir des masses de ses √©l√©ments.\neau = [\"H\", \"H\", \"O\"] # mol√©cule d‚Äôeau\rT√¢ches\nUtiliser le dictionnaire pr√©c√©dent pour calculer la masse molaire de la mol√©cule d‚Äôeau Tester avec une autre mol√©cule simple comme le dioxyde de carbone ([\"C\", \"O\", \"O\"]) Ajouter une fonction masse_molaire(molecule) qui retourne la masse totale Partie 3 ‚Äì Donn√©es biologiques (Liste de dictionnaires) On veut repr√©senter des observations d‚Äôun biologiste sous forme de structures Python. Chaque observation contient le nom d‚Äôune esp√®ce, sa taille moyenne (cm) et son habitat.\nobservations = [ {\"esp√®ce\": \"Grenouille verte\", \"taille_cm\": 9, \"habitat\": \"Marais\"}, {\"esp√®ce\": \"Salamandre tachet√©e\", \"taille_cm\": 15, \"habitat\": \"For√™t\"}, {\"esp√®ce\": \"Triton du nord\", \"taille_cm\": 10, \"habitat\": \"√âtang\"} ]\rT√¢ches\nAfficher les esp√®ces vivant en for√™t Calculer la taille moyenne de toutes les esp√®ces Trier les observations par taille (optionnel) R√©sultat attendu Un script bien structur√© utilisant :\nau moins un dictionnaire imbriqu√© une ou deux fonctions simples des boucles pour le traitement des donn√©es",
    "description": "Sujet Th√®me : Structures de donn√©es (listes et dictionnaires) Dur√©e pr√©vue : 1 h 30 √† 1 h 50 Travail en √©quipe de 2 ou 3\nObjectifs p√©dagogiques Savoir repr√©senter des entit√©s scientifiques sous forme de structures de donn√©es Python Utiliser les dictionnaires pour associer des cl√©s et des valeurs significatives Acc√©der et modifier les √©l√©ments d‚Äôune structure Appliquer ces comp√©tences √† des situations authentiques en sciences Contexte Les structures de donn√©es comme les dictionnaires et les listes sont tr√®s utiles pour repr√©senter de l‚Äôinformation scientifique structur√©e.",
    "tags": [],
    "title": "Activit√© 8 - tableau p√©riodique, mol√©cule, donn√©es biologiques",
    "uri": "/semaine8/atelier/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences¬†\u003e¬†\r√âvaluation 2 (35%)",
    "content": "Objectif Utiliser NumPy pour effectuer des calculs sur des donn√©es num√©riques, et Pandas pour analyser un fichier CSV contenant des donn√©es environnementales.\nDur√©e : Entre 45 et 60 minutes, √† faire en √©quipe de 2.\nPartie 1 ‚Äì Calculs avec NumPy Cr√©e un tableau NumPy contenant les temp√©ratures suivantes (en ¬∞C) mesur√©es chaque heure : import numpy as np temperatures = np.array([18.5, 19.0, 20.1, 21.3, 22.8, 23.4, 22.9, 21.0])\rCalcule et affiche :\nLa temp√©rature moyenne L‚Äô√©cart-type La temp√©rature maximale Toutes les temp√©ratures converties en degr√©s Fahrenheit (formule : F = C √ó 9/5 + 32) Partie 2 ‚Äì Analyse avec Pandas T√©l√©charge le fichier capteurs.csv (fourni par l‚Äôenseignant), contenant des mesures de capteurs environnementaux : Heure,Temp√©rature,Humidit√©,pH\r08:00,18.5,55,6.8\r09:00,19.0,53,6.9\r10:00,20.1,51,7.0\r11:00,21.3,49,7.1\r12:00,22.8,47,7.1\r13:00,23.4,45,7.2\r14:00,22.9,44,7.3\r15:00,21.0,46,7.2\rUtilise Pandas pour :\nLire le fichier Afficher les 5 premi√®res lignes Afficher la moyenne de chaque variable Trouver √† quelle heure la temp√©rature est la plus √©lev√©e Filtrer les lignes o√π le pH est sup√©rieur √† 7.0 Bonus : ajoute une nouvelle colonne Indice_confort selon cette r√®gle :\nSi temp√©rature ‚â• 22 et humidit√© \u003c 50 ‚Üí ‚Äú√âlev√©‚Äù Sinon ‚Üí ‚ÄúMod√©r√©‚Äù R√©sultat attendu (exemples) Temp√©rature moyenne : 21.125 ¬∞C Temp√©ratures en Fahrenheit : [65.3 66.2 68.2 ...] Heure avec temp√©rature max : 13:00",
    "description": "Objectif Utiliser NumPy pour effectuer des calculs sur des donn√©es num√©riques, et Pandas pour analyser un fichier CSV contenant des donn√©es environnementales.\nDur√©e : Entre 45 et 60 minutes, √† faire en √©quipe de 2.\nPartie 1 ‚Äì Calculs avec NumPy Cr√©e un tableau NumPy contenant les temp√©ratures suivantes (en ¬∞C) mesur√©es chaque heure : import numpy as np temperatures = np.array([18.5, 19.0, 20.1, 21.3, 22.8, 23.4, 22.9, 21.0])\rCalcule et affiche :",
    "tags": [],
    "title": "Activit√© 9 - Analyse de donn√©es environnementales",
    "uri": "/semaine9/atelier/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences",
    "content": "Groupe 09\n(lundi 15h20)\rGroupe 11\n(mercredi 08h00)\rGroupe 10\n(vendredi 15h20)\rCours 01\r15 ao√ªt\r15 ao√ªt\r17 ao√ªt\rCours 02\r22 ao√ªt\r22 ao√ªt\r24 ao√ªt\rCours 03\r29 ao√ªt\r29 ao√ªt\r31 ao√ªt\rCours 04\r...\r....\r.....\rCours 05\r√âvaluation #1 (25%)\rCours 06\r...\r....\r.....\rCours 07\r...\r....\r.....\rCours 08\r...\r....\r.....\rCours 09\r...\r....\r.....\rCours 10\r√âvaluation #2 (35%)\rCours 11\r...\r....\r.....\rCours 12\r...\r....\r.....\rCours 13\r...\r....\r.....\rCours 14\r...\r....\r.....\rCours 15\rRemise du projet (15%)\n√âvaluation finale (25%)\rDates sujettes √† changement.",
    "description": "Groupe 09\n(lundi 15h20)\rGroupe 11\n(mercredi 08h00)\rGroupe 10\n(vendredi 15h20)\rCours 01\r15 ao√ªt\r15 ao√ªt\r17 ao√ªt\rCours 02\r22 ao√ªt\r22 ao√ªt\r24 ao√ªt\rCours 03\r29 ao√ªt\r29 ao√ªt\r31 ao√ªt\rCours 04\r...\r....\r.....\rCours 05\r√âvaluation #1 (25%)\rCours 06\r...\r....\r.....\rCours 07\r...\r....\r.....\rCours 08\r...\r....\r.....\rCours 09\r...\r....\r.....\rCours 10\r√âvaluation #2 (35%)\rCours 11\r.",
    "tags": [],
    "title": "Les s√©ances de cours",
    "uri": "/cours/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences¬†\u003e¬†\rVisualisation de donn√©es avec matplotlib (bases)",
    "content": "Objectif : Utiliser matplotlib pour tracer une courbe repr√©sentant l‚Äô√©volution de la temp√©rature dans le temps, √† partir de donn√©es exp√©rimentales.\nActivit√© : Courbe de refroidissement d‚Äôun liquide Contexte\nUn laboratoire a mesur√© la temp√©rature d‚Äôun liquide en refroidissement toutes les 5 minutes pendant une heure. On souhaite visualiser la courbe de refroidissement pour interpr√©ter le comportement thermique du syst√®me.\nConsignes Importer la biblioth√®que matplotlib.pyplot et configurer l‚Äôaffichage dans Jupyter Notebook. Tracer un graphique en ligne (line plot) de la temp√©rature en fonction du temps. Ajouter un titre, des √©tiquettes d‚Äôaxes et une grille. Ajouter un point de d√©part et un point final avec des marqueurs distinctifs. En bonus : ajouter une ligne horizontale repr√©sentant la temp√©rature ambiante (ex. 22‚ÄØ¬∞C). Travail d‚Äô√©quipe (formative)\nDiscuter des anomalies possibles dans les donn√©es. Comment cette courbe pourrait-elle √™tre utilis√©e pour mod√©liser un ph√©nom√®ne (loi de Newton du refroidissement, par exemple)‚ÄØ? Donn√©es fournies Les donn√©es sont fournies sous forme de deux listes Python :\n# Temps en minutes temps = [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60] # Temp√©rature en degr√©s Celsius temperature = [90, 78, 69, 62, 56, 52, 48, 45, 43, 41, 40, 39.5, 39]",
    "description": "Objectif : Utiliser matplotlib pour tracer une courbe repr√©sentant l‚Äô√©volution de la temp√©rature dans le temps, √† partir de donn√©es exp√©rimentales.\nActivit√© : Courbe de refroidissement d‚Äôun liquide Contexte\nUn laboratoire a mesur√© la temp√©rature d‚Äôun liquide en refroidissement toutes les 5 minutes pendant une heure. On souhaite visualiser la courbe de refroidissement pour interpr√©ter le comportement thermique du syst√®me.\nConsignes Importer la biblioth√®que matplotlib.pyplot et configurer l‚Äôaffichage dans Jupyter Notebook.",
    "tags": [],
    "title": "Activit√© 10 - tracer un graphique de donn√©es exp√©rimentales.",
    "uri": "/semaine10/atelier/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences",
    "content": "Objectifs d‚Äôapprentissage √Ä la fin de cette le√ßon, vous serez en mesure de :\nConna√Ætre les objectifs du cours et les r√®glements du coll√®ge √† respecter (Questionnaire interactif WooClap). Se connecter √† OneDrive du c√©gep. Comprendre la gestion de fichiers (Explorateur de fichiers). Cr√©er une structure de dossiers pour le cours. Activer l‚Äôaffichage de l‚Äôextension des fichiers dans l‚ÄôExplorateur. T√©l√©charger un fichier de Moodle, le retrouver et le placer dans le bon dossier. Cr√©er un nouveau bloc-notes .ipynb (Jupyter Notebook) sur Visual Studio Code. Activer la sauvegarde automatique dans Visual Studio Code. Cr√©er et ex√©cuter des cellules (code et texte) dans Visual Studio Code. Installation de Python et Visual Studio Code sur Windows 11 (pour la maison) Installer Python et VS Code Installer Jupyter dans VS Code et cr√©er un bloc notes Alternatives √† Visual Studio Code (pour la maison) Google Colab PyCharm Community",
    "description": "Objectifs d‚Äôapprentissage √Ä la fin de cette le√ßon, vous serez en mesure de :\nConna√Ætre les objectifs du cours et les r√®glements du coll√®ge √† respecter (Questionnaire interactif WooClap). Se connecter √† OneDrive du c√©gep. Comprendre la gestion de fichiers (Explorateur de fichiers). Cr√©er une structure de dossiers pour le cours. Activer l‚Äôaffichage de l‚Äôextension des fichiers dans l‚ÄôExplorateur. T√©l√©charger un fichier de Moodle, le retrouver et le placer dans le bon dossier.",
    "tags": [],
    "title": "Pr√©sentation du cours et l'environnement de travail",
    "uri": "/semaine1/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences¬†\u003e¬†\rPr√©sentation du cours et l'environnement de travail",
    "content": "Objectifs p√©dagogiques Se familiariser avec l‚Äôenvironnement de d√©veloppement. Le syst√®me de fichiers Visual Studio Code Jupyter Notebook (Cellules Markdown vs Code) √âcrire et ex√©cuter un premier script en python Cr√©ez un dossier nomm√© programmation-sciences dans votre OneDrive.\nLancez Visual Studio Code et ouvrez ce dossier.\nCr√©ez un nouveau fichier Jupyter nomm√© atelier1.ipynb.\nDans une premi√®re cellule Markdown, √©crivez un commentaire avec votre nom, la date, et l‚Äôobjectif de l‚Äôatelier.\nDans une deuxi√®me cellule Code, affichez un message de bienvenue avec print().\n# Message propos√© : print(\"Bienvenue dans le cours de programmation en sciences‚Äâ!\")",
    "description": "Objectifs p√©dagogiques Se familiariser avec l‚Äôenvironnement de d√©veloppement. Le syst√®me de fichiers Visual Studio Code Jupyter Notebook (Cellules Markdown vs Code) √âcrire et ex√©cuter un premier script en python Cr√©ez un dossier nomm√© programmation-sciences dans votre OneDrive.\nLancez Visual Studio Code et ouvrez ce dossier.\nCr√©ez un nouveau fichier Jupyter nomm√© atelier1.ipynb.\nDans une premi√®re cellule Markdown, √©crivez un commentaire avec votre nom, la date, et l‚Äôobjectif de l‚Äôatelier.\nDans une deuxi√®me cellule Code, affichez un message de bienvenue avec print().",
    "tags": [],
    "title": "Atelier 1",
    "uri": "/semaine1/atelier/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences",
    "content": "Objectifs d‚Äôapprentissage √Ä la fin de cette le√ßon vous serez en mesure de:\nD√©finir et utiliser des variables en Python. Manipuler les types de base en Python: int, float, str, bool. Afficher les r√©sultats de mani√®re claire et lisible Variables et types de donn√©es de base Une variable est un nom qui permet de stocker une valeur pour la r√©utiliser.\nExemples :\nage = 17 nom = \"Julie\" temperature = 36.6\rTypes de donn√©es courants : Type Exemple Description int 5, -3 Nombre entier float 3.14, -0.5 Nombre √† virgule flottante str \"Bonjour\" Cha√Æne de caract√®res bool True, False Valeur bool√©enne (vrai ou faux) V√©rifier le type d‚Äôune variable : age = 18 type_age = type(age) print(type_age) # \u003cclass 'int'\u003e\rR√®gles de nommage des variables Bonnes pratiques :\nUtiliser des noms significatifs (ex : masse_corps, volume_solution) Commencer par une lettre ou un soulign√© (_), jamais par un chiffre. √âviter les mots r√©serv√©s de Python (if, for, print, etc.). Utiliser des mots s√©par√©s par des soulign√©s (_). Utiliser des mots commen√ßants par une lettre majuscule, sauf le premier mot (ex : masseCorps, volumeSolution). Mauvais exemples :\n1age = 20 # commence par un chiffre ‚Üí erreur print = 8 # print est un mot r√©serv√© ‚Üí erreur\rDocumentation du code (les commentaires) On √©crit des commentaires pour expliquer le code. Python ignore tout ce qui suit # sur une ligne.\nExemples :\n# Calcul de l'aire d'un cercle rayon = 3 aire = 3.14 * rayon ** 2 # formule de l‚Äôaire\rOp√©rateurs arithm√©tiques Op√©rateur Signification Exemple R√©sultat + Addition 3 + 2 5 - Soustraction 7 - 4 3 * Multiplication 5 * 2 10 / Division (r√©sultat d√©cimal) 6 / 2 3.0 // Division enti√®re 7 // 2 3 % Modulo (reste) 7 % 2 1 ** Puissance 3 ** 2 9 Expressions et priorit√© des op√©rateurs Une expression est une combinaison de variables, de nombres et d‚Äôop√©rateurs.\nPriorit√© (ordre d‚Äôex√©cution) des op√©rateurs : () : parenth√®ses ** : puissance *, /, //, % : multiplication et division +, - : addition et soustraction Exemple :\nresultat = 3 + 4 * 2 # donne 11, pas 14 ! resultat = (3 + 4) * 2 # donne 14 gr√¢ce aux ()\rAffichage simple des donn√©es avec print On utilise print() pour afficher du texte et des valeurs.\nprenom = \"Nathalie\" age = 18 print(\"Bonjour\", prenom) print(\"Tu as\", age, \"ans.\")\rNB :\nTout ce qui est du texte fixe (autre que la valeur d‚Äôune variable), se met entre guillemets (simples ou doubles). On d√©limite les √©l√©ments texte vs variable par une virgule. Par d√©faut, la fonction print() ajoute un espace entre chacun des √©l√©ments √©crit entre ses parenth√®ses. √Ä retenir\rUne variable garde une valeur. On utilise les bonnes pratiques pour nommer nos variables. Les commentaires servent √† documenter le code. Les op√©rateurs arithm√©tiques permettent de faire des calculs. Comme en math√©matiques, l‚Äôordre des op√©rations est important en Python. print() permet d‚Äôafficher une r√©ponse, seule ou avec du texte.",
    "description": "Objectifs d‚Äôapprentissage √Ä la fin de cette le√ßon vous serez en mesure de:\nD√©finir et utiliser des variables en Python. Manipuler les types de base en Python: int, float, str, bool. Afficher les r√©sultats de mani√®re claire et lisible Variables et types de donn√©es de base Une variable est un nom qui permet de stocker une valeur pour la r√©utiliser.\nExemples :\nage = 17 nom = \"Julie\" temperature = 36.",
    "tags": [],
    "title": "Introduction √† Python (Variables, types et expressions)",
    "uri": "/semaine2/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences",
    "content": "Objectifs d‚Äôapprentissage G√©rer les entr√©es (saisies au clavier) et les sorties (affichage) d‚Äôun programme Python. Lire des donn√©es entr√©es par l‚Äôutilisateur. Comprendre le r√¥le d‚Äôun algorithme. √âcrire et traduire des algorithmes simples en python. Apprendre √† comprendre les messages d‚Äôerreurs et √† d√©boguer un programme Utiliser des fonctions pr√©d√©finies (ex: Module math) D√©finir ses propres fonctions. Lecture, conversion et affichage soign√© des donn√©es Lire une donn√©e au clavier La fonction input() permet de lire une donn√©e saisie au clavier :\nnom = input(\"Quel est ton nom ? \")\rConvertir les donn√©es Les donn√©es entr√©es par input() sont toujours des cha√Ænes (str). Il faut donc les convertir pour faire des calculs :\nExemple d‚Äôerreur en cas d‚Äôoubli de convertir\nnote1 = input(\"Entrez la premi√®re note\") note1 = note1\tr note2 = input(\"Entrez la deuxi√®me note\") note2 = note2 moyenne = (note1 + note2) / 2\t==\u003e ERREUR\rCAPTURE IMAGE ERREUR\nComment convertir des donn√©es en entier (int) ou en nombre flottant (float) Fonction Conversion vers‚Ä¶ Exemple int() entier int(\"5\") ‚Üí 5 float() d√©cimal float(\"3.14\") ‚Üí 3.14 note1 = input(\"Entrez la premi√®re note\") note1 = int(note1)\t# conversion en entier note2 = input(\"Entrez la deuxi√®me note\") note2 = int(note2)\t# conversion en entier moyenne = (note1 + note2) / 2\rAffichage de r√©sultats On utilise print() pour afficher du texte et des valeurs.\nnote1 = input(\"Entrez la premi√®re note\") note1 = int(note1)\t# conversion en entier note2 = input(\"Entrez la deuxi√®me note\") note2 = int(note2)\t# conversion en entier moyenne = (note1 + note2) / 2 print(\"La moyenne des deux notes\", note1, \"et\", note2, \"est:\", moyenne)\rPour un affichage plus soign√©, on peut utiliser les f-strings :\nprint(f\"La moyenne des deux notes {note1} et {note2} est: {moyenne}\")\rAffichage soign√© des r√©sultats num√©riques EXEMPLE AVEC ALGO SCIENTIFIQUE\nTraduction de l‚Äôalgorithme en code Python Un algorithme, c‚Äôest une suite d‚Äôinstructions claires pour r√©soudre un probl√®me.\nCas concret √âcrire un programme qui calcule la force d‚Äôun objet √† l‚Äôaide de la formule F = m x a o√π m est la masse de l‚Äôobjet et a l‚Äôacc√©l√©ration. Le programme doit demander √† l‚Äôutilisateur d‚Äôentrer au clavier la masse et l‚Äôacc√©l√©ration. √Ä la fin, le programme affiche le r√©sultat de la force.\nL‚Äôalgorithme (en fran√ßais) : Demander la masse d‚Äôun objet Demander l‚Äôacc√©l√©ration Calculer la force avec la formule F = m √ó a Afficher la force Traduction en Python : masse = float(input(\"Entrez la masse (kg) : \")) acceleration = float(input(\"Entrez l'acc√©l√©ration (m/s¬≤) : \")) force = masse * acceleration print(\"La force est\", force, \"N\")\rAstuce : chaque ligne de l‚Äôalgorithme devient une ou plusieurs lignes de code.\nD√©bogage D√©boguer, c‚Äôest trouver et corriger les erreurs dans le code.\nTypes d‚Äôerreurs fr√©quentes : Type d‚Äôerreur Exemple Solution Erreur de syntaxe print(\"Bonjour' Corriger la fermeture des guillemets Erreur d‚Äôex√©cution valeur = int(\"abc\") V√©rifier le type des entr√©es Erreur logique aire = longueur + largeur (au lieu de *) V√©rifier la formule Exemples √† tester (√† copier dans VS Code) : Exemple 1 ‚Äì Erreur de syntaxe print(\"D√©but du programme)\rQue dit le message d‚Äôerreur ? Corrige la ligne.\nExemple 2 ‚Äì Erreur d‚Äôex√©cution val = int(\"bonjour\")\rQuelle est la cause de l‚Äôerreur ? Remplace \"bonjour\" par \"12\".\nExemple 3 ‚Äì Erreur logique longueur = 5 largeur = 2 aire = longueur + largeur # erreur de formule print(\"Aire =\", aire)\rEst-ce que le r√©sultat est correct ? Corrige la formule avec * au lieu de +.\nAstuces pour d√©boguer : Lire le message d‚Äôerreur affich√© Ajouter des print() pour suivre les valeurs Tester une ligne √† la fois V√©rifier les types avec type() Exemples concrets Message d‚Äôerreur affich√©\nUtilisation de print()\nExploration des variables, ligne par ligne\nUtilisation de fonctions pr√©d√©finies Python offre d√©j√† plein de fonctions toutes pr√™tes (pr√©d√©finies).\nExemples utiles : Fonction Utilit√© Exemple print() Afficher un message print(\"Bonjour !\") input() Demander une donn√©e √† l‚Äôutilisateur nom = input(\"Votre nom :\") int() Convertir en entier val = int(\"5\") float() Convertir en nombre d√©cimal val = float(\"3.14\") round() Arrondir un nombre round(2.718, 2) ‚Üí 2.72 len() Compter les √©l√©ments d‚Äôune cha√Æne/liste len(\"atomes\") ‚Üí 6 type() Afficher le type d‚Äôune variable type(3.5) ‚Üí \u003cclass 'float'\u003e On appelle une fonction en √©crivant son nom suivi de parenth√®ses.\nFonctions du module math Pour acc√©der √† des fonctions math√©matiques plus avanc√©es, on utilise le module math.\nimport math\rFonction Description Exemple math.sqrt(x) Racine carr√©e math.sqrt(16) ‚Üí 4.0 math.pow(x, y) Puissance math.pow(2, 3) ‚Üí 8.0 math.pi La constante œÄ math.pi ‚Üí 3.14159... math.sin(x) Sinus (en radians) math.sin(math.pi / 2) ‚Üí 1.0 math.log(x) Logarithme naturel math.log(10) Exercices √† faire : a) √âcrire l‚Äôalgorithme correspondant au code ci-dessous :\nimport math r = float(input(\"Entrez le rayon du cercle : \")) aire = math.pi * math.pow(r, 2) print(\"Aire du cercle :\", round(aire, 2), \"unit√©s¬≤\")\rb) Traduisez l‚Äôalgorithme suivant en code Python :\nDemander le nom d‚Äôun √©l√©ment chimique Afficher un message disant ‚ÄúL‚Äô√©l√©ment choisi est [nom]‚Äù √Ä retenir\rinput() permet de lire une donn√©e (toujours une cha√Æne). Il faut convertir avec int() ou float() pour faire des calculs. print() permet d‚Äôafficher une r√©ponse, seule ou avec du texte et .",
    "description": "Objectifs d‚Äôapprentissage G√©rer les entr√©es (saisies au clavier) et les sorties (affichage) d‚Äôun programme Python. Lire des donn√©es entr√©es par l‚Äôutilisateur. Comprendre le r√¥le d‚Äôun algorithme. √âcrire et traduire des algorithmes simples en python. Apprendre √† comprendre les messages d‚Äôerreurs et √† d√©boguer un programme Utiliser des fonctions pr√©d√©finies (ex: Module math) D√©finir ses propres fonctions. Lecture, conversion et affichage soign√© des donn√©es Lire une donn√©e au clavier La fonction input() permet de lire une donn√©e saisie au clavier :",
    "tags": [],
    "title": "Entr√©es/Sorties, Algorithme, d√©bogage et fonctions",
    "uri": "/semaine3/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences",
    "content": "Objectifs d‚Äôapprentissage Identifier et utiliser correctement les op√©rateurs de comparaison et logiques pour √©valuer des conditions simples en Python. √âcrire des structures conditionnelles (if, elif, else) pour contr√¥ler le d√©roulement d‚Äôun programme selon diff√©rentes situations. Appliquer les structures conditionnelles √† des contextes scientifiques simples. Les op√©rateurs de comparaison Ces op√©rateurs permettent de comparer des valeurs. Le r√©sultat est toujours un bool√©en : True (vrai) ou False (faux).\nOp√©rateur Signification Exemple R√©sultat == √©gal √† 5 == 5 True != diff√©rent de 3 != 4 True \u003c plus petit que 2 \u003c 5 True \u003c= plus petit ou √©gal √† 5 \u003c= 5 True \u003e plus grand que 7 \u003e 4 True \u003e= plus grand ou √©gal √† 6 \u003e= 9 False Dans une cellule de Code, testez les exemples du tableau.\nLes op√©rateurs logiques Ils permettent de combiner plusieurs conditions.\nOp√©rateur Signification Exemple R√©sultat and et (toutes vraies) (4 \u003c 5) and (6 \u003e 3) True or ou (au moins une vraie) (4 \u003c 5) or (6 \u003c 3) True not n√©gation not (4 \u003c 5) False Dans une cellule de Code, testez les exemples du tableau.\nLes structures conditionnelles Elles permettent d‚Äôex√©cuter un bloc de code seulement si une condition est vraie.\nif Si la condition est vraie, le bloc indent√© (d√©cal√©) est ex√©cut√©.\nNotez la pr√©sence du caract√®re deux-points (:) apr√®s la condition.\ntemp = 30 if temp \u003e 25: print(\"Il fait chaud.\")\rDans une cellule de Code dans VS Code, testez l‚Äôexemple du if.\nif‚Ä¶else Deux chemins possibles : un si la condition est vraie, un si elle est fausse.\ntemp = 15 if temp \u003e 25: print(\"Il fait chaud.\") else: print(\"Il fait frais.\")\rDans une cellule de Code dans VS Code, testez l‚Äôexemple du if-else.\nif‚Ä¶elif‚Ä¶else Utilis√© pour tester plusieurs cas diff√©rents.\ntemp = 20 if temp \u003e 25: print(\"Il fait chaud.\") elif temp \u003e 15: print(\"Il fait bon.\") else: print(\"Il fait frais.\")\rDans une cellule de Code dans VS Code, testez l‚Äôexemple du if-elif-else.\nExercice √âcrire le code qui permet de tester la valeur du pH d‚Äôune solution.\nCr√©ez une variable pH = 4.5 Si le pH est strictement inf√©rieur √† 7 le programme affiche ‚ÄúSolution acide‚Äù Sinon, si le pH est √©gale √† 7, le programme affiche ‚ÄúSolution neutre‚Äù Sinon, le programme affiche ‚ÄúSolution basique‚Äù √Ä retenir\rLes op√©rateurs de comparaison comparent des valeurs. Les op√©rateurs logiques combinent plusieurs conditions. Les structures conditionnelles permettent de r√©agir √† des crit√®res dans un programme. if v√©rifie si une condition est vraie, si et seulement si c‚Äôest le cas, les instructions en dessous et d√©cal√©es seront ex√©cut√©es. elif permet de v√©rifier une autre condition, si et seulement si elle est vrais, les instructions en dessous et d√©cal√©es seront ex√©cut√©es. else permet de pr√©voir des instructions √† effectuer, si et seulement si aucune des conditions pr√©c√©dentes est vraie.",
    "description": "Objectifs d‚Äôapprentissage Identifier et utiliser correctement les op√©rateurs de comparaison et logiques pour √©valuer des conditions simples en Python. √âcrire des structures conditionnelles (if, elif, else) pour contr√¥ler le d√©roulement d‚Äôun programme selon diff√©rentes situations. Appliquer les structures conditionnelles √† des contextes scientifiques simples. Les op√©rateurs de comparaison Ces op√©rateurs permettent de comparer des valeurs. Le r√©sultat est toujours un bool√©en : True (vrai) ou False (faux).\nOp√©rateur Signification Exemple R√©sultat == √©gal √† 5 == 5 True !",
    "tags": [],
    "title": "D√©cider avec `if`, `elif`, `else` et les op√©rateurs",
    "uri": "/semaine4/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences",
    "content": "",
    "description": "",
    "tags": [],
    "title": "√âvaluation 1 (25%)",
    "uri": "/semaine5/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences",
    "content": "Objectifs de la le√ßon Comprendre l‚Äôutilit√© des boucles en programmation. Savoir √©crire des boucles while et for. Savoir identifier quand utiliser une boucle for vs. while. Interrompre le d√©roulement d‚Äôune boucle. Appliquer les boucles √† des cas concrets en sciences. √Ä quoi servent les boucles ? Elles permettent de r√©p√©ter des instructions plusieurs fois, soit un nombre connu, soit jusqu‚Äô√† ce qu‚Äôune condition soit atteinte.\nLa boucle while Utilis√©e quand on ne conna√Æt pas d‚Äôavance combien de fois r√©p√©ter.\nSyntaxe : while condition: instructions\rExemple : compteur = 0 while compteur \u003c 5: print(\"Valeur :\", compteur) compteur += 1\rTant que la condition est vraie (compteur \u003c 5), on ex√©cute le bloc.\nIl faut modifier l‚Äô√©tat de la condition dans la boucle pour √©viter une boucle infinie.\nExemples de boucle infinie: Cas 1: oublier de modifier l‚Äô√©tat de la condition\ntemp = 100 # temp√©rature initiale while temp \u003e 0: print(f\"Temp√©rature : {temp} ¬∞C\") # temp n'est pas modifi√© Cas 1: oublier de modifier l‚Äô√©tat de la condition\ntemp = 100 # temp√©rature initiale while temp \u003e 0: print(f\"Temp√©rature : {temp} ¬∞C\") temp += 10\t# Erreur de logique\rLa boucle for avec range() Utilis√©e quand on conna√Æt d‚Äôavance combien de fois r√©p√©ter.\nSyntaxes : Cas #1 for i in range(n): instructions\rn est un entier positif. Quelque soit n, la boucle sera ex√©cut√©e n - 1 fois. Exemple : for i in range(5): print(\"i =\", i)\rAffiche les valeurs de 0 √† 4.\nCas #2 for i in range(d√©but, fin): instructions\rd√©but : valeur initiale (optionnel, par d√©faut = 0) fin : valeur non incluse Exemple : for i in range(1, 5): print(\"i =\", i)\rAffiche les valeurs de 1 √† 4.\nCas #3 for i in range(d√©but, fin, pas): instructions\rd√©but : valeur initiale (optionnel, par d√©faut = 0) fin : valeur non incluse pas : saut entre chaque valeur (optionnel, par d√©faut = 1) Exemple : for i in range(0, 5, 2): print(\"i =\", i)\rAffiche les valeurs de 0, 2 et 4.\nInterrompre une boucle break : arr√™te imm√©diatement la boucle. continue : saute √† l‚Äôit√©ration suivante. Exemple avec break : for i in range(10): if i == 5: break print(i)\rAffiche 0 √† 4. S‚Äôarr√™te √† 5.\ncompteur = 0 while compteur \u003c 10: if compteur == 5: break print(\"Valeur :\", compteur) compteur += 1\r√Ä √©viter / pi√®ges fr√©quents Boucle infinie (while sans mise √† jour de la condition) Utiliser range sans comprendre que la fin est exclusive Oublier l‚Äôindentation dans le bloc de la boucle Exercice guid√© - Boucle for ou while ? Pour chacun des contextes suivants, avant d‚Äô√©crire le code, r√©pondez √† la question: ‚ÄúQuelle boucle devriez-vous utiliser ?‚Äù:\nAfficher les nombres de 1 √† 10 Compter jusqu‚Äô√† 100 par bonds de 10 Simuler la chute d‚Äôun objet de 100 m (baisse de 10 m/s) Lire une temp√©rature jusqu‚Äô√† ce qu‚Äôelle soit \u003c 0 (entr√©e utilisateur) √âcrire un programme qui : a) Affiche deux choix : 1-‚ÄúEntrez votre pr√©nom‚Äù et 2-‚ÄúQuitter le programme‚Äù b) Demande √† l‚Äôutilisateur d‚Äôentrer son choix (1 ou 2) et tant qu‚Äôil choisi l‚Äôoption 1, le programme lui redemande d‚Äôentrer son pr√©nom. Si c‚Äôest 2, le programme s‚Äôarr√™te (Vous pouvez utiliser break ou afficher un message). √Ä retenir\rLes boucles permettent d‚Äôautomatiser les calculs et traitements de donn√©es en science while = tant qu‚Äôune condition est vraie. Quand l‚Äôutiliser ? Lorsqu‚Äôon ne connait pas d‚Äôavance le nombre de r√©p√©titions. for = pour chaque valeur dans une s√©quence. Quand l‚Äôutiliser ? Lorsque le nombre de r√©p√©titions est connu d‚Äôavance.",
    "description": "Objectifs de la le√ßon Comprendre l‚Äôutilit√© des boucles en programmation. Savoir √©crire des boucles while et for. Savoir identifier quand utiliser une boucle for vs. while. Interrompre le d√©roulement d‚Äôune boucle. Appliquer les boucles √† des cas concrets en sciences. √Ä quoi servent les boucles ? Elles permettent de r√©p√©ter des instructions plusieurs fois, soit un nombre connu, soit jusqu‚Äô√† ce qu‚Äôune condition soit atteinte.\nLa boucle while Utilis√©e quand on ne conna√Æt pas d‚Äôavance combien de fois r√©p√©ter.",
    "tags": [],
    "title": "R√©p√©ter avec `for` et `while`",
    "uri": "/semaine6/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences",
    "content": "Objectifs d‚Äôapprentissage Cr√©er et manipuler des listes de donn√©es num√©riques ou textuelles en Python (ajout, suppression, parcours, calcul de statistiques simples). Acc√©der, modifier et parcourir les caract√®res d‚Äôune cha√Æne de caract√®res. Appliquer des m√©thodes de traitement de texte pour analyser ou transformer des cha√Ænes de caract√®res (ex. : mise en minuscules, d√©coupage, recherche, comptage). Les listes de donn√©es Une liste est un contenant qui peut regrouper plusieurs valeurs (appel√©es √©l√©ments), dans un ordre donn√©.\nCr√©ation de liste nombres = [4, 7, 9, 12] notes = [82.5, 76.0, 91.2] mots = [\"chlorophylle\", \"atome\", \"prot√©ine\"]\rAcc√®s √† un √©l√©ment On acc√®de √† un √©l√©ment avec un indice (le premier √©l√©ment a l‚Äôindice 0).\nprint(nombres[0]) # Affiche 4 print(mots[2]) # Affiche \"prot√©ine\"\rModifier un √©l√©ment nombres[1] = 10 # La liste devient [4, 10, 9, 12]\rAjouter et retirer un √©l√©ment nombres.append(15) # Ajoute 15 √† la fin nombres.remove(10) # Enl√®ve le 10\rTaille de la liste print(len(notes)) # Affiche 3\rParcourir une liste avec for for note in notes: print(note)\rQuelques traitements courants sur les listes Objectif Code Python Calculer une somme s = sum(notes) Moyenne m = sum(notes) / len(notes) Trouver le max ou le min max(notes) ou min(notes) Tester la pr√©sence d‚Äôun √©l√©ment \"atome\" in mots Trier une liste mots.sort() Calculs dans une liste avec une boucle for Calculer une somme On additionne les valeurs une par une dans une boucle.\nvaleurs = [10, 20, 30, 40] somme = 0 for v in valeurs: somme += v print(\"Somme:\", somme) # R√©sultat: 100\rCalculer une moyenne Une moyenne, c‚Äôest la somme divis√©e par le nombre d‚Äô√©l√©ments.\nmoyenne = somme / len(valeurs) print(\"Moyenne:\", moyenne) # R√©sultat: 25.0\rAssurez-vous que la liste n‚Äôest pas vide avant de faire la division (len(valeurs) ‚â† 0).\nTrouver le minimum et le maximum On initialise avec le premier √©l√©ment de la liste, puis on compare.\nvaleurs = [10, 20, 30, 40] minimum = valeurs[0] maximum = valeurs[0] for v in valeurs: if v \u003c minimum: minimum = v if v \u003e maximum: maximum = v print(\"Min:\", minimum) # R√©sultat: 10 print(\"Max:\", maximum) # R√©sultat: 40\rCha√Ænes de caract√®res (str) Une cha√Æne de caract√®res est un texte (entre guillemets), que l‚Äôon peut manipuler comme une suite de lettres ou une liste de lettre.\nD√©claration message = \"Bonjour les biologistes!\"\rAcc√®s par index print(message[0]) # 'B' print(message[-1]) # '!' (le dernier caract√®re)\rParcourir une cha√Æne for lettre in message: print(lettre)\rLongueur d‚Äôune cha√Æne len(message) # Nombre de caract√®res\rTraitements utiles sur les cha√Ænes Objectif Code Python Passer en minuscules message.lower() Passer en majuscules message.upper() Enlever les espaces autour texte.strip() S√©parer une cha√Æne en morceaux message.split(\" \") Remplacer un mot message.replace(\"Bonjour\", \"Salut\") Trouver la position d‚Äôun mot/lettre message.find(\"bio\") Compter le nombre de fois qu‚Äôun mot appara√Æt message.count(\"e\") Exemples simples d‚Äôutilisation √Ä FAIRE: √ânonc√©s es 2 exercices, solutions\nExemple 1 : Moyenne des notes notes = [89, 73, 94, 85] moyenne = sum(notes) / len(notes) print(\"Moyenne:\", moyenne)\rExemple 2 : Nombre de G et C dans une s√©quence d‚ÄôADN sequence = \"ATGCGGTAAC\" gc = sequence.count(\"G\") + sequence.count(\"C\") pourcentage_gc = gc / len(sequence) * 100 print(\"Pourcentage GC:\", pourcentage_gc)\r√Ä retenir\rUne liste permet de stocker plusieurs valeurs. On peut ajouter, enlever, parcourir et modifier les √©l√©ments d‚Äôune liste. Une cha√Æne de caract√®res est une s√©quence de lettres manipulable comme une liste. Il existe de nombreuses fonctions utiles pour manipuler du texte (majuscules, recherche, d√©coupage‚Ä¶).",
    "description": "Objectifs d‚Äôapprentissage Cr√©er et manipuler des listes de donn√©es num√©riques ou textuelles en Python (ajout, suppression, parcours, calcul de statistiques simples). Acc√©der, modifier et parcourir les caract√®res d‚Äôune cha√Æne de caract√®res. Appliquer des m√©thodes de traitement de texte pour analyser ou transformer des cha√Ænes de caract√®res (ex. : mise en minuscules, d√©coupage, recherche, comptage). Les listes de donn√©es Une liste est un contenant qui peut regrouper plusieurs valeurs (appel√©es √©l√©ments), dans un ordre donn√©.",
    "tags": [],
    "title": "Listes de donn√©es et cha√Ænes de caract√®res",
    "uri": "/semaine7/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences",
    "content": "Objectifs d‚Äôapprentissage Cr√©er des listes Acc√©der √† un √©l√©ment dans une liste ou un tableau 2D (liste de listes) Utiliser des boucles imbriqu√©es pour parcourir un tableau Ajouter des conditions dans les boucles 1. Liste simple Une liste est un ensemble de valeurs entre crochets [].\nnotes = [78, 85, 92] print(notes[1]) # 85 (indice commence √† 0)\rChaque valeur d‚Äôune liste est est positionn√© par indice, en commen√ßant par l‚Äôindice 0. 2. Liste de listes (tableau 2D) C‚Äôest une liste dans laquelle chaque √©l√©ment est lui-m√™me une liste.\ntableau = [ [1, 2, 3], [4, 5, 6] ]\rRepr√©sentation tabulaire:\n0 1 2 0 1 2 3 1 4 5 6 Chaque √©l√©ment (sous-liste) est positionn√© par indice, en commen√ßant par l‚Äôindice 0. Chaque valeur d‚Äôune sous-liste est est positionn√© par indice, en commen√ßant par l‚Äôindice 0. Acc√®s √† un √©l√©ment : print(tableau[1][2]) # 6\r3. Boucles imbriqu√©es pour parcourir un tableau Exemple : for ligne in tableau: for valeur in ligne: print(valeur)\rAffiche tous les √©l√©ments, un par un.\n4. Ajouter une condition dans la boucle Exemple : afficher seulement les valeurs \u003e 3 for ligne in tableau: for valeur in ligne: if valeur \u003e 3: print(valeur)\rR√©sum√© Action Exemple Acc√®s √† un √©l√©ment tableau[1][2] Boucle sur tableau 2D for ligne in tableau: Boucle imbriqu√©e for valeur in ligne: Condition if valeur \u003e 3: Exercices guid√©s Exercice 1 ‚Äì Acc√®s √† un √©l√©ment √ânonc√© : Dans la liste suivante, affiche la valeur 7.\nt = [[3, 4], [6, 7], [8, 9]]\rSolution :\nprint(t[1][1]) # 7\rExercice 2 ‚Äì Afficher tous les √©l√©ments √ânonc√© : Parcours le tableau t et affiche chaque valeur sur une ligne.\nSolution :\nfor ligne in t: for val in ligne: print(val)\rExercice 3 ‚Äì Afficher les valeurs paires √ânonc√© : Affiche seulement les valeurs paires du tableau t.\nSolution :\nfor ligne in t: for val in ligne: if val % 2 == 0: print(val)",
    "description": "Objectifs d‚Äôapprentissage Cr√©er des listes Acc√©der √† un √©l√©ment dans une liste ou un tableau 2D (liste de listes) Utiliser des boucles imbriqu√©es pour parcourir un tableau Ajouter des conditions dans les boucles 1. Liste simple Une liste est un ensemble de valeurs entre crochets [].\nnotes = [78, 85, 92] print(notes[1]) # 85 (indice commence √† 0)\rChaque valeur d‚Äôune liste est est positionn√© par indice, en commen√ßant par l‚Äôindice 0.",
    "tags": [],
    "title": "Listes et tableaux imbriqu√©s",
    "uri": "/semaine8/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences",
    "content": "Objectifs d‚Äôapprentissage √Ä la fin de cette le√ßon, vous devrez √™tre capable de :\nComprendre le r√¥le de NumPy pour le calcul scientifique rapide avec des tableaux. Utiliser Pandas pour manipuler des tableaux de donn√©es (DataFrame). Charger des donn√©es √† partir d‚Äôun fichier CSV et faire des analyses simples. Appliquer des op√©rations math√©matiques et statistiques de base. Pourquoi utiliser NumPy et Pandas? Python est tr√®s puissant pour l‚Äôanalyse de donn√©es scientifiques. Deux biblioth√®ques sont incontournables :\nNumPy (Numerical Python) : pour le calcul rapide sur des tableaux de donn√©es num√©riques. Pandas : pour organiser, filtrer et analyser des tableaux de donn√©es avec des √©tiquettes (colonnes/indices). Quand utiliser quoi? Tu veux faire des calculs rapides, des matrices, des moyennes, des sinuso√Ødes ‚Üí NumPy Tu veux lire un fichier de donn√©es exp√©rimentales, calculer une moyenne par groupe, trier ou filtrer ‚Üí Pandas Introduction √† NumPy Importation de la biblioth√®que import numpy as np\rCr√©ation d‚Äôun tableau (array) a = np.array([1, 2, 3, 4]) print(a)\rOp√©rations math√©matiques sur des tableaux b = a * 2 # Multiplie chaque √©l√©ment par 2 c = np.sqrt(a) # Racine carr√©e de chaque √©l√©ment\rQuelques fonctions utiles np.mean(a) # Moyenne np.max(a) # Maximum np.min(a) # Minimum np.std(a) # √âcart-type\rTableaux multidimensionnels matrice = np.array([[1, 2], [3, 4]]) print(matrice.shape) # Affiche les dimensions (2 lignes, 2 colonnes)\rIntroduction √† Pandas Importation de la biblioth√®que import pandas as pd\rLecture d‚Äôun fichier CSV df = pd.read_csv(\"donnees.csv\") print(df.head()) # Affiche les 5 premi√®res lignes\rAcc√®s √† une colonne df[\"Temp√©rature\"]\rStatistiques de base df.mean() df[\"pH\"].max()\rFiltrage des donn√©es df[df[\"Temp√©rature\"] \u003e 25] # S√©lectionne les lignes o√π la temp√©rature d√©passe 25\rMoyenne par groupe df.groupby(\"√âchantillon\")[\"Concentration\"].mean()\rComparaison Pandas vs NumPy T√¢che NumPy Pandas Calculs num√©riques rapides ‚úÖ ‚ùå (moins rapide) Donn√©es avec √©tiquettes ‚ùå ‚úÖ (DataFrame avec colonnes) Lecture de fichiers CSV ‚ùå ‚úÖ Visualisation rapide ‚ùå ‚úÖ (avec .plot() ou matplotlib) Conclusion NumPy est id√©al pour les tableaux num√©riques purs. Pandas est parfait pour manipuler des donn√©es tabulaires structur√©es comme celles qu‚Äôon retrouve en laboratoire ou en recherche scientifique. Ces deux biblioth√®ques sont souvent utilis√©es ensemble.",
    "description": "Objectifs d‚Äôapprentissage √Ä la fin de cette le√ßon, vous devrez √™tre capable de :\nComprendre le r√¥le de NumPy pour le calcul scientifique rapide avec des tableaux. Utiliser Pandas pour manipuler des tableaux de donn√©es (DataFrame). Charger des donn√©es √† partir d‚Äôun fichier CSV et faire des analyses simples. Appliquer des op√©rations math√©matiques et statistiques de base. Pourquoi utiliser NumPy et Pandas? Python est tr√®s puissant pour l‚Äôanalyse de donn√©es scientifiques.",
    "tags": [],
    "title": "√âvaluation 2 (35%)",
    "uri": "/semaine9/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences",
    "content": "Objectif de la le√ßon Apprendre √† tracer des graphiques simples en 2D √† partir de donn√©es scientifiques √† l‚Äôaide de la biblioth√®que matplotlib.\nDur√©e : 50 minutes de th√©orie + 1 h 50 de pratique\nContexte Les scientifiques visualisent souvent des donn√©es sous forme de graphiques pour interpr√©ter plus facilement des tendances, des anomalies ou des corr√©lations. Python permet de produire des graphiques de haute qualit√© gr√¢ce √† la biblioth√®que matplotlib.\nDans cette le√ßon, on apprend √† cr√©er des graphiques de base : courbe, points, √©tiquettes et titres. On travaille dans Jupyter Notebook √† l‚Äôint√©rieur de l‚Äôenvironnement Anaconda.\nNotions abord√©es Importation de la biblioth√®que\nimport matplotlib.pyplot as plt\rTrac√© simple d‚Äôune courbe\nx = [0, 1, 2, 3, 4] y = [0, 1, 4, 9, 16] plt.plot(x, y) plt.show()\rAjout de titres et √©tiquettes\nplt.title(\"Croissance quadratique\") plt.xlabel(\"Temps (s)\") plt.ylabel(\"Distance (m)\")\rPersonnalisation de la courbe\nStyle de ligne, couleur, marqueur plt.plot(x, y, color='green', linestyle='--', marker='o')\rTracer plusieurs courbes sur un m√™me graphique\nplt.plot(x, y, label=\"objet A\") plt.plot(x, [i**1.5 for i in x], label=\"objet B\") plt.legend()\rEnregistrement du graphique\nplt.savefig(\"mon_graphique.png\")\rExercice pratique Titre : Temp√©rature d‚Äôun liquide en fonction du temps But : √Ä partir des donn√©es fournies, tracer la courbe de temp√©rature d‚Äôun liquide chauff√© pendant 10 minutes.\nDonn√©es :\ntemps = [0, 2, 4, 6, 8, 10] temperature = [20, 35, fifty, 65, 72, 74] # Erreur volontaire √† corriger\rR√©sultat attendu Un graphique clair et lisible du type :\nTitre : Temp√©rature du liquide en fonction du temps Axe X : Temps (min) Axe Y : Temp√©rature (¬∞C) Ligne rouge en pointill√©s avec des cercles Fichier PNG enregistr√© dans le dossier de travail",
    "description": "Objectif de la le√ßon Apprendre √† tracer des graphiques simples en 2D √† partir de donn√©es scientifiques √† l‚Äôaide de la biblioth√®que matplotlib.\nDur√©e : 50 minutes de th√©orie + 1 h 50 de pratique\nContexte Les scientifiques visualisent souvent des donn√©es sous forme de graphiques pour interpr√©ter plus facilement des tendances, des anomalies ou des corr√©lations. Python permet de produire des graphiques de haute qualit√© gr√¢ce √† la biblioth√®que matplotlib.",
    "tags": [],
    "title": "Visualisation de donn√©es avec matplotlib (bases)",
    "uri": "/semaine10/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences¬†\u003e¬†\rLes tableaux NumPy et graphiques avanc√©s",
    "content": "Objectif p√©dagogique Apprendre √† lire et traiter un fichier contenant des donn√©es exp√©rimentales, effectuer des calculs simples, et produire un r√©sum√© statistique √† l‚Äôaide de Python.\nExercice 1 : Analyse de donn√©es de temp√©rature Contexte : Un technicien a mesur√© la temp√©rature d‚Äôun liquide toutes les 5 minutes pendant 30 minutes. Les donn√©es sont enregistr√©es dans un fichier CSV.\n√âtapes :\nT√©l√©charger et lire le fichier donnees_temp.csv fourni par l‚Äôenseignant.\nAfficher les donn√©es ligne par ligne, avec mise en forme : ¬´ √Ä t = 10 min, T = 25.8 ¬∞C ¬ª\nCalculer la temp√©rature moyenne √† partir des donn√©es lues.\n√âcrire un nouveau fichier analyse.csv qui contient :\nUne colonne ¬´ temps ¬ª Une colonne ¬´ temp√©rature ¬ª Une colonne ¬´ √©cart √† la moyenne ¬ª Bonus : Tracer les donn√©es avec matplotlib (si le temps le permet).\n√âl√©ments d‚Äô√©valuation formative (en √©quipe)\nCapacit√© √† extraire et utiliser les donn√©es du fichier Respect des bonnes pratiques (indentation, noms de variables, commentaires) Clart√© du fichier CSV g√©n√©r√© Travail collaboratif dans la r√©partition des t√¢ches Exercice 2 : Impact de la temp√©rature sur le pH de l‚Äôeau Contexte : Une √©quipe d‚Äô√©tudiants en chimie a r√©alis√© une s√©rie de mesures du pH d‚Äôun √©chantillon d‚Äôeau √† diff√©rentes temp√©ratures, √† raison de 3 mesures par temp√©rature. Les donn√©es ont √©t√© consign√©es dans un fichier CSV.\nContenu du fichier ph_mesures.csv :\nTemp√©rature (¬∞C),Mesure1,Mesure2,Mesure3 10,7.12,7.10,7.13 15,7.05,7.06,7.04 20,6.98,6.97,6.99 25,6.92,6.91,6.93 30,6.85,6.86,6.87\rConsignes Lecture du fichier :\nUtiliser Python (avec csv ou pandas) pour lire les donn√©es. Traitement des donn√©es :\nCalculer la moyenne du pH pour chaque temp√©rature. Conserver les r√©sultats dans une nouvelle structure de donn√©es (liste ou dictionnaire). Analyse simple :\nIdentifier s‚Äôil y a une tendance du pH en fonction de la temp√©rature. Ajouter une colonne ‚ÄúMoyenne_pH‚Äù aux donn√©es. Affichage des r√©sultats :\nAfficher les r√©sultats dans une table lisible. √âcrire les r√©sultats dans un nouveau fichier CSV : ph_moyennes.csv. Extension (facultative) :\nTracer un graphique temp√©rature vs moyenne du pH √† l‚Äôaide de matplotlib. Livrable attendu : Un script Python complet et bien comment√©, ainsi qu‚Äôun fichier CSV de sortie contenant les moyennes.\nDiscussion en √©quipe (20 minutes) : En petits groupes (2-3), comparer les r√©sultats, discuter de la fiabilit√© des mesures et de l‚Äôimpact de la temp√©rature sur le pH de l‚Äôeau. Chaque √©quipe propose une conclusion en 2-3 phrases √† partager au groupe.",
    "description": "Objectif p√©dagogique Apprendre √† lire et traiter un fichier contenant des donn√©es exp√©rimentales, effectuer des calculs simples, et produire un r√©sum√© statistique √† l‚Äôaide de Python.\nExercice 1 : Analyse de donn√©es de temp√©rature Contexte : Un technicien a mesur√© la temp√©rature d‚Äôun liquide toutes les 5 minutes pendant 30 minutes. Les donn√©es sont enregistr√©es dans un fichier CSV.\n√âtapes :\nT√©l√©charger et lire le fichier donnees_temp.csv fourni par l‚Äôenseignant.",
    "tags": [],
    "title": "Activit√© 11 - Traitement de r√©sultats de laboratoire",
    "uri": "/semaine11/atelier/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences",
    "content": "Objectifs d‚Äôapprentissage Importer la biblioth√®que NumPy Utiliser les fonctions de NumPy pour cr√©er des tableaux (1D, 2D) Utiliser les fonctions math√©matiques de NumPy pour obtenir des statistiques sur les donn√©es Ajouter une droite sur un graphique (r√©gression lin√©aire) Calculer une droite de r√©gression (y = a¬∑x + b) Extraire la pente, l‚Äôordonn√©e √† l‚Äôorigine, le R¬≤, l‚Äôerreur-type et la p-valeur √âvaluer la qualit√© de l‚Äôajustement avec le coefficient de d√©termination Importer la biblioth√®que Avant d‚Äôutiliser NumPy, il faut l‚Äôimporter au d√©but de votre script ou notebook :\nimport numpy as np\r1. Cr√©er un tableau NumPy (np.array()) Un tableau NumPy est une structure efficace pour manipuler des s√©ries de donn√©es num√©riques (ex : mesures, positions, temp√©ratures‚Ä¶).\n# Cr√©er un tableau √† partir d‚Äôune liste mesures = np.array([3.2, 4.1, 2.9, 5.0]) print(mesures)\rR√©sultat :\n[3.2 4.1 2.9 5. ]\r2. Fonctions math√©matiques statistiques utiles Somme np.sum(mesures) # Total des valeurs\rMoyenne np.mean(mesures) # Moyenne des valeurs\r√âcart-type (standard deviation) np.std(mesures) # Mesure de la dispersion des donn√©es\rTableau rempli d‚Äôune m√™me valeur np.full(4, 0.5) # Cr√©e un tableau [0.5, 0.5, 0.5, 0.5]\rnp.zeros((2, 3)) # Cr√©e un tableau de 2 lignes et 3 colonnes rempli de 0\rnp.ones((3, 2)) # Cr√©e un tableau de 3 lignes et 2 colonnes rempli de 1\rValeurs espac√©es r√©guli√®rement (utile pour les graphiques) np.linspace(0, 10, 5) # Cr√©e un tableau de 5 valeurs (saut de 5) : [ 0. 2.5 5. 7.5 10. ]\rnp.arange(0, 10, 2) # Cr√©e un tableau avec les nombres pairs de 0 √† 10 exclu : [0 2 4 6 8] 3. Op√©rations vectorielles (rapides et simples) L‚Äôint√©r√™t principal de NumPy : on peut faire des op√©rations sur tout un tableau en une seule ligne.\nx = np.array([1, 2, 3]) y = np.array([4, 5, 6])\rAddition √©l√©ment par √©l√©ment : x + y # [5 7 9]\rSoustraction : y - x # [3 3 3]\rMultiplication par un scalaire : x * 10 # [10 20 30]\rDivision : y / 2 # [2. 2.5 3. ]\rExemple complet : hauteurs = np.array([165, 172, 180, 158]) moy = np.mean(hauteurs) ecart = np.std(hauteurs) print(\"Moyenne :\", moy) print(\"√âcart-type :\", ecart) # Centrer les donn√©es hauteurs_centrees = hauteurs - moy print(\"Hauteurs centr√©es :\", hauteurs_centrees)\rPause 5 minutes R√©gression lin√©aire simple avec SciPy 1. Importation de la fonction from scipy.stats import linregress\r2. Donn√©es On part de deux listes (ou tableaux) de valeurs num√©riques :\nx = [1, 2, 3, 4, 5] # Variable ind√©pendante y = [2.1, 4.0, 5.9, 8.2, 10.1] # Variable d√©pendante\r3. R√©gression lin√©aire Code : resultats = linregress(x, y)\rLa fonction retourne les informations suivantes :\n√âl√©ment Signification slope pente (a) intercept ordonn√©e √† l‚Äôorigine (b) rvalue coefficient de corr√©lation pvalue test statistique de validit√© stderr erreur-type sur la pente Exemple : from scipy.stats import linregress x = [1, 2, 3, 4] y = [2.0, 4.1, 6.0, 7.9] res = linregress(x, y) print(\"Pente :\", res.slope) print(\"Ordonn√©e √† l‚Äôorigine :\", res.intercept) print(\"r :\", res.rvalue) print(\"R¬≤ :\", res.rvalue**2) print(\"Erreur-type :\", res.stderr) print(\"p-valeur :\", res.pvalue)\r4. √âquation de la droite L‚Äô√©quation ajust√©e est :\ny = slope * x + intercept\rOn peut l‚Äôutiliser pour tracer la droite ou pr√©dire des valeurs.\n5. √âvaluer la concordance (qualit√© de l‚Äôajustement) Coefficient de d√©termination : R2 = res.rvalue ** 2\rR¬≤ proche de 1 ‚Üí tr√®s bon ajustement R¬≤ proche de 0 ‚Üí pas de relation lin√©aire R√©sum√© minimal T√¢che Syntaxe Importer from scipy.stats import linregress Calculer la r√©gression res = linregress(x, y) Obtenir la pente res.slope Obtenir l‚Äôintercept res.intercept Obtenir R¬≤ res.rvalue ** 2 Obtenir l‚Äôerreur-type res.stderr Obtenir la p-valeur res.pvalue Exercice guid√© üîß Exercice ‚Äì Ajuster une droite √ânonc√© : Pour x = [0, 1, 2, 3] et y = [1, 2.2, 3.9, 6.0] :\nCalcule la r√©gression lin√©aire Affiche l‚Äô√©quation de la droite (y = ax + b) Affiche R¬≤ Solution :\nfrom scipy.stats import linregress x = [0, 1, 2, 3] y = [1, 2.2, 3.9, 6.0] res = linregress(x, y) print(f\"√âquation : y = {res.slope:.2f}x + {res.intercept:.2f}\") print(f\"R¬≤ = {res.rvalue**2:.4f}\")\rüß™ Python scientifique ‚Äì NumPy avec exercices guid√©s üì¶ 1. Importer NumPy import numpy as np\rüî¢ 2. Cr√©er un tableau NumPy üìò Exemple : mesures = np.array([3.2, 4.1, 2.9, 5.0]) print(mesures)\rüß™ Exercice 1 : Cr√©e un tableau nomm√© temperatures contenant les valeurs : [21.1, 19.5, 22.3, 20.7, 23.0] et affiche-le.\n# Ton code ici\rüßÆ 3. Fonctions math√©matiques üìò Exemple : np.mean(mesures) # Moyenne np.std(mesures) # √âcart-type np.full(4, 0.5) # [0.5, 0.5, 0.5, 0.5] np.linspace(0, 10, 5) # [0. 2.5 5. 7.5 10.]\rüß™ Exercice 2 : Utilise le tableau temperatures pour :\nCalculer la moyenne Calculer l‚Äô√©cart-type # Ton code ici\rüß™ Exercice 3 : Cr√©e un tableau nomm√© barres_d_erreur rempli de 0.5, de m√™me longueur que temperatures.\n# Ton code ici\rüß™ Exercice 4 : Cr√©e un tableau de 6 valeurs √©galement espac√©es entre 0 et 100, nomm√© x_positions.\n# Ton code ici\r‚ûó 4. Op√©rations vectorielles üìò Exemple : x = np.array([1, 2, 3]) y = np.array([4, 5, 6]) x + y # [5 7 9] x * 2 # [2 4 6] y / 2 # [2. 2.5 3. ]\rüß™ Exercice 5 : Cr√©e un tableau decalage = temperatures - 20. Que signifie ce tableau ?\n# Ton code ici\rüß™ Exercice 6 : Multiplie chaque valeur de temperatures par 1.8 et ajoute 32 pour obtenir la temp√©rature en Fahrenheit.\n# Ton code ici\rüß™ Exercice 7 (r√©vision libre) : Cr√©e deux tableaux NumPy : a = [1, 3, 5, 7] et b = [2, 4, 6, 8] Fais les op√©rations suivantes :\nAddition Soustraction Multiplication par un scalaire # Ton code ici",
    "description": "Objectifs d‚Äôapprentissage Importer la biblioth√®que NumPy Utiliser les fonctions de NumPy pour cr√©er des tableaux (1D, 2D) Utiliser les fonctions math√©matiques de NumPy pour obtenir des statistiques sur les donn√©es Ajouter une droite sur un graphique (r√©gression lin√©aire) Calculer une droite de r√©gression (y = a¬∑x + b) Extraire la pente, l‚Äôordonn√©e √† l‚Äôorigine, le R¬≤, l‚Äôerreur-type et la p-valeur √âvaluer la qualit√© de l‚Äôajustement avec le coefficient de d√©termination Importer la biblioth√®que Avant d‚Äôutiliser NumPy, il faut l‚Äôimporter au d√©but de votre script ou notebook :",
    "tags": [],
    "title": "Les tableaux NumPy et graphiques avanc√©s",
    "uri": "/semaine11/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences¬†\u003e¬†\rManipulation de tableaux avec Pandas",
    "content": "Parfait‚ÄØ! Voici une s√©rie d‚Äôexercices pr√©paratoires progressifs, organis√©s par bloc de comp√©tences, pour bien pr√©parer tes √©tudiant¬∑es au projet ADN.\nüîÅ Bloc A ‚Äì Programmation de base en Python üß™ Exercice A1 ‚Äî Comparaison de deux s√©quences # Compl√®te la fonction pour comparer deux s√©quences de m√™me longueur. # Un caract√®re \"?\" agit comme un joker qui compte toujours comme une correspondance. def comparer(seq1, seq2): correspondance = 0 for a, b in zip(seq1, seq2): if a == b or a == \"?\" or b == \"?\": correspondance += 1 return correspondance / len(seq1) * 100 # Exemple print(comparer(\"A?CGT\", \"AGCGT\")) # Devrait afficher 100.0\rüìä Bloc B ‚Äì Pandas : tableaux et moyennes üß™ Exercice B1 ‚Äî Cr√©er et analyser un tableau import pandas as pd donnees = { \"Nom\": [\"Suspect A\", \"Suspect B\", \"Suspect C\"], \"Locus_1\": [90, 70, 80], \"Locus_2\": [85, 75, 60], \"Locus_3\": [88, 72, 65] } df = pd.DataFrame(donnees) # 1. Ajoute une colonne moyenne # 2. Trie le tableau par la colonne moyenne, du plus haut au plus bas\rüìà Bloc C ‚Äì Visualisation avec Matplotlib üß™ Exercice C1 ‚Äî Diagramme √† barres import matplotlib.pyplot as plt noms = [\"A\", \"B\", \"C\"] scores = [87, 75, 68] plt.bar(noms, scores) plt.title(\"Score moyen par suspect\") plt.xlabel(\"Suspects\") plt.ylabel(\"Pourcentage de correspondance\") plt.show()\rüß™ Exercice C2 ‚Äî Ajout de barres d‚Äôerreur import numpy as np incertitudes = [5, 6, 4] plt.errorbar(noms, scores, yerr=incertitudes, fmt=\"o\", capsize=5) plt.title(\"Score moyen avec barres d‚Äôerreur\") plt.grid(True) plt.show()\rüìê Bloc D ‚Äì R√©gression lin√©aire avec SciPy üß™ Exercice D1 ‚Äî R√©gression entre deux loci from scipy.stats import linregress locus1 = [90, 70, 80] locus2 = [85, 75, 60] slope, intercept, r, p, std_err = linregress(locus1, locus2) print(f\"Pente : {slope:.2f}, Intercept : {intercept:.2f}, R¬≤ = {r**2:.3f}, erreur = {std_err:.2f}\")\rüß™ Exercice D2 ‚Äî Tracer la r√©gression import numpy as np import matplotlib.pyplot as plt x = np.array(locus1) y = np.array(locus2) plt.plot(x, y, \"o\", label=\"Donn√©es\") plt.plot(x, slope*x + intercept, \"r-\", label=\"R√©gression\") plt.xlabel(\"Locus 1\") plt.ylabel(\"Locus 2\") plt.legend() plt.title(\"R√©gression lin√©aire entre loci\") plt.grid(True) plt.show()\rSouhaites-tu :\nüìÅ Que je rassemble tous ces exercices dans un notebook .ipynb pr√™t √† remettre ? üìù Une fiche d‚Äôinstructions pour les √©l√®ves avec des zones √† compl√©ter ? üß† Des exercices de r√©flexion ou quiz sur les erreurs fr√©quentes ?",
    "description": "Parfait‚ÄØ! Voici une s√©rie d‚Äôexercices pr√©paratoires progressifs, organis√©s par bloc de comp√©tences, pour bien pr√©parer tes √©tudiant¬∑es au projet ADN.\nüîÅ Bloc A ‚Äì Programmation de base en Python üß™ Exercice A1 ‚Äî Comparaison de deux s√©quences # Compl√®te la fonction pour comparer deux s√©quences de m√™me longueur. # Un caract√®re \"?\" agit comme un joker qui compte toujours comme une correspondance. def comparer(seq1, seq2): correspondance = 0 for a, b in zip(seq1, seq2): if a == b or a == \"?",
    "tags": [],
    "title": "exercices pr√©paratoires progressifs",
    "uri": "/semaine12/exercices_preparatoires/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences¬†\u003e¬†\rManipulation de tableaux avec Pandas",
    "content": "Voici la grille d‚Äô√©valuation compl√®te sur 100 points, mise √† jour avec pond√©ration ajust√©e pour refl√©ter l‚Äôimportance p√©dagogique des nouveaux volets :\nüßæ Grille d‚Äô√©valuation ‚Äì Projet scientifique Python avec ADN (.ipynb) ‚Äì /100 Volet Crit√®res d‚Äô√©valuation Points 1. Planification Objectifs, √©tapes, structure claire du notebook /10 2. Code fonctionnel Syntaxe correcte, fonctions bien d√©finies, logique claire, variables bien nomm√©es /15 3. Comparaison ADN Fonction de comparaison tol√©rante (?), application sur plusieurs loci /10 4. R√©sultats tabul√©s Calcul des moyennes, tableaux bien pr√©sent√©s et tri√©s /10 5. Visualisation de base Diagramme √† barres (plt.bar), axes √©tiquet√©s, lisibilit√© /10 6. Programmation lettr√©e Explications dans les cellules Markdown, titres, sections, clart√© du cheminement /10 7. Analyse critique finale Interpr√©tation des r√©sultats, r√©flexion sur les limites, pistes d‚Äôam√©lioration /10 8. Code ex√©cutable Toutes les cellules s‚Äôex√©cutent sans erreur (v√©rification automatique) /5 9. R√©gression lin√©aire Utilisation de scipy, interpr√©tation des r√©sultats, lien avec le contexte /10 10. Barres d‚Äôerreur Affichage d‚Äôincertitudes avec errorbar, int√©gration visuelle et scientifique /10 | | | /100 |\nSouhaites-tu maintenant :\nüìÑ La version Word ou PDF t√©l√©chargeable de cette grille ? üßë‚Äçüéì Une version corrig√©e exemple remplie pour un √©tudiant mod√®le ?",
    "description": "Voici la grille d‚Äô√©valuation compl√®te sur 100 points, mise √† jour avec pond√©ration ajust√©e pour refl√©ter l‚Äôimportance p√©dagogique des nouveaux volets :\nüßæ Grille d‚Äô√©valuation ‚Äì Projet scientifique Python avec ADN (.ipynb) ‚Äì /100 Volet Crit√®res d‚Äô√©valuation Points 1. Planification Objectifs, √©tapes, structure claire du notebook /10 2. Code fonctionnel Syntaxe correcte, fonctions bien d√©finies, logique claire, variables bien nomm√©es /15 3. Comparaison ADN Fonction de comparaison tol√©rante (?), application sur plusieurs loci /10 4.",
    "tags": [],
    "title": "Grille d'√©valuation",
    "uri": "/semaine12/grille/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences",
    "content": "Objectifs d‚Äôapprentissage Cr√©er un tableau de donn√©es (DataFrame) Lire un fichier CSV Parcourir les lignes d‚Äôun tableau Faire des calculs sur les colonnes Ajouter une nouvelle colonne 1. Importer Pandas Avant toute manipulation :\nimport pandas as pd\r2. Cr√©er un DataFrame √† la main data = { \"Nom\": [\"Alice\", \"Bob\", \"Chlo√©\"], \"Note\": [88, 72, 91] } df = pd.DataFrame(data)\rOn cr√©e un tableau √† partir d‚Äôun dictionnaire : chaque cl√© devient une colonne.\n3. Lire un fichier CSV df = pd.read_csv(\"fichier.csv\")\rLe fichier doit √™tre dans le m√™me dossier, ou donner le chemin complet.\n4. Parcourir un DataFrame Avec .iterrows() : for index, row in df.iterrows(): print(row[\"Nom\"], row[\"Note\"])\rOn peut acc√©der √† chaque ligne comme un dictionnaire (row[\"Nom\"]).\n5. Calculs sur une colonne But Syntaxe Moyenne df[\"Note\"].mean() Arrondir df[\"Note\"].round(1) Trier df.sort_values(\"Note\", ascending=False) Exemple : moy = df[\"Note\"].mean() print(\"Moyenne :\", moy)\r6. Ajouter une nouvelle colonne On peut cr√©er une colonne calcul√©e √† partir des autres.\nExemple : df[\"Note_sur_10\"] = df[\"Note\"] / 10\rCela ajoute une nouvelle colonne au tableau.\nR√©sum√© minimal Action Syntaxe Cr√©er un DataFrame pd.DataFrame({...}) Lire CSV pd.read_csv(\"fichier.csv\") Parcourir les lignes for i, row in df.iterrows(): Moyenne df[\"col\"].mean() Arrondir df[\"col\"].round(1) Trier df.sort_values(\"col\") Ajouter une colonne df[\"nouvelle\"] = ... Exercices guid√©s Exercice 1 ‚Äì Lire et afficher √ânonc√© : Lis un fichier donnees.csv contenant les colonnes Nom et Valeur. Affiche chaque nom et sa valeur.\nSolution :\nimport pandas as pd df = pd.read_csv(\"donnees.csv\") for i, row in df.iterrows(): print(row[\"Nom\"], \"‚Üí\", row[\"Valeur\"])\rExercice 2 ‚Äì Calculer une colonne normalis√©e √ânonc√© : √Ä partir de la colonne Valeur, cr√©e une colonne Valeur_sur_100 qui est Valeur / 100.\nSolution :\ndf[\"Valeur_sur_100\"] = df[\"Valeur\"] / 100\rExercice 3 ‚Äì Trier et afficher √ânonc√© : Trie les donn√©es selon la colonne Valeur en ordre d√©croissant et affiche-les.\nSolution :\ndf = df.sort_values(\"Valeur\", ascending=False) print(df)",
    "description": "Objectifs d‚Äôapprentissage Cr√©er un tableau de donn√©es (DataFrame) Lire un fichier CSV Parcourir les lignes d‚Äôun tableau Faire des calculs sur les colonnes Ajouter une nouvelle colonne 1. Importer Pandas Avant toute manipulation :\nimport pandas as pd\r2. Cr√©er un DataFrame √† la main data = { \"Nom\": [\"Alice\", \"Bob\", \"Chlo√©\"], \"Note\": [88, 72, 91] } df = pd.DataFrame(data)\rOn cr√©e un tableau √† partir d‚Äôun dictionnaire : chaque cl√© devient une colonne.",
    "tags": [],
    "title": "Manipulation de tableaux avec Pandas",
    "uri": "/semaine12/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences¬†\u003e¬†\rManipulation de tableaux avec Pandas",
    "content": "Voici une liste compl√®te et structur√©e de toutes les notions, fonctions et m√©thodes que les √©tudiant¬∑es doivent avoir apprises avant de faire le projet ADN. Elle couvre la programmation de base, les biblioth√®ques scientifiques et les comp√©tences analytiques sp√©cifiques au projet.\nüß† Notions et outils n√©cessaires pour r√©ussir le projet üßæ A. Programmation de base en Python Th√®me Notions, fonctions, m√©thodes Variables \u0026 types int, float, str, bool, list, dict Structures de contr√¥le if, elif, else, for, while, break, continue Fonctions personnalis√©es def, return, param√®tres et port√©e locale Manipulation de cha√Ænes str.lower(), str.replace(), in, ==, slicing, boucles sur cha√Ænes Listes \u0026 tableaux imbriqu√©s acc√®s √† un √©l√©ment, boucles imbriqu√©es, conditions dans les listes Gestion des erreurs simples (optionnel) try/except pour √©viter les crashs en cas d‚Äôerreur üìä B. Manipulation de donn√©es avec Pandas Th√®me Fonctions / m√©thodes Cr√©er un DataFrame pd.DataFrame(...) Lire un fichier CSV pd.read_csv(...) Parcourir un DataFrame .iterrows(), indexation par colonne Calculs sur colonnes .mean(), .round(), .sort_values() Cr√©er des colonnes df[\"nouvelle_colonne\"] = ... üßÆ C. NumPy pour le calcul scientifique Th√®me Fonctions / m√©thodes Cr√©er des tableaux NumPy np.array(...) Fonctions math√©matiques np.mean(), np.std(), np.full(), np.linspace() Op√©rations vectorielles tableau ¬± valeur, array1 + array2, etc. üìà D. Visualisation avec Matplotlib Th√®me Fonctions / m√©thodes Graphique √† barres plt.bar(...), plt.xticks(...), plt.title(...), plt.legend() Graphique avec barres d‚Äôerreur plt.errorbar(x, y, xerr, yerr) Tracer une droite de r√©gression plt.plot(...), affichage de l‚Äô√©quation Affichage plt.show(), plt.grid(True), plt.tight_layout() üìê E. Statistiques et r√©gression avec SciPy Th√®me Fonctions / m√©thodes R√©gression lin√©aire simple from scipy.stats import linregress Extraire les r√©sultats slope, intercept, r_value, std_err, p_value √âvaluer la concordance r_value ** 2 pour le coefficient de d√©termination üìì F. Programmation lettr√©e et structuration du notebook Th√®me Pratiques attendues Markdown Titres (#), sous-titres, explication des sections S√©paration claire Th√©orie, code, interpr√©tation Commentaires # dans le code + commentaires en Markdown pour chaque bloc Ex√©cution sans erreur Toutes les cellules ex√©cut√©es du d√©but √† la fin sans blocage üß™ R√©sum√© des comp√©tences transversales üí° Analyser un probl√®me scientifique üß∞ Choisir les bons outils (librairie, type de graphique) üìà Repr√©senter des incertitudes et des relations math√©matiques üßë‚Äçüî¨ Interpr√©ter les r√©sultats dans un contexte r√©aliste üßπ Produire un rapport structur√©, scientifique et rigoureux Souhaites-tu maintenant :\nüìÑ Une fiche synth√®se imprimable (Word ou PDF) pour les √©tudiants ? üí° Des exercices pr√©paratoires pour pratiquer chaque bloc avant le projet ? üéì Un auto√©valuation guid√©e √† remettre avant le projet ?",
    "description": "Voici une liste compl√®te et structur√©e de toutes les notions, fonctions et m√©thodes que les √©tudiant¬∑es doivent avoir apprises avant de faire le projet ADN. Elle couvre la programmation de base, les biblioth√®ques scientifiques et les comp√©tences analytiques sp√©cifiques au projet.\nüß† Notions et outils n√©cessaires pour r√©ussir le projet üßæ A. Programmation de base en Python Th√®me Notions, fonctions, m√©thodes Variables \u0026 types int, float, str, bool, list, dict Structures de contr√¥le if, elif, else, for, while, break, continue Fonctions personnalis√©es def, return, param√®tres et port√©e locale Manipulation de cha√Ænes str.",
    "tags": [],
    "title": "Notions et outils n√©cessaires pour r√©ussir le projet",
    "uri": "/semaine12/notions_utiles_necessaires/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences¬†\u003e¬†\rManipulation de tableaux avec Pandas",
    "content": "Voici l‚Äô√©nonc√© du projet mis √† jour avec les nouveaux √©l√©ments (r√©gression lin√©aire, barres d‚Äôerreur, incertitudes), tout en conservant le th√®me d‚Äôenqu√™te ADN.\nüïµÔ∏è‚Äç‚ôÄÔ∏è Projet int√©grateur ‚Äì Enqu√™te scientifique par analyse d‚ÄôADN Programmation scientifique en Python ‚Äî Valeur : 40‚ÄØ% üîé Contexte Une sc√®ne de crime a √©t√© d√©couverte dans un laboratoire. Des √©chantillons biologiques (contenant de l‚ÄôADN partiel) ont √©t√© r√©cup√©r√©s sur place, mais les s√©quences sont incompl√®tes ou partiellement contamin√©es.\nLes enqu√™teurs ont recueilli l‚ÄôADN de 4 suspects. L‚Äô√©quipe m√©dico-l√©gale a analys√© trois loci distincts (zones de l‚ÄôADN) pour chaque individu. Vous avez √©t√© mandat√© pour identifier le ou les suspects les plus susceptibles de correspondre √† l‚Äô√©chantillon retrouv√©.\nMais l‚Äôenqu√™te ne s‚Äôarr√™te pas l√† : afin de renforcer l‚Äôanalyse, vous devez √©galement √©valuer la coh√©rence des correspondances entre loci gr√¢ce √† des m√©thodes statistiques (r√©gression lin√©aire) et tenir compte de l‚Äôincertitude biologique dans les s√©quences.\nüéØ T√¢che attendue Vous devez produire un rapport scientifique interactif (format .ipynb) dans lequel vous :\n1. Nettoyez, analysez et structurez les donn√©es ADN Comparer les s√©quences des suspects √† celles de la sc√®ne de crime malgr√© les caract√®res manquants (?). Calculer les pourcentages de correspondance pour chaque locus et la moyenne globale. 2. Pr√©sentez vos r√©sultats G√©n√©rer un tableau synth√®se des taux de correspondance. Identifier le ou les suspects les plus proches du profil g√©n√©tique. 3. Repr√©sentez les donn√©es avec des graphiques clairs Cr√©er un diagramme √† barres montrant la correspondance pour chaque locus et chaque suspect. Ajouter des barres d‚Äôerreur illustrant une incertitude estim√©e (ex: ¬±5‚ÄØ%). 4. Utilisez la r√©gression lin√©aire (scipy) √âvaluer la relation entre les scores de deux loci (ex. : Locus_1 vs Locus_2). Tracer la droite de r√©gression avec l‚Äô√©quation et l‚Äôincertitude sur la pente. 5. Discutez vos r√©sultats Interpr√©tez vos r√©sultats avec rigueur. Distinguez les suspects potentiels, discutez les limites m√©thodologiques et biologiques. Proposez des pistes pour am√©liorer la pr√©cision de l‚Äôanalyse. üíª Contraintes techniques Utiliser Python avec Jupyter Notebook (.ipynb) Biblioth√®ques obligatoires : pandas, numpy, matplotlib, scipy Utiliser des fonctions personnalis√©es (def) Respecter les normes de programmation lettr√©e (sections Markdown, titres, explications) ‚è≥ Dur√©e Devoir r√©alis√© sur une p√©riode de 6 √† 8 heures en classe (accompagn√©e ou autonome) üì• Remise Remettre un seul fichier .ipynb avec toutes les cellules ex√©cut√©es Facultatif : remettre une version PDF export√©e du notebook Souhaites-tu que je :\nüìÑ Le convertisse en document Word ou PDF ? üß™ Joigne √† l‚Äô√©nonc√© les fichiers .csv d‚Äôexemple et un .ipynb de d√©part ? üí° Ajoute une version ‚Äúniveau d√©butant all√©g√©‚Äù pour une adaptation p√©dagogique ?",
    "description": "Voici l‚Äô√©nonc√© du projet mis √† jour avec les nouveaux √©l√©ments (r√©gression lin√©aire, barres d‚Äôerreur, incertitudes), tout en conservant le th√®me d‚Äôenqu√™te ADN.\nüïµÔ∏è‚Äç‚ôÄÔ∏è Projet int√©grateur ‚Äì Enqu√™te scientifique par analyse d‚ÄôADN Programmation scientifique en Python ‚Äî Valeur : 40‚ÄØ% üîé Contexte Une sc√®ne de crime a √©t√© d√©couverte dans un laboratoire. Des √©chantillons biologiques (contenant de l‚ÄôADN partiel) ont √©t√© r√©cup√©r√©s sur place, mais les s√©quences sont incompl√®tes ou partiellement contamin√©es.",
    "tags": [],
    "title": "Projet int√©grateur",
    "uri": "/semaine12/projet_integrateur/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Travail sur le projet final.",
    "uri": "/semaine14/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences",
    "content": "Vous devez remettre votre code : le fichier prenomNom.ipynb au plus tard ce soir √† 23h59.",
    "description": "Vous devez remettre votre code : le fichier prenomNom.ipynb au plus tard ce soir √† 23h59.",
    "tags": [],
    "title": "√âvaluation finale (Projet final)",
    "uri": "/semaine15/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences",
    "content": "Remue-m√©ninges et planification # Fiche de projet final ‚Äì Programmation en sciences avec Python ## Informations de l'√©tudiant - **Nom :** - **Date :** --- ## 1. Titre du projet *(Donne un titre clair et descriptif √† ton projet)* --- ## 2. Objectif du projet *(Explique en une ou deux phrases ce que ton programme permettra d‚Äôanalyser, de simuler ou de r√©soudre.)* --- ## 3. Description du fonctionnement pr√©vu - **Entr√©es attendues :** *(Quelles donn√©es l‚Äôutilisateur devra-t-il fournir?)* - **Traitement effectu√© :** *(Que fera ton programme avec les donn√©es?)* - **Sorties g√©n√©r√©es :** *(Quels r√©sultats ou visualisations seront produits?)* --- ## 4. Plan de d√©veloppement | √âtape | Description | √âch√©ancier pr√©vu | |-------|-------------|------------------| | 1 | | | | 2 | | | | 3 | | | --- ## 5. Fonctions ou modules pr√©vus *(Liste les fonctions ou sections principales de ton programme)* - - - --- ## 6. Obstacles ou questions *(Y a-t-il des √©l√©ments que tu ne ma√Ætrises pas encore? Des donn√©es difficiles √† trouver?)* --- ## 7. Format pr√©vu pour la pr√©sentation finale *(Coche ou indique le format souhait√©)* - [ ] Jupyter Notebook (avec explications dans les cellules Markdown) - [ ] D√©monstration orale en classe - [ ] Capsule vid√©o pr√©enregistr√©e --- ## 8. Autres commentaires *(Facultatif ‚Äì Ajoute tout ce qui pourrait aider √† mieux comprendre ton projet.)*",
    "description": "Remue-m√©ninges et planification # Fiche de projet final ‚Äì Programmation en sciences avec Python ## Informations de l'√©tudiant - **Nom :** - **Date :** --- ## 1. Titre du projet *(Donne un titre clair et descriptif √† ton projet)* --- ## 2. Objectif du projet *(Explique en une ou deux phrases ce que ton programme permettra d‚Äôanalyser, de simuler ou de r√©soudre.)* --- ## 3. Description du fonctionnement pr√©vu - **Entr√©es attendues :** *(Quelles donn√©es l‚Äôutilisateur devra-t-il fournir?",
    "tags": [],
    "title": "Travail sur le projet final",
    "uri": "/semaine13/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences¬†\u003e¬†\rTravail sur le projet final",
    "content": "Consigne du projet final Contexte : Dans ce projet, vous allez analyser l‚Äôimpact de la consommation de caf√©ine sur la fr√©quence cardiaque. Les donn√©es collect√©es concernent la fr√©quence cardiaque de quatre sujets avant et apr√®s consommation de caf√© √† des intervalles de 30 minutes.\nObjectifs Importer et manipuler les donn√©es : Vous allez charger les donn√©es dans un DataFrame pandas √† partir du fichier CSV fourni et effectuer un traitement pour extraire les informations pertinentes. Analyser la variation de la fr√©quence cardiaque apr√®s la consommation de caf√©. Visualiser les tendances de la fr√©quence cardiaque pour chaque sujet avec un graphique lin√©aire, en mettant en √©vidence l‚Äôeffet de la consommation de caf√© sur la fr√©quence cardiaque. Faire des comparaisons entre les sujets et interpr√©ter les r√©sultats. Vous allez calculer des statistiques descriptives (moyenne, √©cart-type) et identifier les variations notables dans les donn√©es. R√©diger une conclusion sur l‚Äôimpact de la caf√©ine sur la fr√©quence cardiaque, en basant votre analyse sur les r√©sultats obtenus. Consignes sp√©cifiques : Lecture et traitement des donn√©es :\nImportez les donn√©es √† l‚Äôaide de pandas et affichez un r√©sum√© des donn√©es. Utilisez numpy pour effectuer des calculs comme la moyenne et l‚Äô√©cart-type de la fr√©quence cardiaque pour chaque sujet avant et apr√®s l‚Äôingestion de caf√©. Cr√©ation des fonctions :\nCr√©ez une fonction variation(frequence) qui calcule les variations de fr√©quence cardiaque entre les mesures (avant et apr√®s). Cr√©ez une fonction analyser_impact(frequences_avant, frequences_apres) qui retourne la diff√©rence moyenne de la fr√©quence cardiaque et des statistiques de variation. Visualisation :\nUtilisez matplotlib pour tracer l‚Äô√©volution de la fr√©quence cardiaque pour chaque sujet avant et apr√®s l‚Äôingestion de caf√©. Ajoutez une ligne horizontale pour la fr√©quence cardiaque moyenne avant consommation et une autre pour la fr√©quence apr√®s consommation. Exportation :\nExportez un fichier CSV contenant les r√©sultats de votre analyse, incluant les variations de fr√©quence cardiaque pour chaque sujet. Donn√©es : Le fichier CSV problematique_1_cafeine.csv contient les donn√©es √† analyser. Il est structur√© comme suit :\nSujet : Nom du sujet (A, B, C, D) Temps (min) : Temps √©coul√© depuis le d√©but de l‚Äôexp√©rience (en minutes) Frequence (bpm) : Fr√©quence cardiaque (battements par minute) Crit√®res d‚Äô√©valuation : Pr√©cision de l‚Äôanalyse : Exactitude des calculs et des interpr√©tations statistiques. Qualit√© du code : Clart√© et organisation du code, utilisation ad√©quate des structures de donn√©es (pandas, numpy). Visualisation : Graphiques clairs et pertinents, avec une bonne utilisation de matplotlib. Clart√© de la conclusion : Interpr√©tation logique des r√©sultats et conclusion sur l‚Äôeffet de la caf√©ine sur la fr√©quence cardiaque. Format du projet : D√©lai : Le projet est √† rendre dans trois semaines (fin de la semaine 15).\nLivrables :\nUn notebook Jupyter contenant le code et les analyses. Le fichier CSV export√© avec les r√©sultats. Un document PDF ou une section dans le notebook avec la conclusion. Ressources : Pandas : https://pandas.pydata.org/ Matplotlib : https://matplotlib.org/",
    "description": "Consigne du projet final Contexte : Dans ce projet, vous allez analyser l‚Äôimpact de la consommation de caf√©ine sur la fr√©quence cardiaque. Les donn√©es collect√©es concernent la fr√©quence cardiaque de quatre sujets avant et apr√®s consommation de caf√© √† des intervalles de 30 minutes.\nObjectifs Importer et manipuler les donn√©es : Vous allez charger les donn√©es dans un DataFrame pandas √† partir du fichier CSV fourni et effectuer un traitement pour extraire les informations pertinentes.",
    "tags": [],
    "title": "Projet: Effet de la caf√©ine sur la fr√©quence cardiaque",
    "uri": "/semaine13/projet1/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences¬†\u003e¬†\rTravail sur le projet final",
    "content": "Consigne du projet final Contexte : Dans ce projet, vous allez analyser la cin√©tique d‚Äôune r√©action chimique en utilisant des donn√©es simul√©es de la concentration d‚Äôun r√©actif au cours du temps. Ces donn√©es vous permettront de d√©terminer la vitesse de la r√©action et d‚Äôobserver l‚Äô√©volution de la concentration.\nObjectifs : Importer et manipuler les donn√©es : Charger les donn√©es √† partir du fichier CSV fourni, puis traiter et pr√©parer les informations pour l‚Äôanalyse. Analyser la cin√©tique de la r√©action chimique : D√©terminer l‚Äô√©volution de la concentration en fonction du temps et estimer des param√®tres de la r√©action (comme la vitesse de r√©action). Visualiser les donn√©es avec un graphique montrant l‚Äô√©volution de la concentration en fonction du temps. R√©diger une conclusion : Bas√©e sur l‚Äôanalyse des r√©sultats, vous devrez expliquer la forme de la courbe de concentration et d√©terminer la nature de la r√©action (par exemple, r√©action de premier ordre, second ordre, etc.). Consignes sp√©cifiques : Lecture et traitement des donn√©es :\nImportez les donn√©es √† l‚Äôaide de pandas et affichez un r√©sum√© des donn√©es. Utilisez numpy pour effectuer des calculs comme la variation moyenne de la concentration entre chaque mesure. Cr√©ation des fonctions :\nCr√©ez une fonction taux_reaction(concentration_initiale, concentration_finale, temps) qui calcule la vitesse de la r√©action en fonction des concentrations initiale et finale et du temps. Cr√©ez une fonction analyse_reaction(temps, concentrations) qui permet d‚Äôanalyser la courbe et de d√©terminer la nature de la r√©action (ordre de r√©action). Visualisation :\nUtilisez matplotlib pour tracer la courbe de la concentration du r√©actif en fonction du temps. Ajoutez une ligne pour la concentration initiale, la concentration finale et tracez la pente de la courbe si applicable. Exportation :\nExportez un fichier CSV contenant les r√©sultats de votre analyse, incluant la concentration du r√©actif √† chaque instant et les vitesses de r√©action calcul√©es. Donn√©es : Le fichier CSV problematique_3_reaction.csv contient les donn√©es √† analyser. Il est structur√© comme suit :\nTemps (s) : Temps √©coul√© depuis le d√©but de la r√©action (en secondes) Concentration (mol/L) : Concentration du r√©actif √† chaque instant de temps mesur√© Crit√®res d‚Äô√©valuation : Pr√©cision de l‚Äôanalyse : Exactitude des calculs et des interpr√©tations des r√©sultats. Qualit√© du code : Clart√© et organisation du code, utilisation appropri√©e des biblioth√®ques (pandas, numpy). Visualisation : Graphiques clairs et pertinents, avec une bonne utilisation de matplotlib. Interpr√©tation des r√©sultats : Excellente capacit√© √† interpr√©ter les donn√©es et √† d√©terminer la nature de la r√©action chimique. Format du projet : D√©lai : Le projet est √† rendre dans trois semaines (fin de la semaine 15).\nLivrables :\nUn notebook Jupyter contenant le code et les analyses. Le fichier CSV export√© avec les r√©sultats. Un document PDF ou une section dans le notebook avec la conclusion sur la cin√©tique de la r√©action. Ressources : Pandas : https://pandas.pydata.org/ Matplotlib : https://matplotlib.org/",
    "description": "Consigne du projet final Contexte : Dans ce projet, vous allez analyser la cin√©tique d‚Äôune r√©action chimique en utilisant des donn√©es simul√©es de la concentration d‚Äôun r√©actif au cours du temps. Ces donn√©es vous permettront de d√©terminer la vitesse de la r√©action et d‚Äôobserver l‚Äô√©volution de la concentration.\nObjectifs : Importer et manipuler les donn√©es : Charger les donn√©es √† partir du fichier CSV fourni, puis traiter et pr√©parer les informations pour l‚Äôanalyse.",
    "tags": [],
    "title": "Projet: Cin√©tique d'une r√©action chimique",
    "uri": "/semaine13/projet2/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences¬†\u003e¬†\rTravail sur le projet final",
    "content": "Consigne du projet final Contexte : Une √©quipe d‚Äô√©tudiants a particip√© √† un programme d‚Äôentra√Ænement visant √† am√©liorer leurs performances en course √† pied. Des tests de temps de course (sur une m√™me distance) ont √©t√© r√©alis√©s avant et apr√®s le programme. Vous devez analyser ces donn√©es pour d√©terminer si le programme a √©t√© efficace.\nObjectifs : Importer et manipuler les donn√©es : Charger les donn√©es √† partir d‚Äôun fichier CSV, puis pr√©parer les donn√©es pour l‚Äôanalyse. Comparer les performances avant et apr√®s l‚Äôentra√Ænement. Visualiser les r√©sultats de mani√®re claire et significative. Interpr√©ter les r√©sultats pour conclure sur l‚Äôefficacit√© du programme d‚Äôentra√Ænement. Consignes sp√©cifiques : Lecture et traitement des donn√©es :\nCharger les donn√©es avec pandas. Calculer la diff√©rence entre les temps ‚Äúavant‚Äù et ‚Äúapr√®s‚Äù pour chaque √©l√®ve. Ajouter une colonne \"Am√©lioration\" (temps avant - temps apr√®s). Cr√©ation de fonctions :\nCr√©ez une fonction calculer_amelioration(df) qui retourne les am√©liorations individuelles et les statistiques globales (moyenne, √©cart-type). Cr√©ez une fonction interpreter_resultats(am√©liorations) qui d√©termine si l‚Äôam√©lioration est significative pour l‚Äôensemble des participants. Visualisation avec matplotlib :\nDiagramme en barres comparant les temps ‚Äúavant‚Äù et ‚Äúapr√®s‚Äù pour chaque √©l√®ve. Histogramme des am√©liorations individuelles. Option : tracer une ligne horizontale repr√©sentant l‚Äôam√©lioration moyenne. Exportation :\nExportez un fichier CSV avec les colonnes suivantes : Nom, Avant, Apr√®s, Am√©lioration. Donn√©es : Le fichier problematique_4_course.csv contient les temps de course (en secondes) de plusieurs √©l√®ves avant et apr√®s un programme d‚Äôentra√Ænement. Colonnes :\nNom Avant (s) Apres (s) Crit√®res d‚Äô√©valuation : Pr√©cision de l‚Äôanalyse : Calculs corrects et coh√©rence des conclusions. Qualit√© du code : Code clair, bien comment√© et bien structur√©. Visualisation : Graphiques clairs, bien √©tiquet√©s, pertinents. Interpr√©tation : Interpr√©tation logique, soutenue par les donn√©es, sur l‚Äôefficacit√© du programme. Format du projet : Dur√©e : Projet √† remettre √† la fin de la semaine 15.\nLivrables :\nUn fichier .ipynb (notebook Jupyter) avec votre analyse compl√®te. Le fichier CSV export√© avec les r√©sultats. Une section ‚ÄúConclusion‚Äù claire dans le notebook ou en fichier PDF s√©par√©.",
    "description": "Consigne du projet final Contexte : Une √©quipe d‚Äô√©tudiants a particip√© √† un programme d‚Äôentra√Ænement visant √† am√©liorer leurs performances en course √† pied. Des tests de temps de course (sur une m√™me distance) ont √©t√© r√©alis√©s avant et apr√®s le programme. Vous devez analyser ces donn√©es pour d√©terminer si le programme a √©t√© efficace.\nObjectifs : Importer et manipuler les donn√©es : Charger les donn√©es √† partir d‚Äôun fichier CSV, puis pr√©parer les donn√©es pour l‚Äôanalyse.",
    "tags": [],
    "title": "Projet: Analyse de l‚Äôimpact de l'entra√Ænement sur la performance physique",
    "uri": "/semaine13/projet3/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences¬†\u003e¬†\rTravail sur le projet final",
    "content": "Consigne du projet final Contexte : Vous avez men√© une exp√©rience de croissance bact√©rienne dans un milieu nutritif contr√¥l√©. La concentration bact√©rienne a √©t√© mesur√©e √† diff√©rents moments. Vous devez analyser ces donn√©es pour comprendre la dynamique de croissance et d√©terminer le mod√®le le plus appropri√© (lin√©aire, exponentiel, logistique).\nObjectifs : Charger et manipuler les donn√©es exp√©rimentales. Analyser la progression de la population bact√©rienne dans le temps. Visualiser les r√©sultats pour identifier un mod√®le de croissance. Tirer des conclusions sur les caract√©ristiques de la croissance. Consignes sp√©cifiques : Lecture et traitement des donn√©es :\nCharger un fichier CSV contenant les mesures de concentration bact√©rienne (cfu/mL) en fonction du temps (heures). V√©rifier les types de donn√©es et nettoyer si n√©cessaire. Cr√©ation de fonctions :\nUne fonction calculer_taux_croissance(df) pour calculer le taux de croissance moyen entre chaque intervalle de temps. Une fonction modeliser_croissance(df) pour proposer un mod√®le de croissance √† partir des donn√©es observ√©es. Visualisation avec matplotlib :\nGraphique de la croissance (courbe de concentration vs. temps). Visualisation du taux de croissance par intervalle. Comparaison avec un mod√®le math√©matique si applicable (optionnel). Exportation :\nExport d‚Äôun fichier CSV contenant le temps, la concentration, les taux de croissance entre les mesures. Donn√©es : Le fichier problematique_1_croissance.csv contient deux colonnes :\nTemps (h) Concentration (cfu/mL) Crit√®res d‚Äô√©valuation : Analyse correcte des donn√©es : traitements justes, interpr√©tations logiques. Clart√© et structure du code. Pertinence des visualisations et interpr√©tations. Capacit√© √† proposer une mod√©lisation simple. Format du projet : Dur√©e : √Ä remettre √† la fin de la semaine 15.\nLivrables :\nUn notebook Jupyter (.ipynb) avec votre travail complet. Le fichier CSV export√© avec vos r√©sultats. Une section de conclusion expliquant la nature de la croissance observ√©e.",
    "description": "Consigne du projet final Contexte : Vous avez men√© une exp√©rience de croissance bact√©rienne dans un milieu nutritif contr√¥l√©. La concentration bact√©rienne a √©t√© mesur√©e √† diff√©rents moments. Vous devez analyser ces donn√©es pour comprendre la dynamique de croissance et d√©terminer le mod√®le le plus appropri√© (lin√©aire, exponentiel, logistique).\nObjectifs : Charger et manipuler les donn√©es exp√©rimentales. Analyser la progression de la population bact√©rienne dans le temps. Visualiser les r√©sultats pour identifier un mod√®le de croissance.",
    "tags": [],
    "title": "Projet: Analyse de la croissance bact√©rienne",
    "uri": "/semaine13/projet4/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Solutions des exercices",
    "uri": "/solutions_exercices/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Solutions des ateliers",
    "uri": "/solutions_ateliers/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences",
    "content": "Semaine 1 Cours Mettre √† jour infos tableau planification de cours Pr√©parer la d√©mo sur Anaconda et Jupyter Pr√©parer guide installation sur Windows 11: https://www.datacamp.com/fr/tutorial/installing-anaconda-windows Semaine 2 Cours R√©viser Activit√© 2.1 Cr√©er ipynb Activit√© 2.2 Contexte √† confirmer Mise en forme des formule V√©rifier ipynb Semaine 3 Cours Activit√© 3 Semaine 4 Cours Activit√© 4 Semaine 5 Cours Activit√© 5 Semaine 6 Cours Activit√© 6",
    "description": "Semaine 1 Cours Mettre √† jour infos tableau planification de cours Pr√©parer la d√©mo sur Anaconda et Jupyter Pr√©parer guide installation sur Windows 11: https://www.datacamp.com/fr/tutorial/installing-anaconda-windows Semaine 2 Cours R√©viser Activit√© 2.1 Cr√©er ipynb Activit√© 2.2 Contexte √† confirmer Mise en forme des formule V√©rifier ipynb Semaine 3 Cours Activit√© 3 Semaine 4 Cours Activit√© 4 Semaine 5 Cours Activit√© 5 Semaine 6 Cours Activit√© 6",
    "tags": [],
    "title": "√Ä FAIRE",
    "uri": "/afaire/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Categories",
    "uri": "/categories/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences¬†\u003e¬†\r√Ä FAIRE",
    "content": "Probl√®me : Probabilit√© que la fl√©chette atteigne la zone blanche Structure de la cible : Zone noire : cercle de rayon 2 cm Zone blanche : anneau entre rayon 2 cm et 3 cm Zone grise : anneau entre rayon 3 cm et 6 cm √âtape 1 ‚Äî Aire totale de la cible La cible est un disque de rayon 6 cm : Aire totale = œÄ √ó 6¬≤ = 36œÄ cm¬≤\n√âtape 2 ‚Äî Aire de la zone blanche La zone blanche est un anneau entre les rayons 2 cm et 3 cm. Donc : Aire blanche = œÄ √ó (3¬≤ - 2¬≤) = œÄ √ó (9 - 4) = 5œÄ cm¬≤\n√âtape 3 ‚Äî Probabilit√© que la fl√©chette tombe dans la zone blanche On suppose que la fl√©chette touche n‚Äôimporte quelle partie de la cible avec une probabilit√© uniforme.\nDonc : Probabilit√© = Aire blanche / Aire totale = (5œÄ) / (36œÄ) = 5 / 36\nR√©ponse finale : La probabilit√© que la fl√©chette atteigne la zone blanche est :\n5 / 36, soit environ 13,9 %.\nSouhaites-tu aussi les formules dans un format Word ou PDF plus lisible visuellement ?",
    "description": "Probl√®me : Probabilit√© que la fl√©chette atteigne la zone blanche Structure de la cible : Zone noire : cercle de rayon 2 cm Zone blanche : anneau entre rayon 2 cm et 3 cm Zone grise : anneau entre rayon 3 cm et 6 cm √âtape 1 ‚Äî Aire totale de la cible La cible est un disque de rayon 6 cm : Aire totale = œÄ √ó 6¬≤ = 36œÄ cm¬≤",
    "tags": [],
    "title": "Maths secondaire 3",
    "uri": "/afaire/maths/index.html"
  },
  {
    "breadcrumb": "",
    "content": "Description du cours Ce cours permet de se familiariser avec la programmation informatique dans un contexte scientifique et de faire le lien entre les technologies et le domaine des sciences.\nL‚Äô√©l√®ve est introduit √† la r√©solution de probl√®mes √† l‚Äôaide d‚Äôalgorithmes. Il doit traduire les algorithmes en code en utilisant un langage de programmation, tout en v√©rifiant le bon fonctionnement de son programme. Il traite des donn√©es et pr√©sente des r√©sultats scientifiques √† l‚Äôaide de la programmation lettr√©e.\nObjectifs du cours Apprendre les bases de la programmation en Python Appliquer la programmation √† des probl√®mes scientifiques (math√©matiques, physique, biologie, etc.) Automatiser des calculs et analyser des donn√©es exp√©rimentales D√©velopper un raisonnement algorithmique et structur√© Ma√Ætriser l‚Äôutilisation d‚ÄôAnaconda et de Jupyter Notebook pour le d√©veloppement scientifique Comprendre la gestion des fichiers et dossiers sous Windows Introduire les techniques de d√©bogage et de tra√ßage d‚Äôex√©cution Planification du cours et r√®glements du c√©gep Plan du cours\n√âvaluation int√©gratrice Projet: Simulation scientifique (20%) Examen: Question sur la simulation (20%)",
    "description": "Description du cours Ce cours permet de se familiariser avec la programmation informatique dans un contexte scientifique et de faire le lien entre les technologies et le domaine des sciences.\nL‚Äô√©l√®ve est introduit √† la r√©solution de probl√®mes √† l‚Äôaide d‚Äôalgorithmes. Il doit traduire les algorithmes en code en utilisant un langage de programmation, tout en v√©rifiant le bon fonctionnement de son programme. Il traite des donn√©es et pr√©sente des r√©sultats scientifiques √† l‚Äôaide de la programmation lettr√©e.",
    "tags": [],
    "title": "Programmation en sciences",
    "uri": "/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Tags",
    "uri": "/tags/index.html"
  }
]
