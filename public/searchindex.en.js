var relearn_searchindex = [
  {
    "breadcrumb": "Programmation en sciences¬†\u003e¬†\r√Ä FAIRE",
    "content": "Objectifs de la s√©ance R√©viser les structures conditionnelles (if, elif, else) Comprendre les boucles (while, for) Appliquer ces notions √† des situations scientifiques simples (physique, chimie, biologie) Plan de la s√©ance 0. Accueil et mise en contexte (10 min) Pr√©sentation des objectifs Br√®ve discussion sur ce que les √©tudiants trouvent difficile Partage d‚Äôun fichier Jupyter Notebook ou Google Colab 1. R√©vision des structures conditionnelles (30 min) Th√©orie (10 min) Rappel syntaxe : temp = 36.5 if temp \u003e 37.5: print(\"Fi√®vre\") elif temp \u003c 35.5: print(\"Hypothermie\") else: print(\"Temp√©rature normale\")\rOp√©rateurs de comparaison : ==, !=, \u003c, \u003e, \u003c=, \u003e= Op√©rateurs logiques : and, or, not Exemples scientifiques (10 min) Physique : vitesse et seuil de d√©passement vitesse = 120 if vitesse \u003e 100: print(\"D√©passement de vitesse\") else: print(\"Vitesse acceptable\")\rChimie : pH d‚Äôune solution pH = 3 if pH \u003c 7: print(\"Solution acide\") elif pH \u003e 7: print(\"Solution basique\") else: print(\"Solution neutre\")\rExercices guid√©s (10 min) Les √©tudiants partagent leurs r√©ponses via chat ou vocalement, ou √©crivent dans le notebook partag√©.\nUn corps a une temp√©rature de 39,5 ¬∞C. D√©terminez son √©tat.\nUn √©tudiant obtient 82 % √† un test. Cat√©gorisez la performance :\n\u003c 60 : √©chec 60‚Äì69 : passable 70‚Äì84 : bien 85 et + : excellent 2. Introduction aux boucles (30 min) Th√©orie (10 min) Boucle while compteur = 0 while compteur \u003c 5: print(compteur) compteur += 1\rBoucle for avec range() for i in range(5): print(i)\rApplications simples (10 min) Biologie : r√©p√©tition de cycles cellulaires cycles = 3 for cycle in range(cycles): print(f\"Cycle {cycle+1}: r√©plication de l‚ÄôADN\")\rChimie : simulation de gouttes de solution gouttes = 0 while gouttes \u003c 10: print(\"Ajout d'une goutte\") gouttes += 1\rExercices guid√©s (10 min) Affichez les entiers pairs de 2 √† 10. Simulez la d√©croissance radioactive sur 5 √©tapes (texte seulement). Demandez √† l‚Äôutilisateur un nombre, puis affichez tous les entiers jusqu‚Äô√† ce nombre. 3. Activit√© d‚Äôint√©gration (20 min) Probl√®me √† r√©soudre en petits groupes (ou seul si le groupe est petit) puis discussion en pl√©ni√®re.\n√ânonc√© :\nUn √©tudiant mesure le pH de plusieurs solutions. √âcrivez un programme qui :\nDemande √† l‚Äôutilisateur combien de solutions il veut tester. Pour chaque solution, demande le pH. Affiche si chaque solution est acide, basique ou neutre. Bonus : compter combien de solutions sont acides, basiques ou neutres.\n4. Retour et questions (10 min) Retour sur les concepts cl√©s R√©pondre aux questions Partage du code final et de ressources suppl√©mentaires (site Python Tutor, W3Schools, exercices sur exercicespython.fr) Mat√©riel √† pr√©parer Un notebook Google Colab (ou fichier Jupyter) avec :\nSections de code √† compl√©ter Exemples illustr√©s Cases de texte pour consignes Lien de partage en mode ‚Äúcommentaire‚Äù ou ‚Äú√©dition‚Äù",
    "description": "Objectifs de la s√©ance R√©viser les structures conditionnelles (if, elif, else) Comprendre les boucles (while, for) Appliquer ces notions √† des situations scientifiques simples (physique, chimie, biologie) Plan de la s√©ance 0. Accueil et mise en contexte (10 min) Pr√©sentation des objectifs Br√®ve discussion sur ce que les √©tudiants trouvent difficile Partage d‚Äôun fichier Jupyter Notebook ou Google Colab 1. R√©vision des structures conditionnelles (30 min) Th√©orie (10 min) Rappel syntaxe : temp = 36.",
    "tags": [],
    "title": "Boucles while et for",
    "uri": "/afaire/boucles/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences¬†\u003e¬†\r√Ä FAIRE",
    "content": "Contenu :\nLes fonctions personnalis√©es La documentation (docstring) Les tests unitaires avec PyTest Les fonctions arithm√©tiques int√©gr√©es (min, max, sum, abs, etc.) Le module math Objectifs de la s√©ance (2 heures) √Ä la fin de cette s√©ance, l‚Äô√©tudiant(e) sera capable de :\nUtiliser les fonctions arithm√©tiques int√©gr√©es et du module math Cr√©er ses propres fonctions avec param√®tres et valeurs de retour Documenter ses fonctions avec des docstrings √âcrire des tests unitaires simples avec pytest D√©roulement de la s√©ance üîπ 0:00 ‚Äì 0:10 | Accueil et plan de la s√©ance Br√®ve discussion : Pourquoi utiliser des fonctions ?\nPr√©sentation du plan :\nFonctions arithm√©tiques et math Fonctions personnalis√©es Docstrings Tests unitaires üîπ 0:10 ‚Äì 0:30 | Bloc 1 ‚Äî Fonctions arithm√©tiques et module math Fonctions int√©gr√©es (10 min) Pr√©sentation : min(), max(), sum(), abs(), round() Exemples : nombres = [3, 7, -5, 10] print(min(nombres)) # -5 print(sum(nombres)) # 15 print(abs(-9.2)) # 9.2\rPetit d√©fi (5 min) Trouver la valeur moyenne d‚Äôune liste de nombres, sans utiliser de module externe.\nModule math (5 min) Importation : import math Fonctions utiles : math.sqrt(), math.pow(), math.log(), math.sin(), math.pi, math.e Exemples :\nimport math print(math.sqrt(25)) # 5.0 print(math.log(100, 10)) # 2.0 print(math.pi) # 3.1415...\rüîπ 0:30 ‚Äì 1:00 | Bloc 2 ‚Äî Fonctions personnalis√©es Explication interactive (10 min) Syntaxe de def Param√®tres, arguments return vs affichage Exercice guid√© (15 min) Cr√©er une fonction energie_cinetique(masse, vitesse) avec retour de valeur.\nExercice autonome (5 min) Cr√©er une fonction energie_potentielle(m, h) avec g = 9.81.\nüîπ 1:00 ‚Äì 1:15 | Bloc 3 ‚Äî Docstrings Pr√©sentation (5 min) Format standard def nom_fonction(param): \"\"\" Description de la fonction. Param√®tres: - param (type): Description. Retour: - type: Description. \"\"\"\rExercice (10 min) Ajouter une docstring aux fonctions energie_cinetique et energie_potentielle.\nüîπ 1:15 ‚Äì 1:45 | Bloc 4 ‚Äî Tests unitaires avec pytest ‚öôÔ∏è Pr√©sentation (5 min) Pourquoi tester ? Syntaxe avec assert Exercice guid√© (15 min) Cr√©er un fichier test_physics.py :\nfrom mon_module import energie_cinetique def test_energie_cinetique(): assert energie_cinetique(2, 3) == 9.0\rLancer pytest dans le terminal.\nD√©fi bonus (10 min) Tester une fonction utilisant math.sqrt() (ex. : vitesse calcul√©e √† partir de l‚Äô√©nergie).\nüîπ 1:45 ‚Äì 2:00 | Consolidation, Q\u0026R R√©sum√© des notions vues.\nQuestions-r√©ponses.\nSuggestions d‚Äôexercices maison :\nFonctions pour des calculs en cin√©matique (ex. acc√©l√©ration) Ajouter docstrings et tests Explorer plus de fonctions dans math (ex. trigonom√©trie)",
    "description": "Contenu :\nLes fonctions personnalis√©es La documentation (docstring) Les tests unitaires avec PyTest Les fonctions arithm√©tiques int√©gr√©es (min, max, sum, abs, etc.) Le module math Objectifs de la s√©ance (2 heures) √Ä la fin de cette s√©ance, l‚Äô√©tudiant(e) sera capable de :\nUtiliser les fonctions arithm√©tiques int√©gr√©es et du module math Cr√©er ses propres fonctions avec param√®tres et valeurs de retour Documenter ses fonctions avec des docstrings √âcrire des tests unitaires simples avec pytest D√©roulement de la s√©ance üîπ 0:00 ‚Äì 0:10 | Accueil et plan de la s√©ance Br√®ve discussion : Pourquoi utiliser des fonctions ?",
    "tags": [],
    "title": "Fonctions personnalis√©es, docstring et test unitaires et Maths",
    "uri": "/afaire/fonctions/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences¬†\u003e¬†\r√Ä FAIRE",
    "content": "semaine 1: Cours et environnement de travail semaine 2: intro Python (variables, types, affichage, conversion et input) semaine 3: structures conditionnelles semaine 4: boucles semaine 5: introduction aux listes (base liste sans boucle, test #1 15% ‚Äì\u003e Semaines 1 √† 4 incl.)\nsemaine 6: liste et boucles semaine 7: dictionnaires semaine 8: intro aux fonctions (fn int√©gr√©es Math) et into aux graphiques semaine 9: tableaux Numpy semaine 10: test #2 20% ‚Äì\u003e Semaines 5 √† 9 incl.\nsemaine 11: pandas semaine 12: semaine 13: projet semaine 14: projet semaine 15: finalisation du projet et remise",
    "description": "semaine 1: Cours et environnement de travail semaine 2: intro Python (variables, types, affichage, conversion et input) semaine 3: structures conditionnelles semaine 4: boucles semaine 5: introduction aux listes (base liste sans boucle, test #1 15% ‚Äì\u003e Semaines 1 √† 4 incl.)\nsemaine 6: liste et boucles semaine 7: dictionnaires semaine 8: intro aux fonctions (fn int√©gr√©es Math) et into aux graphiques semaine 9: tableaux Numpy semaine 10: test #2 20% ‚Äì\u003e Semaines 5 √† 9 incl.",
    "tags": [],
    "title": "Planification",
    "uri": "/afaire/plan/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences¬†\u003e¬†\r√Ä FAIRE",
    "content": "Objectifs de la s√©ance Apprendre √† arr√™ter une boucle selon une condition. Apprendre √† cr√©er et manipuler une liste. Apprendre √† parcourir des listes ou des cha√Ænes de caract√®res avec la boucle for. Partie 1 ‚Äì Arr√™ter une boucle selon une condition Explication Une boucle while ou for continue tant qu‚Äôune condition est vraie. On peut aussi utiliser break pour arr√™ter manuellement une boucle. D√©monstration : boucle while valeur = 0 while valeur \u003c 100: print(\"Valeur actuelle :\", valeur) if valeur == 50: break # Arr√™te la boucle valeur += 1\rD√©monstration : boucle for for i in range(11):\t# i prends les valeurs 0,1,2,3,4,5,6,7,8,9,10 if i == 5: break\t# Arr√™te la boucle print(i) # Affiche: 0, 1, 2, 3, 4\rExercice 1 Demander √† l‚Äôutilisateur de saisir des temp√©ratures (float). La boucle s‚Äôarr√™te d√®s qu‚Äôon entre la valeur 0 (valeur sentinelle). # Saisie de temp√©ratures while True:\t# Toujours Vrai, pratique ici, mais √† √©viter temp = float(input(\"Entrez une temp√©rature (ou 0 pour arr√™ter) : \")) if temp == 0: print(\"Arr√™t de la saisie.\") break\rPartie 2 ‚Äì Cr√©er et manipuler une liste Explication Une liste permet de stocker plusieurs √©l√©ments (nombres, cha√Ænes, etc.) dans une seule variable. Dans une liste les √©l√©ments sont index√©s √† partir de 0, ce qui signifie que le premier √©l√©ment d‚Äôune liste et √† l‚Äôindice 0. Pour acc√©der √† un √©l√©ment d‚Äôune liste on utilise: nom-de-la-liste[index]. Exemple: Pour acc√©der au 3e √©l√©ment d‚Äôune liste nomm√©e ma_liste, on √©crit: ma_liste[2]. 2 √©tant l‚Äôindice du 3e √©l√©ment. D√©monstration : cr√©ation et acc√®s fruits = [\"pomme\", \"banane\", \"kiwi\"] print(fruits[0]) # Affiche 'pomme' fruits.append(\"mangue\")\t# Ajoute 'mangue' √† la fin print(fruits) # Ajoute un √©l√©ment\rD√©monstration : op√©rations utiles notes = [85, 90, 78, 92] print(\"Nombre de notes :\", len(notes))\t# Affiche le nombre d'√©l√©ments dans la liste \"notes\" print(\"Somme :\", sum(notes))\t# Affiche la somme des notes dans la liste print(\"Moyenne :\", sum(notes) / len(notes))\t# Affiche la moyenne des notes dans la liste\rLa fonction len donne la longueur d‚Äôune liste ou d‚Äôune chaine de caract√®res. Exercice 2 Cr√©er une liste de pH mesur√©s dans diff√©rents √©chantillons et calculer la moyenne. Afficher un message si un pH est inf√©rieur √† 4. Partie 3 ‚Äì Parcourir une liste ou une cha√Æne avec la boucle for Explication La boucle for permet de parcourir une liste ou une cha√Æne de caract√®res √©l√©ment par √©l√©ment. D√©monstration 5 : liste vitesses = [10.2, 11.5, 9.8, 12.0] for v in vitesses: print(\"Vitesse :\", v)\rD√©monstration : cha√Æne de caract√®res mot = \"glucose\" for lettre in mot: print(lettre)\rExercice 3 Demander de :\nCr√©er une liste de volumes en mL. Convertir chaque volume en L (1 L = 1000 mL) et afficher les conversions avec une boucle for. Exercices d‚Äôint√©gration Exercice 4 On a mesur√© la concentration d‚Äôun solut√© (en g/L) √† 6 moments diff√©rents. La boucle :\nAffiche chaque concentration Affiche un message d‚Äôalerte si \u003e 20 g/L Calcule la moyenne √† la fin Solution attendue (exemple guid√©) concentrations = [12.5, 18.0, 22.3, 19.5, 21.0, 15.7] somme = 0 for c in concentrations: print(\"Concentration :\", c) if c \u003e 20: print(\"Attention : concentration √©lev√©e !\") somme += c moyenne = somme / len(concentrations) print(\"Moyenne :\", moyenne)\rExercice 5 √âcrire une fonction qui prend une liste de temp√©ratures et retourne la temp√©rature maximale et sa position Exemple de nom de fonction: temperature_max(une_liste) Exemple d‚Äôutilisation de la fonction: liste = [15,34,23,12,31,8,20] temp_max = temperature_max(liste) print(\"La temp√©rature maximum est\", temp_max)\rExercice 6 On vous donne une s√©quence d‚ÄôADN repr√©sent√©e par une cha√Æne de caract√®res compos√©e uniquement des lettres A, T, C et G. Par exemple : sequence = \"ATGCGCATTAAGGCCGTA\"\rParcourez la s√©quence avec une boucle for. Comptez le nombre de bases A, T, C et G. Affichez le nombre total de bases. Affichez le pourcentage de G+C dans la s√©quence. Indices Une lettre dans une cha√Æne peut √™tre parcourue avec une boucle for. Pour augmenter un compteur, on peut faire : compteur += 1 Calcul du pourcentage : Pourcentage de G+C = (nombre de G + nombre de C) / nombre total de bases * 100\rSolution attendue (exemple guid√©) sequence = \"ATGCGCATTAAGGCCGTA\" nb_A = 0 nb_T = 0 nb_C = 0 nb_G = 0 for base in sequence: if base == 'A': nb_A += 1 elif base == 'T': nb_T += 1 elif base == 'C': nb_C += 1 elif base == 'G': nb_G += 1 total = len(sequence) gc_content = ((nb_G + nb_C) / total) * 100 print(\"A :\", nb_A) print(\"T :\", nb_T) print(\"C :\", nb_C) print(\"G :\", nb_G) print(\"Total :\", total) print(\"Pourcentage de G+C :\", round(gc_content, 2), \"%\")\rVariante possible Ajouter une v√©rification : si une base n‚Äôest pas A, T, C ou G, afficher un message d‚Äôerreur. Compter les codons (groupes de 3 bases) avec une boucle for allant de 0 √† len(sequence)-3 par pas de 3.",
    "description": "Objectifs de la s√©ance Apprendre √† arr√™ter une boucle selon une condition. Apprendre √† cr√©er et manipuler une liste. Apprendre √† parcourir des listes ou des cha√Ænes de caract√®res avec la boucle for. Partie 1 ‚Äì Arr√™ter une boucle selon une condition Explication Une boucle while ou for continue tant qu‚Äôune condition est vraie. On peut aussi utiliser break pour arr√™ter manuellement une boucle. D√©monstration : boucle while valeur = 0 while valeur \u003c 100: print(\"Valeur actuelle :\", valeur) if valeur == 50: break # Arr√™te la boucle valeur += 1\rD√©monstration : boucle for for i in range(11):\t# i prends les valeurs 0,1,2,3,4,5,6,7,8,9,10 if i == 5: break\t# Arr√™te la boucle print(i) # Affiche: 0, 1, 2, 3, 4\rExercice 1 Demander √† l‚Äôutilisateur de saisir des temp√©ratures (float).",
    "tags": [],
    "title": "break, continue, liste et boucle",
    "uri": "/afaire/break_continue_liste/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences¬†\u003e¬†\r√Ä FAIRE",
    "content": "Objectifs de la s√©ance (2h) Comprendre comment fonctionne le d√©bogueur dans PyCharm. Apprendre √† utiliser les points d‚Äôarr√™t (breakpoints), la fen√™tre des variables, les options Step Over, Step Into, Evaluate Expression, etc. R√©viser les structures conditionnelles (if/elif/else) et les boucles (for, while) en les testant pas √† pas. Apprendre √† identifier les erreurs logiques classiques en sciences (unit√©s, ordre des op√©rations, initialisation incorrecte, etc.). Plan de la s√©ance (2h) Temps Activit√© 0:00-0:15 Introduction au d√©bogueur PyCharm (d√©monstration) 0:15-0:35 Exemple guid√© 1 : if/elif/else ‚Äì temp√©rature de changement d‚Äô√©tat 0:35-1:00 Exercice 1 : Identifier les erreurs dans un mod√®le de dilatation thermique 1:00-1:20 Exemple guid√© 2 : boucle for ‚Äì somme des masses d‚Äô√©chantillons 1:20-1:40 Exercice 2 : Corriger une boucle while mal conditionn√©e (demi-vie radioactive) 1:40-2:00 D√©fi final : simulation simplifi√©e de chute libre avec erreur √† trouver Outils PyCharm install√©. Mode ‚ÄúDebug‚Äù activ√© (menu Run \u003e Debug‚Ä¶). Possibilit√© de partager l‚Äô√©cran de l‚Äô√©l√®ve ou d‚Äôutiliser un environnement collaboratif si permis. Vid√©o YouTube Site JetBrains Exemple guid√© 1 : Conditions ‚Äì Temp√©rature de l‚Äôeau temp = 100 if temp \u003c 0: print(\"Solide (glace)\") elif temp \u003c 100: print(\"Liquide\") else: print(\"Gaz (vapeur)\")\rBut : mettre des points d‚Äôarr√™t Ajouter un point d‚Äôarr√™t sur chaque ligne. Ex√©cuter le programme en mode Debug. Observer la variable temp et les branches conditionnelles prises. Modifier la valeur de temp √† 50 et recommencer. üîß Exercice 1 : Dilatation thermique (avec erreur) # Dilatation thermique: ŒîL = L0 * Œ± * ŒîT L0 = 10 # longueur initiale en m alpha = 0.000012 # coefficient de dilatation (/¬∞C) temp_initiale = 20 temp_finale = 50 delta_L = alpha * L0 + (temp_finale - temp_initiale) # ERREUR ICI print(\"Allongement =\", delta_L, \"m\")\rT√¢ches de l‚Äô√©l√®ve Mettre des points d‚Äôarr√™t. Corriger l‚Äôerreur dans le calcul (+ au lieu de *). Modifier L0, alpha et v√©rifier le r√©sultat attendu. Exemple guid√© 2 : Boucle for ‚Äì Masse totale masses = [1.2, 3.5, 2.1, 0.9] somme = 0 for m in masses: somme += m print(\"Masse totale:\", somme, \"g\")\rObjectifs : Suivre l‚Äô√©volution de somme √† chaque it√©ration. Utiliser l‚Äôinspecteur de variables. Tester avec une liste vide ou avec des valeurs n√©gatives. Exercice 2 : Boucle while ‚Äì Demi-vie radioactive (avec erreur logique) # Masse d‚Äôun isotope radioactif qui d√©cro√Æt √† chaque p√©riode masse = 100 demi_vie = 5 temps = 0 while masse \u003e 0: masse = masse / 2 temps = temps + demi_vie print(\"Temps total:\", temps)\rErreurs √† d√©tecter : Boucle infinie possible si masse devient tr√®s petit mais jamais exactement 0. Ajouter une masse minimale d√©tectable comme crit√®re d‚Äôarr√™t. Version corrig√©e propos√©e : masse = 100 demi_vie = 5 temps = 0 seuil = 0.1 while masse \u003e seuil: masse = masse / 2 temps += demi_vie print(\"Temps √©coul√©:\", temps, \"ans\")\rD√©fi final : Chute libre (d√©tection d‚Äôun bug) # Chute libre avec v = v0 + g*t, h = h0 - v*t g = 9.8 v0 = 0 h0 = 100 t = 0 dt = 1 h = h0 while h \u003e 0: v = v0 + g * t h = h0 - v * t print(f\"Temps: {t}s, Hauteur: {h:.2f}m\") t += dt\rProbl√®mes : v est recalcul√©e √† chaque fois en fonction du temps total, pas de l‚Äô√©tape actuelle. h0 reste fixe ‚Äì il faut accumuler les vitesses √† chaque pas. Version corrig√©e : g = 9.8 v = 0 h = 100 t = 0 dt = 1 while h \u003e 0: v = v + g * dt h = h - v * dt print(f\"Temps: {t}s, Hauteur: {h:.2f}m\") t += dt\r√Ä faire apr√®s la s√©ance Reprendre les exercices avec d‚Äôautres donn√©es ou contextes scientifiques (e.g., r√©action exothermique, refroidissement de Newton). Installer un plugin PyCharm comme ‚ÄúEduTools‚Äù pour avoir d‚Äôautres exercices interactifs. Faire une fiche-rappel des symboles du d√©bogueur (Step Over, Into, Out, Resume, etc.).",
    "description": "Objectifs de la s√©ance (2h) Comprendre comment fonctionne le d√©bogueur dans PyCharm. Apprendre √† utiliser les points d‚Äôarr√™t (breakpoints), la fen√™tre des variables, les options Step Over, Step Into, Evaluate Expression, etc. R√©viser les structures conditionnelles (if/elif/else) et les boucles (for, while) en les testant pas √† pas. Apprendre √† identifier les erreurs logiques classiques en sciences (unit√©s, ordre des op√©rations, initialisation incorrecte, etc.). Plan de la s√©ance (2h) Temps Activit√© 0:00-0:15 Introduction au d√©bogueur PyCharm (d√©monstration) 0:15-0:35 Exemple guid√© 1 : if/elif/else ‚Äì temp√©rature de changement d‚Äô√©tat 0:35-1:00 Exercice 1 : Identifier les erreurs dans un mod√®le de dilatation thermique 1:00-1:20 Exemple guid√© 2 : boucle for ‚Äì somme des masses d‚Äô√©chantillons 1:20-1:40 Exercice 2 : Corriger une boucle while mal conditionn√©e (demi-vie radioactive) 1:40-2:00 D√©fi final : simulation simplifi√©e de chute libre avec erreur √† trouver Outils PyCharm install√©.",
    "tags": [],
    "title": "D√©bogage pas √† pas",
    "uri": "/afaire/debogage/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences¬†\u003e¬†\r√Ä FAIRE",
    "content": "Voici une le√ßon concise et essentielle sur la r√©daction d‚Äôun notebook Jupyter clair et bien structur√© en Python, avec des explications adapt√©es √† des √©tudiants de premi√®re session en sciences de la nature.\nüßæ Le√ßon : üéØ Objectifs Utiliser le Markdown pour structurer les sections du notebook S√©parer clairement la th√©orie, le code et l‚Äôinterpr√©tation Ajouter des commentaires dans le code S‚Äôassurer que toutes les cellules s‚Äôex√©cutent sans erreur, du haut vers le bas 1. üìù Utiliser Markdown pour structurer le notebook Markdown permet d‚Äô√©crire du texte format√© dans les cellules non-code.\nüîπ Titres et sous-titres √âl√©ment Syntaxe Markdown Titre principal # Titre Sous-titre ## Sous-titre Sous-section ### Sous-section üìå Exemple : # Analyse d'une exp√©rience ## Objectif √âtudier l‚Äô√©volution de la temp√©rature en fonction du temps. ## Donn√©es exp√©rimentales Les donn√©es sont fournies dans un fichier CSV.\r2. üß± S√©parer : Th√©orie / Code / Interpr√©tation Organise chaque section de ton notebook comme suit :\nTh√©orie (Markdown) : But, formule, contexte scientifique Code Python (cellule code) : Lecture des donn√©es, calculs, trac√© Interpr√©tation (Markdown) : R√©sultats obtenus, analyse 3. üí¨ Ajouter des commentaires dans le code Utilise # pour √©crire un commentaire sur une ligne dans une cellule de code.\nüìå Exemple : # Charger les biblioth√®ques n√©cessaires import pandas as pd import matplotlib.pyplot as plt # Lire les donn√©es exp√©rimentales df = pd.read_csv(\"temperature.csv\")\r‚û°Ô∏è R√®gle : chaque bloc de code doit avoir des commentaires clairs.\n4. ‚úÖ Ex√©cution sans erreur : haut en bas Avant de partager ton notebook :\nVa dans le menu ‚ÄúKernel‚Äù ‚Üí ‚ÄúRestart \u0026 Run All‚Äù (ou √©quivalent dans Google Colab : Runtime \u003e Run all) Toutes les cellules doivent s‚Äôex√©cuter dans l‚Äôordre sans erreur. Aucune cellule ne doit d√©pendre de code non ex√©cut√© auparavant. ‚úÖ R√©sum√© minimal Bonnes pratiques Exemples Markdown pour titres # Titre, ## Sous-titre Th√©orie avant le code Explication en Markdown Commentaires dans le code # Calcul de la moyenne Cellules ex√©cutables sans erreur Run all sans blocage üß™ Exercice guid√© üîß Exercice ‚Äì Structure ton notebook Cr√©e un petit notebook contenant :\nUn titre principal (# √âtude d‚Äôun ph√©nom√®ne physique) Une section Markdown expliquant le but de l‚Äôexp√©rience Un bloc de code lisant un petit tableau CSV fictif Une interpr√©tation en Markdown (m√™me si br√®ve) Des commentaires dans chaque cellule de code Aucune erreur √† l‚Äôex√©cution compl√®te",
    "description": "Voici une le√ßon concise et essentielle sur la r√©daction d‚Äôun notebook Jupyter clair et bien structur√© en Python, avec des explications adapt√©es √† des √©tudiants de premi√®re session en sciences de la nature.\nüßæ Le√ßon : üéØ Objectifs Utiliser le Markdown pour structurer les sections du notebook S√©parer clairement la th√©orie, le code et l‚Äôinterpr√©tation Ajouter des commentaires dans le code S‚Äôassurer que toutes les cellules s‚Äôex√©cutent sans erreur, du haut vers le bas 1.",
    "tags": [],
    "title": "√âcrire un notebook Python bien structur√©",
    "uri": "/afaire/markdown/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences¬†\u003e¬†\r√Ä FAIRE",
    "content": "Programmation scientifique en Python ‚Äî Le√ßon : Fichiers, Tableaux et Visualisation 1. Lire et √©crire des fichiers de donn√©es (.csv) Les fichiers .csv (Comma-Separated Values) permettent de stocker des tableaux de donn√©es.\n√âcrire un fichier .csv with open(\"donnees.csv\", \"w\") as f: f.write(\"Nom,√Çge\\n\") f.write(\"Alice,20\\n\") f.write(\"Bob,22\\n\")\rLire un fichier .csv with open(\"donnees.csv\", \"r\") as f: contenu = f.read() print(contenu)\rPour des donn√©es num√©riques, on peut utiliser numpy.savetxt() et numpy.loadtxt() : import numpy as np # Sauvegarder un tableau tableau = np.array([[1, 2], [3, 4]]) np.savetxt(\"tableau.csv\", tableau, delimiter=\",\") # Charger un tableau donnees = np.loadtxt(\"tableau.csv\", delimiter=\",\") print(donnees)\r2. Tableaux num√©riques avec NumPy NumPy est une biblioth√®que sp√©cialis√©e pour manipuler efficacement des tableaux.\nCr√©ation d‚Äôun tableau : import numpy as np a = np.array([1, 2, 3, 4]) b = np.array([[1, 2], [3, 4]])\rQuelques fonctions utiles : np.zeros((2, 3)) # tableau 2x3 rempli de 0 np.ones((3, 2)) # tableau 3x2 rempli de 1 np.arange(0, 10, 2) # [0 2 4 6 8]\r3. Op√©rations sur les tableaux NumPy Les op√©rations sont automatiques et √©l√©ment par √©l√©ment.\na = np.array([1, 2, 3]) b = np.array([4, 5, 6]) print(a + b) # [5 7 9] print(a * b) # [4 10 18] print(a ** 2) # [1 4 9]\rLes op√©rations fonctionnent aussi sur des matrices :\nmat = np.array([[1, 2], [3, 4]]) print(mat.T) # transpos√©e\r4. Fonctions statistiques utiles data = np.array([1, 2, 3, 4, 5]) print(np.sum(data)) # 15 print(np.mean(data)) # 3.0 print(np.std(data)) # 1.41\r5. Graphiques de base avec Matplotlib import matplotlib.pyplot as plt x = np.array([0, 1, 2, 3]) y = np.array([0, 1, 4, 9]) plt.plot(x, y) # Tracer y en fonction de x plt.title(\"Graphique simple\") plt.xlabel(\"x\") plt.ylabel(\"y\") plt.show()\rAutres types de graphiques :\nplt.scatter(x, y) # Nuage de points plt.bar(x, y) # Diagramme √† barres\r6. Les instructions conditionnelles R√©sum√© des outils par th√®me Th√®me Fonctions / Notions cl√©s Fichiers .csv open(), write(), read(), loadtxt(), savetxt() Tableaux np.array(), np.zeros(), np.ones() Op√©rations sur tableaux +, *, .T Statistiques np.sum(), np.mean(), np.std() Graphiques plt.plot(), plt.scatter(), plt.show() Conditions if, elif, else Souhaitez-vous que je transforme cette le√ßon en fichier .ipynb (Jupyter Notebook) avec exemples ex√©cutables et sections bien structur√©es ?",
    "description": "Programmation scientifique en Python ‚Äî Le√ßon : Fichiers, Tableaux et Visualisation 1. Lire et √©crire des fichiers de donn√©es (.csv) Les fichiers .csv (Comma-Separated Values) permettent de stocker des tableaux de donn√©es.\n√âcrire un fichier .csv with open(\"donnees.csv\", \"w\") as f: f.write(\"Nom,√Çge\\n\") f.write(\"Alice,20\\n\") f.write(\"Bob,22\\n\")\rLire un fichier .csv with open(\"donnees.csv\", \"r\") as f: contenu = f.read() print(contenu)\rPour des donn√©es num√©riques, on peut utiliser numpy.savetxt() et numpy.loadtxt() : import numpy as np # Sauvegarder un tableau tableau = np.",
    "tags": [],
    "title": "L‚Äô√©criture et la lecture de donn√©es (csv)",
    "uri": "/afaire/lecture_ecriture_csv_numpy/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences¬†\u003e¬†\r√Ä FAIRE",
    "content": "Qu‚Äôest-ce qu‚Äôun tableau 2D ? C‚Äôest une liste de listes.\nExemple d‚Äôun tableau 3 lignes √ó 4 colonnes rempli de 0 :\ntableau = [ [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0] ]\rChaque sous-liste repr√©sente une ligne.\nBoucler sur les lignes (1 niveau) for ligne in tableau: print(ligne)\r‚û° On affiche chaque ligne enti√®re.\nBoucler sur chaque √©l√©ment (2 niveaux) Pour acc√©der √† chaque case du tableau, on utilise deux boucles imbriqu√©es :\nfor ligne in tableau: for case in ligne: print(case)\r‚û° On affiche chaque √©l√©ment un par un.\nAvec indices (si on veut conna√Ætre les positions) for i in range(len(tableau)): # i = index de ligne for j in range(len(tableau[i])): # j = index de colonne print(f\"Case [{i}][{j}] = {tableau[i][j]}\")\r‚û° Cette m√©thode permet de savoir √† quelle position se trouve chaque √©l√©ment.\nExercice guid√© 1 ‚Äì Remplir un tableau 3x3 avec la somme des indices tableau = [] for i in range(3): ligne = [] for j in range(3): ligne.append(i + j) tableau.append(ligne) print(tableau)\rR√©sultat :\n[[0, 1, 2],\r[1, 2, 3],\r[2, 3, 4]]\rExercice guid√© 2 ‚Äì Compter les z√©ros dans un tableau tableau = [ [0, 1, 0], [2, 0, 3], [0, 4, 5] ] compteur = 0 for ligne in tableau: for case in ligne: if case == 0: compteur += 1 print(\"Nombre de z√©ros :\", compteur)\r‚û° R√©sultat : Nombre de z√©ros : 4\n√Ä retenir Structure Utilit√© for ligne in tableau Parcourir chaque ligne for case in ligne Parcourir chaque √©l√©ment for i in range(len(...)) Parcourir avec indices (i, j) tableau[i][j] Acc√®s √† une case sp√©cifique Exercice ‚Äì Grille de temp√©ratures en laboratoire Contexte scientifique Une technicienne en laboratoire a pris des mesures de temp√©ratures (¬∞C) dans 3 chambres de croissance de plantes, √† 4 moments diff√©rents dans la journ√©e. Les donn√©es sont enregistr√©es dans un tableau 2D.\n# tableau des temp√©ratures [chambre][moment] temperatures = [ [22.1, 22.5, 23.0, 23.2], # Chambre 1 [21.8, 22.2, 22.6, 22.9], # Chambre 2 [23.5, 23.3, 23.0, 22.8] # Chambre 3 ]\rObjectif Afficher chaque temp√©rature avec la chambre et le moment de mesure. Calculer la temp√©rature moyenne de chaque chambre. Trouver la temp√©rature la plus √©lev√©e de toutes les mesures. Solution guid√©e pas √† pas 1. Afficher toutes les temp√©ratures for i in range(len(temperatures)): # index des chambres for j in range(len(temperatures[i])): # index des moments print(f\"Chambre {i+1}, Moment {j+1} : {temperatures[i][j]} ¬∞C\")\r2. Moyenne par chambre for i in range(len(temperatures)): moyenne = sum(temperatures[i]) / len(temperatures[i]) print(f\"Moyenne de la chambre {i+1} : {moyenne:.2f} ¬∞C\")\r3. Temp√©rature maximale max_temp = temperatures[0][0] # on part du premier √©l√©ment for ligne in temperatures: for temp in ligne: if temp \u003e max_temp: max_temp = temp print(\"Temp√©rature maximale enregistr√©e :\", max_temp, \"¬∞C\")\rVariante possible ajouter une 4e chambre, de d√©tecter la temp√©rature minimale, ou de colorer en rouge les temp√©ratures \u003e 23‚ÄØ¬∞C avec un message sp√©cial.",
    "description": "Qu‚Äôest-ce qu‚Äôun tableau 2D ? C‚Äôest une liste de listes.\nExemple d‚Äôun tableau 3 lignes √ó 4 colonnes rempli de 0 :\ntableau = [ [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0] ]\rChaque sous-liste repr√©sente une ligne.\nBoucler sur les lignes (1 niveau) for ligne in tableau: print(ligne)\r‚û° On affiche chaque ligne enti√®re.\nBoucler sur chaque √©l√©ment (2 niveaux) Pour acc√©der √† chaque case du tableau, on utilise deux boucles imbriqu√©es :",
    "tags": [],
    "title": "Boucler sur un tableau 2D",
    "uri": "/afaire/boucler_tableaux2d/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences",
    "content": "Outils et locaux pour pratiquer Quel logiciel je peux installer sur mon ordinateur personnel pour pratiquer √† la maison ? Alternatives √† VS Code La sauvegarde automatique dans Visual Studio Code. Sauvegarde dans VS Code Les raccourcis clavier (copier, coller, couper, enregistrer, etc.) Trucs pratiques pour bien coder O√π se trouve les touches pour [, ], {, }, @, \u003c, \u003e, etc. sur un clavier QWERTY. Trucs pratiques pour bien coder Dans quels locaux du c√©gep, je peux aller pratiquer ? Locaux avec Python, VS Code et Jupyter √Ä propos des √©valuations Faut-il remettre les exercices du cours √† faire avant le cours ? Non. Ceci dit, si vous voulez augmenter vos chances de r√©ussite, ces exercices vous aideront √† identifier tr√®s t√¥t l√† o√π vous avez besoin de poser des questions et plus pratiquer.\nFaut-il remettre les ateliers ? Oui. Il ne sont pas not√©s, mais ils servent √† ce que vous pratiquez et √† voir o√π sont les difficult√©s des √©tudiants.\nQuand faut-il remettre les ateliers ? Chaque semaine, au plus tard √† la fin du cours, √† moins d‚Äôun avis contraire de l‚Äôenseignante.\nPuis-je avoir les solutions des exercices des cours ? Oui. Ils sont faits en classe et ajout√©s ICI au fur et √† mesure.\nPuis-je avoir les solutions des ateliers ? Oui. Ils sont ajout√©s ICI au fur et √† mesure.\nPuis-je avoir les solutions des √©valuations formatives (semaines #4, #8 et #11) ? Non, car elles se rapprochent beaucoup des √©valuations sommatives.\nQuelle date est l‚Äôexamen ? Voir le plan de cours accompagn√© du calendrier scolaire/r√©partition des semaines.\nVoir la page S√©ances du cours\nQu‚Äôavons-nous droit pour les examens ? √âvaluation 1\n√âvaluation 2\n√âvaluation 3\nCombien vaut l‚Äôexamen ? √âvaluation 1\n√âvaluation 2\n√âvaluation 3\nSur quoi portera l‚Äôexamen ? √âvaluation 1\n√âvaluation 2\n√âvaluation 3\nCombien vaut le projet final ? Grille d‚Äô√©valuation du projet",
    "description": "Outils et locaux pour pratiquer Quel logiciel je peux installer sur mon ordinateur personnel pour pratiquer √† la maison ? Alternatives √† VS Code La sauvegarde automatique dans Visual Studio Code. Sauvegarde dans VS Code Les raccourcis clavier (copier, coller, couper, enregistrer, etc.) Trucs pratiques pour bien coder O√π se trouve les touches pour [, ], {, }, @, \u003c, \u003e, etc. sur un clavier QWERTY. Trucs pratiques pour bien coder Dans quels locaux du c√©gep, je peux aller pratiquer ?",
    "tags": [],
    "title": "Foire Aux Questions",
    "uri": "/faq/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences¬†\u003e¬†\rFoire Aux Questions",
    "content": "Deux alternatives populaires Si vous cherchez une alternative simple et accessible √† VS Code avec Jupyter, Google Colab est une excellente option. Colab est un environnement de notebooks en ligne gratuit, offert par Google, qui ne n√©cessite aucune installation. Il vous permet d‚Äô√©crire et d‚Äôex√©cuter du code Python directement dans votre navigateur, tout en profitant d‚Äôun acc√®s facile √† des biblioth√®ques scientifiques populaires comme NumPy, pandas, ou matplotlib. C‚Äôest l‚Äôoutil id√©al pour d√©buter en programmation scientifique ou collaborer √† distance, puisqu‚Äôil s‚Äôint√®gre √† Google Drive et permet de partager vos notebooks aussi facilement qu‚Äôun document Google Docs.\nDe son c√¥t√©, PyCharm est un environnement de d√©veloppement int√©gr√© (IDE) puissant con√ßu sp√©cialement pour Python. Contrairement √† Google Colab, il s‚Äôinstalle sur votre ordinateur, mais offre une panoplie de fonctionnalit√©s avanc√©es comme l‚Äôautocompl√©tion intelligente, le d√©bogueur int√©gr√©, et la gestion de projets complexes. Pour les d√©butants ou les utilisateurs interm√©diaires qui souhaitent aller plus loin que les notebooks Jupyter, PyCharm repr√©sente une solution robuste et professionnelle. Il existe en version gratuite (Community) et en version payante (Professional) avec essai gratuit.\rGoogle Colab, ou Colaboratory, est un service cloud gratuit propos√© par Google, bas√© sur Jupyter Notebook. Colab permet d‚Äôex√©cuter du code Python directement dans le navigateur sans n√©cessiter de configuration pr√©alable, tout en offrant un acc√®s gratuit aux processeurs graphiques, pour acc√©l√©rer les calculs.\nAcc√©der √† Google Colab Pour commencer √† utiliser Google Colab, suivez ces √©tapes simples :\nM√©thode 1: Via le site de Google Colab Allez sur le site: Google Colab. Cliquez sur le bouton Open Colab. Si la fen√™tre Ouvrir le notebook s‚Äôouvre, cliquez sur le bouton + Nouveau notebook pour cr√©er un nouveau notebook. Sinon, une fois sur l‚Äôinterface de Colab, vous pouvez cr√©er un nouveau notebook en utilisant le menu Fichier et en s√©lectionnant Nouveau notebook. Les notebooks Colab permettent d‚Äô√©crire et d‚Äôex√©cuter du code Python. Par exemple, pour ex√©cuter une cellule de code, cliquez dessus et appuyez sur le bouton de lecture ou utilisez le raccourci clavier Ctrl+Entr√©e.\nM√©thode 2: Via votre compte Google Drive (Si vous en avez un) Ouvrez votre compte Google Drive, cliquez sur Nouveau, puis sur Plus et s√©lectionnez Google Colaboratory. Importer un fichier de l‚Äôordinateur vers Colab Pour importer un fichier .ipynb (notebook Jupyter) ou .csv (fichier de donn√©es) depuis votre ordinateur local vers Google Colab, vous pouvez utiliser l‚Äôune des deux m√©thodes suivantes :\nM√©thode 1 : Utiliser l‚Äôinterface de Google Colab (plus simple) Pour un fichier .ipynb : Va sur https://colab.research.google.com/ Clique sur l‚Äôonglet ‚ÄúT√©l√©verser‚Äù (Upload). S√©lectionne ton fichier .ipynb depuis ton ordinateur. Pour un fichier .csv : Dans un notebook Colab ouvert, ex√©cute la cellule suivante :\nfrom google.colab import files uploaded = files.upload()\rCela ouvrira une bo√Æte de dialogue pour t√©l√©verser des fichiers.\nUne fois le fichier .csv t√©l√©vers√©, tu peux l‚Äôutiliser comme suit :\nimport pandas as pd df = pd.read_csv('nom_du_fichier.csv') df.head()\rM√©thode 2 : Monter Google Drive et acc√©der aux fichiers Si tu veux garder les fichiers disponibles √† long terme :\nMonte ton Google Drive :\nfrom google.colab import drive drive.mount('/content/drive')\rAcc√®de aux fichiers (ex. un .csv) avec un chemin comme :\ndf = pd.read_csv('/content/drive/MyDrive/chemin/vers/fichier.csv')\rUtilisation des biblioth√®ques Python Colab permet d‚Äôutiliser des biblioth√®ques populaires pour l‚Äôanalyse et la visualisation des donn√©es. Par exemple, pour g√©n√©rer des donn√©es al√©atoires avec NumPy et les visualiser avec Matplotlib :\nimport numpy as np import matplotlib.pyplot as plt ys = 200 + np.random.randn(100) x = [x for x in range(len(ys))] plt.figure(figsize=(10, 6)) plt.plot(x, ys, '-') plt.fill_between(x, ys, 195, where=(ys \u003e 195), facecolor='g', alpha=0.6) plt.show()\rLes notebooks Colab sont enregistr√©s dans votre compte Google Drive, ce qui facilite le partage et la collaboration. Vous pouvez partager vos notebooks avec d‚Äôautres utilisateurs, qui peuvent les commenter ou les modifier.\nPour en savoir plus sur Colab Lire ce notebook\nD√©velopp√© par JetBrains, PyCharm est √† ce jour une plateforme tr√®s populaire pour Python. Cette plateforme hybride est couramment utilis√©e pour le d√©veloppement d‚Äôapplications Python, et notamment par de grandes entreprises telles que Twitter, Facebook, Amazon ou Pinterest.\nCompatible avec Windows, Linux et macOS, PyCharm contient des modules et des packages aidant les d√©veloppeurs √† programmer des logiciels avec Python plus rapidement et avec moins d‚Äôefforts.\nInstallation et configuration T√©l√©charger PyCharm T√©l√©chargez PyCharm en cliquant sur le lien de t√©l√©chargement.\nCliquez sur le bouton Download\nSauvegardez le fichier .exe (en date de juin 2025, c‚Äôest pycharm-2025.1.1.1.exe) Installation Les instructions varient selon votre syst√®me d‚Äôexploitation. Pour Windows: Lancez l‚Äôinstallation en cliquant deux fois sur le fichier pycharm-2025.1.1.1.exe t√©l√©charg√© pr√©c√©demment. Autorisez l‚Äôapplication Suivez les √©tapes en cliquant sur *Next. Cochez les cases de configuration de PyCharm, puis cliquez sur Next, puis Install Patientez, le temps que l‚Äôinstallation se fasse6. (environ 2-3 minutes). Red√©marrer votre ordinateur. Deux choix possibles: Choisir l‚Äôoption Reboot now, puis cliquez sur Finish. Choisir l‚Äôoption I want to manually reboot later, pour red√©marrer l‚Äôordinateur plus tard. Cliquez sur Finish. Lancer PyCharm Retrouvez l‚Äôapplication PyCharm √† l‚Äôaide de la loupe Recherche sur la barre des t√¢ches Lors du premier lancement de PyCharm, il vous sera demand√© de vous connecter √† votre compte JetBrains ou de d√©marrer une √©valuation gratuite.\n√âcran d‚Äôaccueil Lorsque vous ouvrez PyCharm pour la premi√®re fois, vous √™tes accueilli par l‚Äô√©cran d‚Äôaccueil.\nDepuis l‚Äô√©cran d‚Äôaccueil de PyCharm, vous pouvez explorer cinq sections principales :\nOnglet ‚ÄúLearn PyCharm‚Äù : il contient des liens vers la documentation et d‚Äôautres ressources. Vous pouvez √©galement vous inscrire √† l‚Äôoutil interactif ‚ÄúFeature Trainer‚Äù, con√ßu pour vous enseigner rapidement des astuces de productivit√© dans PyCharm.\nOnglet ‚ÄúPlugins‚Äù : il vous permet d‚Äôinstaller des extensions suppl√©mentaires comme des th√®mes personnalis√©s ou des raccourcis clavier (keymaps), utiles si vous venez d‚Äôun autre √©diteur ou IDE.\nKeymaps : installer des keymaps facilite la transition depuis d‚Äôautres √©diteurs. Pour rechercher, commencez √† taper ‚Äúkeymaps‚Äù, par exemple, et PyCharm vous proposera les keymaps disponibles pour les √©diteurs les plus populaires. Choisissez celui qui vous convient le mieux et cliquez pour l‚Äôinstaller.\nSection ‚ÄúCustomize‚Äù : elle vous permet de modifier certains param√®tres courants. Par exemple, vous pouvez changer le th√®me Darcula pour IntelliJ Light. Vous pouvez √©galement synchroniser l‚Äôapparence avec celle de votre syst√®me d‚Äôexploitation. Si vous avez install√© un keymap ou un th√®me, vous devrez les activer ici.\nOnglet ‚ÄúProjects‚Äù : c‚Äôest ici que vous pouvez cr√©er, ouvrir ou cloner un projet pour commencer √† travailler.\nVid√©o sur YouTube L‚Äôinstallation en vid√©o\nCr√©er un premier projet dans PyCharm. Pour cette √©tape, vous pouvez:\nRegarder la vid√©o sur YouTube: vid√©o ou Lire (en anglais) les instructions sur le site de PyCharm Comprendre l‚Äôinterface de PyCharm Pour cette √©tape, vous pouvez:\nRegarder la vid√©o sur YouTube: vid√©o Ou Lire le tutoriel sur le site de PyCharm",
    "description": "Deux alternatives populaires Si vous cherchez une alternative simple et accessible √† VS Code avec Jupyter, Google Colab est une excellente option. Colab est un environnement de notebooks en ligne gratuit, offert par Google, qui ne n√©cessite aucune installation. Il vous permet d‚Äô√©crire et d‚Äôex√©cuter du code Python directement dans votre navigateur, tout en profitant d‚Äôun acc√®s facile √† des biblioth√®ques scientifiques populaires comme NumPy, pandas, ou matplotlib. C‚Äôest l‚Äôoutil id√©al pour d√©buter en programmation scientifique ou collaborer √† distance, puisqu‚Äôil s‚Äôint√®gre √† Google Drive et permet de partager vos notebooks aussi facilement qu‚Äôun document Google Docs.",
    "tags": [],
    "title": "Alternatives √† VS Code",
    "uri": "/faq/alternatives/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences¬†\u003e¬†\rFoire Aux Questions",
    "content": "Locaux o√π se donne le cours 420-SN1-RE A-3820 B-2302 B-2303 B-3376 B-3410 Autres locaux (√† confirmer) * *",
    "description": "Locaux o√π se donne le cours 420-SN1-RE A-3820 B-2302 B-2303 B-3376 B-3410 Autres locaux (√† confirmer) * *",
    "tags": [],
    "title": "Locaux avec Python",
    "uri": "/faq/locaux_python/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences",
    "content": "Se connecter √† OneDrive Fichiers et r√©pertoires/dossiers Utiliser Visual Studio Code (VS Code) Sauvegarde dans VS Code D√©boguer dans VS Code Utiliser un bloc-note Jupyter Astuces et touches sp√©ciales Markdown pour les rapports",
    "description": "Se connecter √† OneDrive Fichiers et r√©pertoires/dossiers Utiliser Visual Studio Code (VS Code) Sauvegarde dans VS Code D√©boguer dans VS Code Utiliser un bloc-note Jupyter Astuces et touches sp√©ciales Markdown pour les rapports",
    "tags": [],
    "title": "Outils de d√©veloppement",
    "uri": "/outils_dev/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences¬†\u003e¬†\rOutils de d√©veloppement",
    "content": "Cliquer sur la petite fl√®che √† droite du menu des applications dans la barre des t√¢ches de Windows afin de faire appara√Ætre les applications masqu√©es.\nEffectuer un clic droit sur le logo de OneDrive (s‚Äôil n‚Äôest pas connect√©, il appara√Æt gris√© et barr√©).\nCliquer sur ¬´ Se connecter ¬ª. Nom d‚Äôutilisateur : Le m√™me que pour se connecter sur les ordinateurs du Coll√®ge, suivi de @cmontmorency.qc.ca.\nil s‚Äôagit des 7 derniers chiffres du num√©ro de DA.\nMot de passe : Le m√™me que pour le Wi-Fi ou les ordinateurs du Coll√®ge.\nLe mot de passe initial se trouve dans Col.NET ‚Üí Dossier personnel ‚Üí Autres informations\nSi aucun mot de passe est affich√© ? Votre compte n‚Äôest peut-√™tre pas encore cr√©√©. R√©essayez plus tard.\nSi la connexion a √©chou√©e ? R√©essayez dans quelques heures. Si le probl√®me dure plus de 48h, faites une demande sur le portail de service.\nCliquer sur Suivant lorsqu‚Äôun message s‚Äôaffiche disant : ¬´ S√©curisons votre compte ¬ª.\nPour configurer l‚Äôauthentification multifacteur (MFA) avec un t√©l√©phone :\nCliquer sur ¬´ Je veux configurer une autre m√©thode ¬ª Suivre l‚Äô√©tape ci-dessous Sur votre t√©l√©phone, installez l‚Äôapplication : Microsoft Authenticator (disponible dans le Play Store ou App Store)\nCliquez sur Suivant deux fois sur l‚Äôordinateur.\nSur la page qui affiche un code QR :\nOuvrir l‚Äôapplication sur votre t√©l√©phone Appuyer sur le + Choisir Compte professionnel ou scolaire Choisir Analyser le code QR Num√©riser le code QR affich√© √† l‚Äô√©cran de votre ordinateur Votre compte s‚Äôaffiche dans l‚Äôapplication.\nSur l‚Äôordinateur, cliquer sur Suivant\nDeux chiffres apparaissent √† l‚Äô√©cran :\nEntrez-les sur votre t√©l√©phone Cliquer sur Suivant, puis Termin√©\nVous avez la possibilit√© d‚Äôinstaller OneDrive sur votre t√©l√©phone mobile :\nSi vous souhaitez le faire, cliquer sur ¬´ T√©l√©charger l‚Äôapplication mobile ¬ª. Une page web va s‚Äôouvrir dans votre navigateur par d√©faut. Il vous suffira de suivre les instructions pour proc√©der √† l‚Äôinstallation. Si vous ne souhaitez pas utiliser l‚Äôapplication mobile ou pr√©f√©rez la configurer plus tard, cliquer sur ¬´ Plus tard ¬ª. Cliquer sur ¬´ Ouvrir mon dossier OneDrive ¬ª. L‚Äôexplorateur de fichiers va s‚Äôouvrir dans le dossier contenant les fichiers synchronis√©s, et la synchronisation va commencer. OneDrive est maintenant pr√™t √† √™tre utilis√© !",
    "description": "Cliquer sur la petite fl√®che √† droite du menu des applications dans la barre des t√¢ches de Windows afin de faire appara√Ætre les applications masqu√©es.\nEffectuer un clic droit sur le logo de OneDrive (s‚Äôil n‚Äôest pas connect√©, il appara√Æt gris√© et barr√©).\nCliquer sur ¬´ Se connecter ¬ª. Nom d‚Äôutilisateur : Le m√™me que pour se connecter sur les ordinateurs du Coll√®ge, suivi de @cmontmorency.qc.ca.\nil s‚Äôagit des 7 derniers chiffres du num√©ro de DA.",
    "tags": [],
    "title": "Connexion √† OneDrive ‚Äì Compte scolaire",
    "uri": "/outils_dev/onedrive/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences¬†\u003e¬†\rOutils de d√©veloppement",
    "content": "Qu‚Äôest-ce qu‚Äôun fichier et un dossier ? Fichier : Un document ou un programme (ex. : texte, image, tableur). Exemples : rapport.docx, photo.jpg, budget.xlsx\nDossier (ou r√©pertoire) : Contenant qui regroupe des fichiers et d‚Äôautres dossiers. Exemple : le dossier Documents contient des fichiers Word, PDF, etc.\nL‚Äôexplorateur de fichiers Ouvrir l‚Äôexplorateur : Raccourci clavier : Windows + E Ou clique sur l‚Äôic√¥ne üìÅ dans la barre des t√¢ches Principales zones : Volet de navigation √† gauche : acc√®s rapide √† Ce PC, T√©l√©chargements, Documents, etc. Zone principale : affiche le contenu du dossier s√©lectionn√© Barre d‚Äôadresse : montre le chemin du dossier actuel (ex. : Ce PC \u003e Documents \u003e Travaux) Barre d‚Äôoutils : bouton pour cr√©er, renommer, copier, coller, supprimer‚Ä¶ Cr√©er et organiser ses fichiers Cr√©er un dossier : Clique droit dans un espace vide S√©lectionne Nouveau \u003e Dossier Nomme le dossier (ex. : Projet Science) Renommer un fichier ou dossier : Clique droit \u003e Renommer Ou clique lentement deux fois sur le nom D√©placer un fichier : Glisser-d√©poser vers un autre dossier Ou : Copier (Ctrl + C) \u003e Coller (Ctrl + V) dans l‚Äôautre dossier Ou : Couper (Ctrl + X) \u003e Coller (Ctrl + V) pour le d√©placer Supprimer : S√©lectionner l‚Äô√©l√©ment \u003e touche Suppr Ou clic droit \u003e Supprimer Chemin d‚Äôacc√®s Un chemin indique l‚Äôemplacement d‚Äôun fichier.\nExemple :\nC:\\Utilisateurs\\Nathalie\\Documents\\Projet\\rapport.docx\rC: ‚Üí Disque dur principal Utilisateurs\\Nathalie ‚Üí ton profil Documents\\Projet ‚Üí dossiers imbriqu√©s rapport.docx ‚Üí fichier Extensions de fichiers L‚Äôextension indique le type de fichier. (ex. .docx, .jpg, .pdf, .xlsx, .mp3, etc.)\nPar d√©faut, Windows cache les extensions. Pour les voir :\nOuvre un dossier Clique sur Affichage \u003e Afficher \u003e Extensions de noms de fichiers Bonnes pratiques Nomme les fichiers de mani√®re claire (ex. : rapport_bio_2025.docx) Organise ton travail par sujets ou projets dans des dossiers Sauvegarde tes fichiers importants dans OneDrive ou sur une cl√© USB √âvite les accents et espaces dans les noms de fichiers si tu veux les utiliser dans des programmes (ex. : travaux_chimie au lieu de travaux chimie)",
    "description": "Qu‚Äôest-ce qu‚Äôun fichier et un dossier ? Fichier : Un document ou un programme (ex. : texte, image, tableur). Exemples : rapport.docx, photo.jpg, budget.xlsx\nDossier (ou r√©pertoire) : Contenant qui regroupe des fichiers et d‚Äôautres dossiers. Exemple : le dossier Documents contient des fichiers Word, PDF, etc.\nL‚Äôexplorateur de fichiers Ouvrir l‚Äôexplorateur : Raccourci clavier : Windows + E Ou clique sur l‚Äôic√¥ne üìÅ dans la barre des t√¢ches Principales zones : Volet de navigation √† gauche : acc√®s rapide √† Ce PC, T√©l√©chargements, Documents, etc.",
    "tags": [],
    "title": "Fichiers et r√©pertoires (dossiers)",
    "uri": "/outils_dev/fichiers_dossiers/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences¬†\u003e¬†\rOutils de d√©veloppement",
    "content": "Installation \u0026 premier lancement Aller sur le site officiel : https://code.visualstudio.com Cliquer sur Download for Windows Lancer le fichier t√©l√©charg√© (VSCodeSetup.exe) Accepter les conditions ‚Üí clique sur Suivant plusieurs fois Cocher ‚ÄúAdd to PATH‚Äù si disponible Cliquer sur Installer Lorsque l‚Äôinstallation est termin√©e, cliquer sur le raccourci Visual Studio Code dans le menu D√©marrer ou cherche ‚ÄúVisual Studio Code‚Äù dans la barre de recherche Tu devrais voir l‚Äô√©cran d‚Äôaccueil (Bienvenue ou Welcome)\nInterface principale Barre d‚Äôactivit√© (gauche) : acc√®s √† l‚Äôexplorateur, extensions, etc. Volet Explorateur : tes fichiers/sous-dossiers. √âditeur : l√† o√π tu √©cris ton code. Barre d‚Äôonglets : navigation entre fichiers ouverts. Terminal int√©gr√© (en bas, pas visible sur l‚Äôimage). Barre d‚Äô√©tat : info sur format du fichier, erreurs, etc. Lettre En fran√ßais A Barre d‚Äôactivit√©s B Volet lat√©ral principal C Groupes d‚Äô√©diteurs D Panneau E Barre d‚Äô√©tat Barre d‚Äôactivit√© La barre d‚Äôactivit√© situ√©e √† gauche de l‚Äô√©diteur, est une zone essentielle de l‚Äôinterface utilisateur. Elle donne acc√®s √† plusieurs vues et fonctionnalit√©s importantes. Elle contient les boutons suivants :\nLe bouton Explorateur (Explorer) vous donne acc√®s au panneau Explorateur, o√π vos fichiers appara√Ætront lorsque vous ouvrirez un dossier.\nLe bouton Recherche (Search) ouvre le panneau Recherche, o√π vous pouvez rechercher du texte dans les fichiers d'un dossier ouvert.\nLe bouton Contr√¥le de code source (Source Control) ouvre le panneau Contr√¥le de code source, o√π vous pouvez suivre les modifications apport√©es √† vos fichiers √† l'aide de Git.\nLe bouton Ex√©cuter et d√©boguer (Run and Debug) vous donne acc√®s au d√©bogueur VS Code.\nLe bouton Extensions ouvre un panneau o√π l'on peut installer et g√©rer les extensions de VS Code. Les extensions sont des modules qui ajoutent des fonctionnalit√©s √† VS Code.\nEn fonction des extensions que vous avez install√©es, la barre d‚Äôactivit√© peut inclure d‚Äôautres ic√¥nes.\nVid√©o YouTube: Interface de VS Code\nPersonnaliser l‚Äôapparence Menu : Fichier \u003e Pr√©f√©rences \u003e Th√®me de couleur Essaie ‚ÄúDark+‚Äù, ‚ÄúLight‚Äù, ou installe de nouveaux th√®mes dans les extensions Ouvrir ou cr√©er un projet Fichier ‚Üí Ouvrir un dossier‚Ä¶ (Ctrl+K Ctrl+O). Cr√©e ou s√©lectionne un dossier, puis clique S√©lectionner un dossier. Le dossier s‚Äôaffiche dans l‚ÄôExplorateur de VS Code, pr√™t √† √™tre utilis√© . Cr√©er \u0026 √©diter des fichiers S√©lectionner la vue Explorateur dans la barre d‚Äôactivit√© et s√©lectionner le bouton Nouveau fichier‚Ä¶ pour cr√©er un nouveau fichier dans votre espace de travail. Saisissez le nom du fichier et appuyez sur Entr√©e. Un fichier est ajout√© √† votre espace de travail et un √©diteur s‚Äôouvre dans la zone principale de la fen√™tre. Ex√©cuter du code Pour un script Python ou un bloc-notes Jupyter :\nOuvre script.py ou script.ipynb Clique sur le bouton Run ‚ñ∂Ô∏è en haut √† droite ou utilise le raccourci Ctrl + F5 Installer et configurer VS Code pour Python 1. Installation de VS Code Pour ceux qui ont un syst√®me d‚Äôexploitation Windows, voici deux fichiers ex√©cutables qui installeront automatiquement VS Code, Python et toutes les librairies n√©cessaires :\nPremi√®re √©tape Deuxi√®me √©tape Pour une installation manuelle : voici les liens utiles pour installer les outils de d√©veloppement (sur votre ordinateur personnel):\nT√©l√©charger et installer Python : Python T√©l√©charger et installer Visual Studio Code : Visual Studio Code - Mac, Linux, Windows Les extensions et biblioth√®ques √† installer dans VS Code: Python, Run, Pandas, Numpy, Matplotlib, SciPy Tutoriel pour installer des extensions sur VS Code Installer Jupyter Notebook sur Visual Studio Code (en anglais) : How to Install Jupyter Notebook in VSCode | Jupyter Notebook in Visual Studio Code (Easy) 2. Installer Python Va sur https://python.org \u003e T√©l√©charge et installe Python Coche ‚ÄúAdd Python to PATH‚Äù avant de cliquer sur ‚ÄúInstall Now‚Äù 3. Installer l‚Äôextension Python Dans VS Code, clique sur Extensions (ic√¥ne des blocs) ou Ctrl+Shift+X Recherche Python Clique sur Installer (√©diteur : Microsoft) Extensions utiles Python (Microsoft) : ex√©cution et d√©bogage. Jupyter : bloc-notes Jupyter. NumPy : Fonctions math√©matiques statistiques. Matplotlib : Graphiques. SciPy : Fonctions scientifiques et graphiques (ex: droite de r√©gression lin√©aire) Pandas : Traitement de fichiers CSV (extraction et nettoyage des donn√©es) Astuces clavier \u0026 productivit√© Glisser-d√©poser fichiers pour les ouvrir. Sauvegarde souvent avec Ctrl + S Commenter/d√©commenter une ligne : Ctrl+/. Utilise Ctrl + P pour ouvrir rapidement un fichier dans ton projet Aller √† une ligne : Ctrl+G. Formatage : Ctrl+K Ctrl+F. Renommer symboles : F2. IntelliSense : suggestions automatiques avec Ctrl+Space R√©f√©rences Tutorial: Get started with Visual Studio Code Interface de VS Code Getting started with Visual Studio Code Trucs \u0026 Astuces",
    "description": "Installation \u0026 premier lancement Aller sur le site officiel : https://code.visualstudio.com Cliquer sur Download for Windows Lancer le fichier t√©l√©charg√© (VSCodeSetup.exe) Accepter les conditions ‚Üí clique sur Suivant plusieurs fois Cocher ‚ÄúAdd to PATH‚Äù si disponible Cliquer sur Installer Lorsque l‚Äôinstallation est termin√©e, cliquer sur le raccourci Visual Studio Code dans le menu D√©marrer ou cherche ‚ÄúVisual Studio Code‚Äù dans la barre de recherche Tu devrais voir l‚Äô√©cran d‚Äôaccueil (Bienvenue ou Welcome)",
    "tags": [],
    "title": " ",
    "uri": "/outils_dev/vs-code/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences¬†\u003e¬†\rOutils de d√©veloppement¬†\u003e¬†",
    "content": "Extensions de d√©bogage VS Code prend en charge le d√©bogage pour Node.js et peut d√©boguer JavaScript, TypeScript, et d‚Äôautres langages compil√©s en JavaScript. Pour d‚Äôautres langages et environnements d‚Äôex√©cution, il existe des extensions de d√©bogage dans le Marketplace de VS Code.\nPar exemple pour Python:\nLe d√©bogueur est un outil utile qui vous permet d‚Äôinspecter le flux d‚Äôex√©cution de votre code et d‚Äôidentifier plus facilement les erreurs, ainsi que d‚Äôexplorer comment vos variables et donn√©es changent au fur et √† mesure que votre programme s‚Äôex√©cute.\nVous pouvez commencer le d√©bogage en d√©finissant un point d‚Äôarr√™t dans votre projet Python en cliquant dans la marge √† c√¥t√© de la ligne que vous souhaitez inspecter.\nLes points d‚Äôarr√™t D√©finition\rUn point d‚Äôarr√™t est un marqueur que vous placez dans votre code pour indiquer au d√©bogueur o√π arr√™ter l‚Äôex√©cution du programme. Cela vous permet d‚Äôinspecter l‚Äô√©tat de votre application √† ce moment pr√©cis, de v√©rifier les valeurs des variables et de suivre le flux d‚Äôex√©cution du code.\nAjout de points d‚Äôarr√™t Cliquez dans la marge gauche √† c√¥t√© d‚Äôune ligne de code. Vous pouvez √©galement s√©lectionner la ligne et appuyer sur F9, s√©lectionner D√©boguer \u003e Basculer le point d'arr√™t, ou faire un clic droit et s√©lectionner Point d'arr√™t \u003e Ins√©rer un point d'arr√™t.\nLe point d‚Äôarr√™t appara√Æt sous forme de point rouge dans la marge gauche.\nLorsque vous d√©boguez, une fois que votre programme atteint le point d‚Äôarr√™t, l‚Äôex√©cution s‚Äôarr√™te au point d‚Äôarr√™t, avant que le code sur cette ligne ne soit ex√©cut√©. Vous pourrait alors suivre les donn√©es dans la console de d√©bogage Python, et de progresser dans votre programme en utilisant la barre d‚Äôoutils de d√©bogage.\nVoici quelques instructions g√©n√©rales pour travailler avec les points d‚Äôarr√™t.\nLe point d‚Äôarr√™t est un bascule. Vous pouvez cliquer dessus, appuyer sur F9, ou utiliser D√©boguer \u003e Basculer le point d'arr√™t pour le supprimer ou le r√©ins√©rer. Pour d√©sactiver un point d‚Äôarr√™t sans le supprimer, survolez-le ou faites un clic droit dessus, et s√©lectionnez D√©sactiver le point d'arr√™t. Les points d‚Äôarr√™t d√©sactiv√©s apparaissent sous forme de points vides dans la marge gauche ou la fen√™tre des points d‚Äôarr√™t. Pour r√©activer un point d‚Äôarr√™t, survolez-le ou faites un clic droit dessus, et s√©lectionnez Activer le point d'arr√™t. Interface utilisateur du d√©bogueur Vue Ex√©cuter et D√©boguer : Affiche toutes les informations li√©es √† l‚Äôex√©cution et au d√©bogage. Barre d‚Äôoutils de d√©bogage : Contient des boutons pour les actions de d√©bogage courantes. Console de d√©bogage : Permet de voir et d‚Äôinteragir avec la sortie de votre code en cours d‚Äôex√©cution. Barre lat√©rale de d√©bogage : Permet d‚Äôinteragir avec la pile d‚Äôappels, les points d‚Äôarr√™t, les variables et les variables surveill√©es. D√©marrer le d√©bogage Pour commencer le d√©bogage, initialisez le d√©bogueur en appuyant sur F5. Comme c‚Äôest la premi√®re fois que vous d√©boguez ce fichier, un menu de configuration s‚Äôouvrira, vous permettant de s√©lectionner le type d‚Äôapplication que vous souhaitez d√©boguer. S‚Äôil s‚Äôagit d‚Äôun script Python, vous pouvez s√©lectionner Fichier Python ou Bloc-notes Jupyter.\nVue Ex√©cuter et D√©boguer : S√©lectionnez l‚Äôic√¥ne Ex√©cuter et D√©boguer dans la barre d‚Äôactivit√© ou utilisez le raccourci clavier ‚áß‚åòD (Windows, Linux Ctrl+Shift+D).\nActions de d√©bogage Une fois qu‚Äôune session de d√©bogage commence, la barre d‚Äôoutils de d√©bogage appara√Ætra en haut de l‚Äô√©diteur.\nbarre menu\nAction Raccourci Explication Continue / Pause F5 Continue : Reprendre l‚Äôex√©cution normale du programme/script (jusqu‚Äôau prochain point d‚Äôarr√™t).\nPause : Inspecter le code en cours d‚Äôex√©cution √† la ligne actuelle et d√©boguer ligne par ligne. Step Over F10 Ex√©cuter la m√©thode suivante comme une seule commande sans inspecter ou suivre ses √©tapes internes. Step Into F11 Entrer dans la m√©thode suivante pour suivre son ex√©cution ligne par ligne. Step Out Shift+F11 Lorsqu‚Äôon est dans une m√©thode ou une sous-routine, revenir au contexte d‚Äôex√©cution pr√©c√©dent en ex√©cutant les lignes restantes de la m√©thode actuelle comme une seule commande. Restart Ctrl+Shift+F5 Terminer l‚Äôex√©cution actuelle du programme et recommencer le d√©bogage en utilisant la configuration de lancement actuelle. Stop Shift+F5 Terminer l‚Äôex√©cution actuelle du programme. R√©f√©rences Deboguer dans VS Code\nDeboguer du Python dans VS Code\nGuide de d√©marrage rapide pour Python dans VS Code",
    "description": "Extensions de d√©bogage VS Code prend en charge le d√©bogage pour Node.js et peut d√©boguer JavaScript, TypeScript, et d‚Äôautres langages compil√©s en JavaScript. Pour d‚Äôautres langages et environnements d‚Äôex√©cution, il existe des extensions de d√©bogage dans le Marketplace de VS Code.\nPar exemple pour Python:\nLe d√©bogueur est un outil utile qui vous permet d‚Äôinspecter le flux d‚Äôex√©cution de votre code et d‚Äôidentifier plus facilement les erreurs, ainsi que d‚Äôexplorer comment vos variables et donn√©es changent au fur et √† mesure que votre programme s‚Äôex√©cute.",
    "tags": [],
    "title": "D√©boguer dans VS Code",
    "uri": "/outils_dev/vs-code/debogueur/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences¬†\u003e¬†\rOutils de d√©veloppement¬†\u003e¬†",
    "content": "Sur cette page, vous trouverez les √©tapes pour sauvegarder vos programmes dans VS Code.\nSauvegarde automatique Si un rond est pr√©sent √† droit du nom du fichier dans l‚Äôonglet en haut, c‚Äôest que votre travail n‚Äôest PAS sauvegard√© (comme dans l‚Äôexemple ci-dessous).\nPour ACTIVER la sauvegarde automatique, allez dans fichier, puis cliquez sur Enregistrement automatique.\nVous devriez maintenant voir un crochet √† gauche de cette option.\nIl devrait maintenant avoir un X √† gauche du nom du fichier dans l‚Äôonglet du haut. Ce qui signifie que le fichier est sauvegard√©.\nEnregistrer sous Lorsque vous ouvrez un fichier que vous avez t√©l√©charg√© (de la page du cours), vous pouvez l‚Äôenregistrer sous afin qu‚Äôil se sauvegarde au bon endroit. Par exemple dans votre One Drive du coll√®ge.\nS√©lectionnez Fichier, puis enregistrer sous.\nAssurez de choisir le bon dossier (exemple: OneDrive\\420-SN1-RE\\semaine_2). Vous pouvez renommer le fichier si vous le d√©sirez. Ensuite, appuyez sur Enregistrer.\nOuvrir le dossier Dans le panneau de gauche, s√©lectionnez Ouvrir le dossier. L‚Äôoption Ouvrir le dossier est aussi dans l‚Äôonlget Fichier.\nS√©lectionnez le dossier dans lequel vous voulez travailler.\nDans le panneau de gauche, vous devriez avoir tous les dossiers et fichiers contenus dans le dossier que vous avez choisi.\nDans l‚Äôexemple ci-dessous, nous pouvons voir le fichier (programme.ipynb) qui a √©t√© sauvegard√© dans la semaine 3.",
    "description": "Sur cette page, vous trouverez les √©tapes pour sauvegarder vos programmes dans VS Code.\nSauvegarde automatique Si un rond est pr√©sent √† droit du nom du fichier dans l‚Äôonglet en haut, c‚Äôest que votre travail n‚Äôest PAS sauvegard√© (comme dans l‚Äôexemple ci-dessous).\nPour ACTIVER la sauvegarde automatique, allez dans fichier, puis cliquez sur Enregistrement automatique.\nVous devriez maintenant voir un crochet √† gauche de cette option.\nIl devrait maintenant avoir un X √† gauche du nom du fichier dans l‚Äôonglet du haut.",
    "tags": [],
    "title": "Sauvegarde dans VS Code",
    "uri": "/outils_dev/vs-code/sauvegarde/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences¬†\u003e¬†\rOutils de d√©veloppement",
    "content": "Tutoriel pour VS Code et Jupyter Notebook Voici un fichier qui vous expliquera comment utiliser jupyter notebook dans VS Code : Tutoriel pour utiliser Jupyter avec VS Code\nBlocs-notes Jupyter dans VS Code Jupyter (anciennement IPython Notebook) est un projet open source qui vous permet de combiner facilement du texte Markdown et du code source Python ex√©cutable sur un canevas appel√© notebook.\nVisual Studio Code prend en charge l‚Äôutilisation des blocs-notes Jupyter en mode natif et via des fichiers de code Python.\nCr√©er, ouvrir et enregistrer des blocs-notes Jupyter Utiliser des cellules de code Jupyter Afficher, inspecter et filtrer les variables √† l‚Äôaide de l‚ÄôExplorateur de variables et de la visionneuse de donn√©es Se connecter √† un serveur Jupyter distant D√©boguer un bloc-notes Jupyter Configuration de votre environnement Pour utiliser Python dans Jupyter Notebooks, vous devez activer un environnement Anaconda dans VS Code ou un autre environnement Python dans lequel vous avez install√© le package Jupyter. Pour s√©lectionner un environnement, utilisez la commande Python : S√©lectionner un interpr√©teur dans la palette de commandes (Ctrl+Maj+P).\nUne fois l‚Äôenvironnement appropri√© activ√©, vous pouvez cr√©er et ouvrir un bloc-notes Jupyter, vous connecter √† un serveur Jupyter distant pour ex√©cuter des cellules de code et exporter un bloc-notes Jupyter sous forme de fichier Python.\nApprobation de l‚Äôespace de travail Lorsque vous commencez √† utiliser Jupyter Notebooks, vous devez vous assurer que vous travaillez dans un espace de travail approuv√©. Du code nuisible peut √™tre incorpor√© dans des blocs-notes et la fonctionnalit√© d‚Äôapprobation de l‚Äôespace de travail vous permet d‚Äôindiquer quels dossiers et leur contenu doivent autoriser ou restreindre l‚Äôex√©cution automatique de code.\nSi vous tentez d‚Äôouvrir un bloc-notes lorsque VS Code se trouve dans un espace de travail non approuv√© ex√©cutant le mode restreint, vous ne pourrez pas ex√©cuter de cellules et les sorties enrichies seront masqu√©es.\nCr√©er ou ouvrir un bloc-notes Jupyter Vous pouvez cr√©er un bloc-notes Jupyter en ex√©cutant la commande Cr√©er : un nouveau bloc-notes Jupyter √† partir de la palette de commandes (Ctrl+Maj+P) ou en cr√©ant un fichier dans votre espace de travail..ipynb\nEnsuite, s√©lectionnez un noyau √† l‚Äôaide du s√©lecteur de noyau en haut √† droite.\nApr√®s avoir s√©lectionn√© un noyau, le s√©lecteur de langue situ√© en bas √† droite de chaque cellule de code sera automatiquement mis √† jour vers la langue prise en charge par le noyau.\nSi vous disposez d‚Äôun bloc-notes Jupyter, vous pouvez l‚Äôouvrir en cliquant avec le bouton droit sur le fichier et en l‚Äôouvrant avec VS Code, ou via l‚Äôexplorateur de fichiers VS Code.\nCellules en cours d‚Äôex√©cution Ex√©cuter une seule cellule de code Une fois votre code ajout√©, vous pouvez ex√©cuter une cellule √† l‚Äôaide de l‚Äôic√¥ne Ex√©cuter √† gauche de la cellule et la sortie sera affich√©e sous la cellule de code.\nPour ex√©cuter une cellule de code s√©lectionn√©e, vous pouvez √©galement utiliser des raccourcis clavier en mode commande et en mode √©dition.\nCtrl+Entr√©e ex√©cute la cellule actuellement s√©lectionn√©e. Maj+Entr√©e ex√©cute la cellule actuellement s√©lectionn√©e et ins√®re une nouvelle cellule juste en dessous (le focus se d√©place vers la nouvelle cellule). Alt+Entr√©e ex√©cute la cellule actuellement s√©lectionn√©e et ins√®re une nouvelle cellule juste en dessous (le focus reste sur la cellule actuelle). Ex√©cuter plusieurs cellules de code L‚Äôex√©cution de plusieurs cellules de code peut √™tre accomplie de plusieurs fa√ßons. Vous pouvez utiliser la double fl√®che dans la barre d‚Äôoutils principale de l‚Äô√©diteur de bloc-notes pour ex√©cuter toutes les cellules du bloc-notes ou en s√©lectionnant Ex√©cuter tout, Ex√©cuter tout au-dessus ou Ex√©cuter tout en dessous au-dessus ou en dessous de la cellule de code actuelle.\nEx√©cuter des cellules dans la section Pour ex√©cuter plus facilement des cellules associ√©es dans un bloc-notes, vous pouvez ex√©cuter des cellules regroup√©es par un en-t√™te de section Markdown avec l‚Äôaction Ex√©cuter les cellules dans la section. Cette action est disponible dans la vue Plan du bloc-notes et pour les √©l√©ments Sticky Scroll.\nDans les √©l√©ments Sticky Scroll, cliquez avec le bouton droit sur l‚Äôen-t√™te de votre choix et ex√©cutez la section via l‚Äôaction dans le menu contextuel. Dans la vue Plan, s√©lectionnez l‚Äôic√¥ne de barre d‚Äôoutils qui appara√Æt au survol ou √† la s√©lection, puis ex√©cutez une seule cellule ou une section de cellules via les actions pr√©sent√©es.\nVid√©o: Ex√©cuter des cellules\nEnregistrez votre bloc-notes Jupyter Vous pouvez enregistrer votre bloc-notes Jupyter √† l‚Äôaide du raccourci clavier Ctrl+S ou Fichier \u003e enregistrer.\nExporter votre bloc-notes Jupyter Vous pouvez exporter un bloc-notes Jupyter sous forme de fichier Python, de fichier PDF ou de fichier HTML. Pour exporter, s√©lectionnez ... \u003e Exporter dans la barre d‚Äôoutils principale. Une liste d√©roulante d‚Äôoptions de format de fichier vous est alors pr√©sent√©e.\nNote: Pour l‚Äôexportation PDF, vous devez avoir install√© TeX (Installation Tex). Si vous ne le faites pas, vous serez averti que vous devez l‚Äôinstaller lorsque vous s√©lectionnerez l‚Äôoption PDF. Sachez √©galement que si vous avez une sortie SVG uniquement dans votre bloc-notes, elle ne sera pas affich√©e dans le PDF. Pour avoir des graphiques SVG dans un PDF, assurez-vous que votre sortie inclut un format d‚Äôimage non SVG, ou bien vous pouvez d‚Äôabord exporter au format HTML, puis enregistrer au format PDF √† l‚Äôaide de votre navigateur.\nUtiliser des cellules de code dans l‚Äô√©diteur de bloc-notes L‚Äô√©diteur de bloc-notes facilite la cr√©ation, la modification et l‚Äôex√©cution de cellules de code dans votre bloc-notes Jupyter.\nCr√©er une cellule de code Par d√©faut, un bloc-notes vierge aura une cellule de code vide pour commencer et un bloc-notes existant en placera une en bas. Ajoutez votre code √† la cellule de code vide pour commencer.\nModes de cellule de code Lorsque vous utilisez des cellules de code, une cellule peut √™tre dans trois √©tats : non s√©lectionn√©, mode commande et mode √©dition. Une barre verticale √† gauche d‚Äôune cellule de code et de la bordure de l‚Äô√©diteur indique l‚Äô√©tat actuel d‚Äôune cellule. Lorsqu‚Äôaucune barre n‚Äôest visible, la cellule est d√©s√©lectionn√©e. Lorsqu‚Äôune cellule est s√©lectionn√©e, elle peut √™tre en mode commande ou en mode √©dition.\nEn mode commande, une barre verticale pleine appara√Ætra √† gauche de la cellule. La cellule peut √™tre utilis√©e et accepte les commandes au clavier.\nEn mode √©dition, une barre verticale pleine est reli√©e par une bordure autour de l‚Äô√©diteur de cellules. Le contenu de la cellule (code ou Markdown) peut √™tre modifi√©.\nPour changer de mode, vous pouvez utiliser votre clavier ou votre souris. Sur votre clavier, appuyez sur la touche Entr√©e pour passer en mode √©dition ou sur la touche √âchap pour passer en mode commande. Avec votre souris, cliquez sur la barre verticale √† gauche de la cellule ou en dehors de la zone code/Markdown dans la cellule de code.\nAjouter des cellules de code suppl√©mentaires Vous pouvez ajouter des cellules de code √† l‚Äôaide de la barre d‚Äôoutils principale, de la barre d‚Äôoutils Ajouter une cellule (visible au survol) et des commandes clavier.\nPour ajouter une nouvelle cellule sous la cellule actuellement s√©lectionn√©e, utilisez l‚Äôic√¥ne plus dans la barre d‚Äôoutils principale ou la barre d‚Äôoutils de survol d‚Äôune cellule.\nLorsqu‚Äôune cellule de code est en mode commande, utilisez la touche A pour ajouter une cellule au-dessus et la touche B pour ajouter une cellule au-dessous de la cellule s√©lectionn√©e.\nS√©lectionnez une cellule de code Vous pouvez modifier une cellule de code s√©lectionn√©e √† l‚Äôaide de la souris ou des touches fl√©ch√©es haut/bas du clavier. Lorsqu‚Äôune cellule de code est en mode commande, vous pouvez √©galement utiliser la touche J (bas) et la touche K (haut).\nS√©lectionner plusieurs cellules de code Pour s√©lectionner plusieurs cellules, commencez par une cellule en mode s√©lectionn√©. Un arri√®re-plan rempli indique les cellules s√©lectionn√©es. Pour s√©lectionner des cellules cons√©cutives, maintenez la touche Maj enfonc√©e et cliquez sur la derni√®re cellule que vous souhaitez s√©lectionner. Pour s√©lectionner un groupe de cellules, maintenez la touche Ctrl enfonc√©e et cliquez sur les cellules que vous souhaitez ajouter √† votre s√©lection.\nD√©placer une cellule de code Vous pouvez d√©placer des cellules vers le haut ou vers le bas dans un bloc-notes par glisser-d√©poser. Pour les cellules de code, la zone de glisser-d√©poser se trouve √† gauche de l‚Äô√©diteur de cellule, comme indiqu√© ci-dessous. Pour les cellules Markdown rendues, vous pouvez cliquer n‚Äôimporte o√π pour faire glisser et d√©poser des cellules.\nPour d√©placer plusieurs cellules, vous pouvez utiliser les m√™mes zones de glisser-d√©poser dans n‚Äôimporte quelle cellule incluse dans la s√©lection.\nLe raccourci clavier Alt+Fl√®che d√©place √©galement une ou plusieurs cellules s√©lectionn√©es.\nSupprimer une cellule de code Pour supprimer du code, vous pouvez utiliser l‚Äôic√¥ne Supprimer dans la barre d‚Äôoutils de la cellule de code. Lorsque la cellule de code s√©lectionn√©e est en mode commande, vous pouvez utiliser le raccourci clavier dd.\nAnnuler votre derni√®re modification Vous pouvez utiliser la touche z pour annuler votre modification pr√©c√©dente, par exemple, si vous avez effectu√© une modification accidentelle, vous pouvez l‚Äôannuler √† l‚Äô√©tat correct pr√©c√©dent, ou si vous avez supprim√© une cellule accidentellement, vous pouvez la r√©cup√©rer.\nBasculer entre le code et Markdown L‚Äô√©diteur de bloc-notes vous permet de modifier facilement les cellules de code entre Markdown et le code. La s√©lection du s√©lecteur de langue en bas √† droite d‚Äôune cellule vous permettra de basculer entre Markdown et, le cas √©ch√©ant, toute autre langue prise en charge par le noyau s√©lectionn√©.\nVous pouvez √©galement utiliser le clavier pour modifier le type de cellule. Lorsqu‚Äôune cellule est s√©lectionn√©e et en mode commande, la touche M bascule le type de cellule sur Markdown et la touche Y bascule le type de cellule sur code.\nUne fois Markdown d√©fini, vous pouvez entrer du contenu au format Markdown dans la cellule de code.\nPour afficher des cellules Markdown, vous pouvez cocher la barre d‚Äôoutils de la cellule ou utiliser les raccourcis clavier Ctrl+Entr√©e et Maj+Entr√©e.\nEffacer la sortie ou red√©marrer/interrompre le noyau Si vous souhaitez effacer toutes les sorties de cellule de code ou red√©marrer/interrompre le noyau, vous pouvez le faire √† l‚Äôaide de la barre d‚Äôoutils principale de l‚Äô√©diteur de bloc-notes.\nActiver/d√©sactiver les num√©ros de ligne Lorsque vous √™tes en mode commande, vous pouvez activer ou d√©sactiver la num√©rotation des lignes dans une seule cellule de code √† l‚Äôaide de la touche L.\nPour basculer la num√©rotation des lignes pour l‚Äôensemble du bloc-notes, utilisez Maj+L en mode commande sur n‚Äôimporte quelle cellule.\nTable des mati√®res Pour naviguer dans votre bloc-notes, ouvrez l‚ÄôExplorateur de fichiers dans la barre d‚Äôactivit√©. Ouvrez ensuite l‚Äôonglet Plan dans la barre lat√©rale.\nNote: Par d√©faut, le plan n‚Äôaffichera que Markdown. Pour afficher les cellules de code, activez le param√®tre suivant : Contour du bloc-notes \u003e : Afficher les cellules de code.\nPrise en charge d‚ÄôIntelliSense dans l‚Äô√©diteur de bloc-notes Jupyter La fen√™tre Python Jupyter Notebook Editor contient des informations compl√®tes sur IntelliSense : saisie semi-automatique du code, listes de membres, informations rapides sur les m√©thodes et conseils de param√®tre. Vous pouvez √™tre tout aussi productif en tapant dans la fen√™tre de l‚Äô√©diteur de bloc-notes que dans l‚Äô√©diteur de code.\nExplorateur de variables et visionneuse de donn√©es Dans un bloc-notes Python, il est possible d‚Äôafficher, d‚Äôinspecter, de trier et de filtrer les variables de votre session Jupyter actuelle. En s√©lectionnant l‚Äôic√¥ne Variables dans la barre d‚Äôoutils principale apr√®s avoir ex√©cut√© le code et les cellules, vous verrez une liste des variables actuelles, qui seront automatiquement mises √† jour au fur et √† mesure que les variables sont utilis√©es dans le code. Le volet des variables s‚Äôouvre en bas du bloc-notes.\nVisionneuse de donn√©es Pour plus d‚Äôinformations sur vos variables, vous pouvez √©galement double-cliquer sur une ligne ou utiliser le bouton Afficher la variable dans la visionneuse de donn√©es en regard de la variable pour obtenir une vue plus d√©taill√©e d‚Äôune variable dans la visionneuse de donn√©es.\nVous pouvez √©galement utiliser l‚Äôexp√©rience de visualisation des donn√©es offerte par d‚Äôautres extensions comme Data Wrangler. L‚Äôextension Data Wrangler offre une interface utilisateur riche pour afficher des informations sur vos donn√©es et vous aide √† effectuer le profilage des donn√©es, les contr√¥les qualit√©, les transformations, etc.\nFiltrage des lignes Le filtrage des lignes dans la visionneuse de donn√©es peut √™tre effectu√© en tapant dans la zone de texte en haut de chaque colonne. Tapez une cha√Æne que vous souhaitez rechercher et toute ligne contenant cette cha√Æne dans la colonne sera trouv√©e :\nSi vous voulez trouver une correspondance exacte, faites pr√©c√©der votre filtre de ‚Äò=‚Äô :\nSauvegarde des parcelles Pour enregistrer un trac√© √† partir de votre bloc-notes, il suffit de survoler la sortie et de s√©lectionner l‚Äôic√¥ne Enregistrer en haut √† droite.\nD√©boguer un bloc-notes Jupyter Il existe deux fa√ßons diff√©rentes de d√©boguer un notebook Jupyter : un mode plus simple appel√© ¬´ Run by Line ¬ª et un mode de d√©bogage complet.\nNote: Ces deux fonctionnalit√©s n√©cessitent ipykernel 6+.\nD√©boguer par ligne Ex√©cuter par ligne vous permet d‚Äôex√©cuter une cellule une ligne √† la fois, sans √™tre distrait par d‚Äôautres fonctionnalit√©s de d√©bogage VS Code. Pour commencer, s√©lectionnez le bouton Ex√©cuter par ligne dans la barre d‚Äôoutils de la cellule :\nUtilisez le m√™me bouton pour avancer d‚Äôune d√©claration. Vous pouvez s√©lectionner le bouton Arr√™ter la cellule pour arr√™ter plus t√¥t ou le bouton Continuer dans la barre d‚Äôoutils pour continuer √† s‚Äôex√©cuter jusqu‚Äô√† la fin de la cellule.\nD√©boguer la cellule Si vous souhaitez utiliser l‚Äôensemble complet des fonctionnalit√©s de d√©bogage prises en charge dans VS Code, telles que les points d‚Äôarr√™t et la possibilit√© d‚Äôeffectuer un pas √† pas d√©taill√© dans d‚Äôautres cellules et modules, vous pouvez utiliser le d√©bogueur VS Code complet.\nCommencez par d√©finir les points d‚Äôarr√™t dont vous avez besoin en cliquant dans la marge gauche d‚Äôune cellule de bloc-notes. S√©lectionnez ensuite le bouton D√©boguer la cellule dans le menu en regard du bouton Ex√©cuter. Cela ex√©cutera la cellule dans une session de d√©bogage et s‚Äôarr√™tera sur vos points d‚Äôarr√™t dans tout code en cours d‚Äôex√©cution, m√™me s‚Äôil se trouve dans une autre cellule ou un autre fichier..py Vous pouvez utiliser la vue D√©boguer, la console D√©boguer et tous les boutons de la barre d‚Äôoutils D√©boguer comme vous le feriez normalement dans VS Code. Rechercher dans le bloc-notes Vous pouvez effectuer une recherche dans un bloc-notes (ou des parties de celui-ci en filtrant les options de recherche) √† l‚Äôaide du raccourci clavier Ctrl/Cmd + F. Cliquez sur l‚Äôoption Filtrer (ic√¥ne en forme d‚Äôentonnoir) pour effectuer une recherche dans :\nEntr√©e de cellule Markdown (Markdown Source) Sortie de cellule Markdown (Markdown rendu) Entr√©e de cellule de code (Source de cellule de code) Sortie de cellule de code (Sortie de cellule) Les recherches de bloc-notes sont des entr√©es de cellule filtr√©es uniquement par d√©faut.\nR√©f√©rence: Documentation de VS Code",
    "description": "Tutoriel pour VS Code et Jupyter Notebook Voici un fichier qui vous expliquera comment utiliser jupyter notebook dans VS Code : Tutoriel pour utiliser Jupyter avec VS Code\nBlocs-notes Jupyter dans VS Code Jupyter (anciennement IPython Notebook) est un projet open source qui vous permet de combiner facilement du texte Markdown et du code source Python ex√©cutable sur un canevas appel√© notebook.\nVisual Studio Code prend en charge l‚Äôutilisation des blocs-notes Jupyter en mode natif et via des fichiers de code Python.",
    "tags": [],
    "title": " ",
    "uri": "/outils_dev/jupyter/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences¬†\u003e¬†\rOutils de d√©veloppement",
    "content": "Cette page rassemble une s√©rie de petits d√©tails importants pour bien d√©buter en programmation. Ces astuces visent √† rendre l‚Äôutilisation du clavier et de l‚Äôenvironnement plus fluide, surtout en contexte de cours avec Jupyter Notebook.\nRaccourcis clavier utiles Copier, couper, coller Ctrl + C : Copie la s√©lection. Ctrl + X : Coupe la s√©lection (la s√©lection sera effac√©e, mais pourra √™tre coll√©e). Ctrl + V : Colle le contenu pr√©c√©demment copi√© ou coup√©. Astuce\rSi aucun texte n‚Äôest s√©lectionn√©, Ctrl + C ou Ctrl + X agit sur toute la ligne courante. Cela permet de d√©placer rapidement du code sans avoir √† s√©lectionner manuellement.\nAnnuler et refaire Ctrl + Z : Annule la derni√®re action (effacement, erreur de frappe‚Ä¶). Ctrl + Y : Refait une action qui a √©t√© annul√©e (r√©tablir). Supprimer dans les deux directions Retour arri√®re (‚Üê ou Backspace) : Efface le caract√®re √† gauche du curseur. Suppr (ou Delete) : Efface le caract√®re √† droite du curseur. √Ä retenir\rLa touche Suppr permet de corriger plus rapidement sans d√©placer le curseur.\nChanger de fen√™tre Alt + Tab : Permet de basculer rapidement d‚Äôune fen√™tre ouverte √† une autre (navigateur, Notebook, etc.). Astuce\rTu peux garder Alt enfonc√© et appuyer plusieurs fois sur Tab pour faire d√©filer les fen√™tres disponibles.\nDiviser son √©cran de travail Travailler avec deux fen√™tres c√¥te √† c√¥te facilite la lecture de consignes tout en codant.\nAvec le clavier : Touche Windows + ‚Üê ou ‚Üí pour coller une fen√™tre √† gauche ou √† droite. Touche Windows + ‚Üë pour que la fen√™tre prenne tout l‚Äô√©cran. Touche Windows + ‚Üì pour d√©coller la fen√™tre. Avec la souris : Clique sur la barre de titre de la fen√™tre (le haut), puis glisse-la vers le c√¥t√© gauche ou droit de l‚Äô√©cran. Elle s‚Äôalignera automatiquement pour occuper la moiti√© de l‚Äô√©cran. Astuce\rTu peux ensuite s√©lectionner une autre fen√™tre √† mettre dans l‚Äôautre moiti√© de l‚Äô√©cran.\nEx√©cution d‚Äôun programme dans Jupyter Notebook Ex√©cuter une cellule Ctrl + Entr√©e : Ex√©cute la cellule actuelle, sans passer √† la suivante. Shift + Entr√©e : Ex√©cute la cellule, puis passe √† la suivante (ou cr√©e une nouvelle cellule si n√©cessaire). Diff√©rence entre les deux\rCtrl + Entr√©e est utile pour r√©ex√©cuter plusieurs fois une m√™me cellule. Shift + Entr√©e permet d‚Äôencha√Æner l‚Äôex√©cution de plusieurs cellules vers le bas. Arr√™ter un programme bloqu√© Quand un programme tourne en boucle ou prend trop de temps √† s‚Äôex√©cuter dans une cellule :\nClique dans la cellule Appuie sur le bouton ‚ÄúStop‚Äù dans la barre du notebook (g√©n√©ralement un carr√© noir) Ou utilise le menu Kernel \u003e Interrupt ou Interrompre Attention\rN‚Äôessaie pas de recharger la page tout de suite : essaie d‚Äôabord d‚Äôinterrompre l‚Äôex√©cution proprement.\nTrouver les symboles importants du clavier En programmation, on utilise souvent des caract√®res sp√©cifiques.\nLes images suivantes permettent de situer les touches pour obtenir ces carct√®res:\nCaract√®res Emplacement sur le clavier { } [ ] : \u0026 + ' ' \" \" ( ) | / \\ R√©sum√© des raccourcis Action Raccourci D√©tail Copier Ctrl + C Copie la s√©lection ou toute la ligne si rien n‚Äôest s√©lectionn√© Couper Ctrl + X Coupe la s√©lection ou toute la ligne si rien n‚Äôest s√©lectionn√© Coller Ctrl + V Colle le contenu copi√© ou coup√© Annuler Ctrl + Z Annule la derni√®re action Refaire Ctrl + Y Refait une action annul√©e Supprimer √† gauche Retour arri√®re Efface le caract√®re pr√©c√©dent Supprimer √† droite Suppr (Delete) Efface le caract√®re suivant Changer de fen√™tre Alt + Tab Bascule d‚Äôune fen√™tre √† une autre Coller une fen√™tre √† gauche/droite Win + ‚Üê / Win + ‚Üí Organise les fen√™tres sur l‚Äô√©cran Ex√©cuter une cellule (Jupyter) Ctrl + Entr√©e Ex√©cute sans passer √† la cellule suivante Ex√©cuter et avancer (Jupyter) Shift + Entr√©e Ex√©cute et passe √† la cellule suivante Arr√™ter un programme Bouton ‚ÄúStop‚Äù ou menu Interrompt un programme bloqu√© dans une cellule Notebook",
    "description": "Cette page rassemble une s√©rie de petits d√©tails importants pour bien d√©buter en programmation. Ces astuces visent √† rendre l‚Äôutilisation du clavier et de l‚Äôenvironnement plus fluide, surtout en contexte de cours avec Jupyter Notebook.\nRaccourcis clavier utiles Copier, couper, coller Ctrl + C : Copie la s√©lection. Ctrl + X : Coupe la s√©lection (la s√©lection sera effac√©e, mais pourra √™tre coll√©e). Ctrl + V : Colle le contenu pr√©c√©demment copi√© ou coup√©.",
    "tags": [],
    "title": "Astuces, touches sp√©ciales et +",
    "uri": "/outils_dev/trucs_pratiques/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences¬†\u003e¬†\rOutils de d√©veloppement",
    "content": "Introduction au Markdown dans Jupyter Notebook Markdown est un langage de balisage l√©ger qui vous permet de formater du texte en utilisant une syntaxe simple. Dans Jupyter Notebook, vous pouvez utiliser des cellules Markdown pour ajouter des titres, des listes, des liens, des images, et bien plus encore.\nComment cr√©er une cellule Markdown Cr√©er une nouvelle cellule : Cliquez sur le bouton ‚Äú+‚Äù dans la barre d‚Äôoutils pour ajouter une nouvelle cellule. Changer le type de cellule : Cliquez sur le menu d√©roulant ‚ÄúCode‚Äù dans la barre d‚Äôoutils et s√©lectionnez ‚ÄúMarkdown‚Äù. Vous pouvez √©galement utiliser le raccourci clavier Esc puis M. √âcrire du texte en Markdown : Tapez votre texte en utilisant la syntaxe Markdown. Ex√©cuter la cellule : Appuyez sur Shift + Enter pour ex√©cuter la cellule et afficher le texte format√©. Les bases du Markdown Titres et sous-titres:\nUtilisez les di√®ses # pour cr√©er des titres. Le nombre de di√®ses indique le niveau du titre.\n# Titre de niveau 1 ## Titre de niveau 2 ### Titre de niveau 3\rTexte en gras et en italique:\nPour mettre du texte en gras, encadrez-le avec deux ast√©risques ** ou deux tirets bas __.\n**texte en gras** __texte en gras__\rPour mettre du texte en italique, encadrez-le avec un ast√©risque * ou un tiret bas _.\n*texte en italique* _texte en italique_\rPour mettre du texte en gras et en italique, encadrez-le avec trois ast√©risques *** ou trois tirets bas ___.\n***Gras et italique*** ___Gras et italique___\rListes:\nListes √† puces:\nUtilisez des tirets -, des ast√©risques * ou des signes plus + pour cr√©er des listes √† puces.\n- √âl√©ment 1 - √âl√©ment 2 - √âl√©ment 3\rListes num√©rot√©es:\nUtilisez des chiffres suivis d‚Äôun point pour cr√©er des listes num√©rot√©es.\n1. Premier √©l√©ment 2. Deuxi√®me √©l√©ment 3. Troisi√®me √©l√©ment\rLiens et images:\nPour ins√©rer un lien, utilisez la syntaxe suivante :\n[Texte du lien](URL_du_lien)\rPour ins√©rer une image, utilisez la syntaxe suivante :\n![Texte alternatif](URL_de_l'image)\rBlocs de code:\nUtilisez des accents graves ` (backticks) pour ins√©rer du code en ligne :\n`print(\"Hello, World!\")`\rTableaux:\nCr√©ez des tableaux en utilisant des barres verticales | et des traits d‚Äôunion - pour d√©limiter les en-t√™tes et les colonnes :\n| En-t√™te 1 | En-t√™te 2 | |-----------|-----------| | Cellule 1 | Cellule 2 | | Cellule 3 | Cellule 4 |\rCitations:\nUtilisez le symbole \u003e pour cr√©er des citations.\n\u003e Ceci est une citation.\rFormules math√©matiques:\nUtilisez LaTeX pour √©crire des formules math√©matiques. Encadrez vos formules avec des signes dollar $.\n$E = mc^2$\rTexte barr√©:\nUtilisez deux tildes ~~ pour barrer du texte.\n~~texte barr√©~~\rBlocs de texte surlign√©:\nUtilisez trois accents graves ^^^ pour surligner des blocs de texte.\n^^^markdown\rExemples pratiques Exemple de titre et de paragraphe # Mon chapitre sur le Markdown Bienvenue dans ce chapitre sur le Markdown dans Jupyter Notebook. Vous apprendrez √† formater du texte facilement.\rExemple de liste et de lien ## Liste des sujets abord√©s - Introduction au Markdown - Syntaxe de base - Les titres - Texte en gras et en italique - Les listes - Exemples pratiques - [Documentation officielle](https://jupyter-notebook.readthedocs.io/en/stable/examples/Notebook/Working%20With%20Markdown%20Cells.html)\rExemple d‚Äôimage et de bloc de code ## Exemple d'image ![Logo Jupyter](https://jupyter.org/assets/main-logo.svg) ## Exemple de code Python ```python def salut(nom): return f\"Hello, {nom}!\" print(salut(\"world\"))\rVid√©o YouTube Cr√©er des cellules Markdowns dans Jupyter Notebook",
    "description": "Introduction au Markdown dans Jupyter Notebook Markdown est un langage de balisage l√©ger qui vous permet de formater du texte en utilisant une syntaxe simple. Dans Jupyter Notebook, vous pouvez utiliser des cellules Markdown pour ajouter des titres, des listes, des liens, des images, et bien plus encore.\nComment cr√©er une cellule Markdown Cr√©er une nouvelle cellule : Cliquez sur le bouton ‚Äú+‚Äù dans la barre d‚Äôoutils pour ajouter une nouvelle cellule.",
    "tags": [],
    "title": " ",
    "uri": "/outils_dev/markdown/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences",
    "content": "1. Comporte-toi comme si tu √©tais d√©j√† en emploi. Arrive √† l‚Äôheure, sois pr√™t √† travailler, et respecte les √©ch√©ances. Ton attitude ici pr√©pare ton avenir professionnel.\n2. Respecte-toi, donc agis avec respect. Ton comportement refl√®te la mani√®re dont tu te consid√®res. Adopte une attitude calme, polie et attentive envers toi-m√™me, les autres et l‚Äôenseignant¬∑e.\n3. Sois pr√©sent, mentalement et physiquement. Utilise ton cellulaire seulement pour les besoins du cours. Reste concentr√©¬∑e pendant les activit√©s, comme tu le ferais dans un contexte de travail.\n4. Ose poser des questions, mais aussi √©couter. Ton implication est valoris√©e. La participation active et l‚Äô√©coute respectueuse des autres sont essentielles √† une ambiance d‚Äôapprentissage saine.\n5. Travaille avec rigueur et honn√™tet√©. Faire de son mieux, c‚Äôest une forme de respect de soi. Le plagiat ou la tricherie nuisent √† ton apprentissage r√©el et √† ta cr√©dibilit√© future.",
    "description": "1. Comporte-toi comme si tu √©tais d√©j√† en emploi. Arrive √† l‚Äôheure, sois pr√™t √† travailler, et respecte les √©ch√©ances. Ton attitude ici pr√©pare ton avenir professionnel.\n2. Respecte-toi, donc agis avec respect. Ton comportement refl√®te la mani√®re dont tu te consid√®res. Adopte une attitude calme, polie et attentive envers toi-m√™me, les autres et l‚Äôenseignant¬∑e.\n3. Sois pr√©sent, mentalement et physiquement. Utilise ton cellulaire seulement pour les besoins du cours. Reste concentr√©¬∑e pendant les activit√©s, comme tu le ferais dans un contexte de travail.",
    "tags": [],
    "title": "R√®glements de classe",
    "uri": "/regles/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences",
    "content": "",
    "description": "",
    "tags": [],
    "title": "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ",
    "uri": "/separateur_section/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences",
    "content": "Liste d‚Äôattente pour poser des questions Cliquez ici pour entrer votre nom\nPlan de cours Plan de cours\nCalendrier scolaire et r√©partition des 15 semaines Calendrier scolaire R√©partition des 15 semaines Groupe 09\n(lundi 15h20)\rGroupe 11\n(mercredi 08h00)\rGroupe 10\n(vendredi 15h20)\rCours 01\r25 ao√ªt\nQuiz\r27 ao√ªt\nQuiz\r22 ao√ªt\nQuiz\rCours 02\r4 septembre\r3 septembre\r29 ao√ªt\rCours 03\r8 septembre\r10 septembre\r5 septembre\rCours 04\r15 septembre\r17 septembre\r12 septembre\rCours 05\r√âvaluation #1 (20%)\n22 septembre (grp9)\n24 septembre (grp11)\n19 septembre (grp10)\rCours 06\r29 septembre\r1er octobre\r26 septembre\rCours 07\r6 octobre\r8 octobre\r3 octobre\rCours 08\r20 octobre\r22 octobre\r17 octobre\rCours 09\r27 octobre\r29 octobre\r24 octobre\rCours 10\r√âvaluation #2 (25%)\n3 novembre(grp9)\n5 novembre (grp11)\n1 octobre (grp10)\rCours 11\r12 novembre\r14 novembre\r7 novembre\rCours 12\r17 novembre\r19 novembre\r21 novembre\rCours 13\r24 novembre\r26 novembre\r28 novembre\rCours 14\r1er d√©cembre\r3 d√©cembre\r5 d√©cembre\rCours 15\r√âvaluation #3 (20%) Remise du projet (35%)\n8 d√©cembre (grp9)\n10 d√©cembre (grp11)\n12 d√©cembre (grp10)\rDates sujettes √† changement.",
    "description": "Liste d‚Äôattente pour poser des questions Cliquez ici pour entrer votre nom\nPlan de cours Plan de cours\nCalendrier scolaire et r√©partition des 15 semaines Calendrier scolaire R√©partition des 15 semaines Groupe 09\n(lundi 15h20)\rGroupe 11\n(mercredi 08h00)\rGroupe 10\n(vendredi 15h20)\rCours 01\r25 ao√ªt\nQuiz\r27 ao√ªt\nQuiz\r22 ao√ªt\nQuiz\rCours 02\r4 septembre\r3 septembre\r29 ao√ªt\rCours 03\r8 septembre\r10 septembre\r5 septembre\rCours 04\r15 septembre\r17 septembre\r12 septembre\rCours 05\r√âvaluation #1 (20%)",
    "tags": [],
    "title": "Les s√©ances de cours",
    "uri": "/cours/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences",
    "content": "Objectifs Comprendre les objectifs du cours et les r√®glements du coll√®ge √† respecter (Quiz WooClap) Vous connecter √† votre compte OneDrive scolaire. Cr√©er une structure de dossiers pour le cours. Comprendre l‚Äôinterface de VS Code Ouvrir un dossier et un fichier (.ipynb) dans VS Code. Cr√©er un fichier .ipynb dans VS Code. √âcrire et ex√©cuter du code Python simple. Sauvegarder vos fichiers de code. 1. Pr√©sentation du cours Cliquez ici pour ouvrir le plan de cours et trouver le quiz interactif\nR√©ponses se trouvent dans le plan de cours\rUtilisez le plan de cours et au besoin les calendriers scolaires pour trouver les bonnes r√©ponses aux questions du quiz. Vous avez 20 minutes pour r√©pondre √† toutes les questions.\nPause 5 minutes\n2. L‚Äôenvironnement de travail - Activit√© guid√©e √âtape 1 ‚Äì Se connecter √† votre compte OneDrive du c√©gep OneDrive est un stockage et synchronisation de fichiers personnels ou scolaires dans le cloud et accessible √† partir de n‚Äôimporte quel emplacement sur n‚Äôimporte quel appareil. Id√©al pour le travail en cours et le partage avec des personnes sp√©cifiques. Les documents sont priv√©s jusqu‚Äô√† ce que vous les partagez. Suivez les √©tapes sur la page Se connecter √† OneDrive pour vous connecter √† votre compte OneDrive scolaire.\nImportant\r√Ä chaque fois que vous acc√©der √† votre poste de travail, assurez-vous que l‚Äôic√¥ne du nuage est bleue comme ci-dessous : C‚Äôest √† vous de veiller √† la bonne sauvegarde de vos travaux. En cas de probl√®me, l‚Äôenseignante pourra difficilement vous aider, alors soyez vigilants d√®s le d√©but. √âtape 2 ‚Äì Organisation des fichiers Sachez que..\rVous pouvez changer les noms des dossiers sugg√©r√©s, en autant que vous utilisiez des noms repr√©sentatifs.\nDans l‚Äôexplorateur de fichiers (OneDrive), allez dans le dossier Documents et cr√©ez un sous-dossier nomm√© programmation-sciences. Dans ce dossier, cr√©er au moins trois (3) sous-dossiers nomm√©s semaine01-environnement, semaine02-intro-python et semaine03-algorithme. Allez sur Moodle et t√©l√©chargez le fichier semaine01.ipynb. Allez dans l‚ÄôExplorateur de fichiers et le dossier T√©l√©chargement. Si l‚Äôextension (.ipynb) du fichier n‚Äôapparait pas, cliquez sur Afficher\u003eAfficher\u003eExtensions des noms de fichiers D√©placez (Ctrl + X et Ctrl + V) ou glissez-d√©posez le fichier semaine01.ipynb de T√©l√©chargements vers le dossier semaine01-environnement. Pause 5 minutes\n√âtape 3 ‚Äì D√©couverte de VS Code et utilisation d‚Äôun bloc-notes Jupyter Nous allons travailler avec VS Code, un √©diteur de code, et comprendre comment ouvrir un dossier de travail avec un fichier pr√©sent. Nous allons par la suite cr√©er un fichier qui nous permettra d‚Äô√©crire du code.\nPour ouvrir VS Code, cliquez la barre de recherche (loupe) en bas de votre √©cran, puis √©crivez tout simplement VS, la premi√®re application visible devrait √™tre Visual Studio Code. Lorsque vous ouvrez VS Code pour la premi√®re fois, la page d‚Äôaccueil devrait s‚Äôafficher et proposer diff√©rentes actions pour d√©marrer.\nIdentifiez les zones principales Description des zones principales\nS√©lectionnez l‚Äôonglet Explorateur sur la barre lat√©rale.\nS√©lectionner le menu Fichier \u003e Ouvrir le dossier‚Ä¶, choisir le dossier programmation-sciences\nSachez que..\rPour ouvrir un dossier vous pouvez aussi aller dans la page d‚Äôaccueil, cliquer sur le lien Ouvrir un dossier‚Ä¶, puis, chercher le dossier √† ouvrir:\nAssurez-vous que le fichier t√©l√©charg√© et d√©plac√© pr√©c√©demment se trouve dans le sous-dossier semaine01-environnement\nCliquez sur le nom du fichier pour l‚Äôouvrir dans l‚Äô√âditeur (√† droite).\nCliquez sur la fl√®che √† droite de la cellule (pour ex√©cuter le code). Vous devriez voir ceci:\n√âtape 4 ‚Äì Cr√©er un nouveau bloc-notes Jupyter Dans l‚ÄôExplorateur de VS Code, cliquer sur Nouveau fichier\nNommez-le fichier premier_notebook.ipynb.\nAjoutez un cellule de type Marquage (Markdown) Ajoutez le contenu suivant: # Semaine 1 ‚Äì Environnement de d√©veloppement ## Mon premier bloc-notes Nom de l'√©tudiant.e: Ajouter un cellule Code (Python) et √©crire le commentaire (#) et code ci-dessous Puis cliquer sur Ex√©cuter Tout.\nSauvegarder avec Ctrl + S ou Fichier \u003e Enregistrer. Le point blanc sur l‚Äôonglet du fichier devrai disparaitre.\nActiver la sauvegarde automatique, via l‚Äôonglet Fichier, puis cliquez sur Enregistrement automatique. Vous devriez maintenant voir un crochet √† gauche de cette option.\nPour ce fichier, VS Code d√©tectera les modifications et fera la sauvegarde automatiquement, mais vous pouvez √† tout moment appuyer sur Ctrl + S pour forcer la sauvegarde. Cr√©er une nouvelle cellule de code et ajoutez ceci:\n3 * (4 + 2)\rAssurez-vous que la sauvegarde automatique s‚Äôest faite, c‚Äôest-√†-dire que le point blanc sur l‚Äôonglet du fichier a disparu et a √©t√© remplac√© par un X. Ce qui signifie que le fichier est sauvegard√©.\nVous pouvez √† nouveau cliquer sur Ex√©cuter tout pour voir le r√©sultat de la derni√®re cellule de code.\nBonnes pratiques Organisez bien vos projets : Utilisez un dossier par th√®me ou par semaine Nommez vos fichiers clairement : calcul_masse.ipynb, analyse_temp.ipynb La sauvegarde automatique ou sauvegardez r√©guli√®rement\nFermez les notebooks proprement\nEn haut √† droite du nom d‚Äôun notebook, cliquez sur X pour fermer le fichier. Retour r√©flexif Avez-vous rencontr√© des probl√®mes ? Qu‚Äôest-ce qui vous semble encore flou ? Que fait exactement un notebook quand on l‚Äôex√©cute ? Atelier Dans votre dossier semaine1, cr√©ez un sous-dossier nomm√© atelier.\nLancez Visual Studio Code et ouvrez ce dossier.\nCr√©ez un nouveau fichier Jupyter nomm√© atelier1.ipynb.\nDans une premi√®re cellule Markdown, √©crivez un commentaire avec votre nom, la date, et l‚Äôobjectif de l‚Äôatelier.\nDans une deuxi√®me cellule Code, affichez un message de bienvenue avec print().\n# Message propos√© : print(\"Bienvenue dans le cours de programmation en sciences‚Äâ!\")\rD√©posez votre fichier .ipynb sur Moodle, dans la boite de remise pr√©vue √† cet effet. √Ä faire avant le prochain cours Lire la prochaine le√ßon : 2. Variables, types, entr√©e utilisateur et onction Faire les exercices de la prochaine le√ßon :",
    "description": "Objectifs Comprendre les objectifs du cours et les r√®glements du coll√®ge √† respecter (Quiz WooClap) Vous connecter √† votre compte OneDrive scolaire. Cr√©er une structure de dossiers pour le cours. Comprendre l‚Äôinterface de VS Code Ouvrir un dossier et un fichier (.ipynb) dans VS Code. Cr√©er un fichier .ipynb dans VS Code. √âcrire et ex√©cuter du code Python simple. Sauvegarder vos fichiers de code. 1. Pr√©sentation du cours Cliquez ici pour ouvrir le plan de cours et trouver le quiz interactif",
    "tags": [],
    "title": " Pr√©sentation du cours et l'environnement de travail",
    "uri": "/semaine1/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences",
    "content": "Objectifs Cr√©er des variables et afficher leurs types (int, float, str, bool). Demander une donn√©e √† l‚Äôutilisateur, la convertir et l‚Äôafficher de mani√®re claire et lisible. Utiliser diverses fonctions pr√©d√©finies. √âcrire des programmes simples en python. Variables et types de donn√©es de base Une variable est un nom qui d√©signe une valeur. prenom = \"Alice\" age = 20 temperature = 25.8\rBien nommer vos variables: Utiliser des noms significatifs (ex : masse_corps, volume_solution) Commencer par une lettre ou un soulign√© (_), jamais par un chiffre. √âviter les mots r√©serv√©s de Python (if, for, print, etc.). Utiliser des mots s√©par√©s par des soulign√©s (_). Utiliser des mots commen√ßants par une lettre majuscule, sauf le premier mot (ex : masseCorps, volumeSolution). Mauvais exemples :\n1age = 20 # commence par un chiffre ‚Üí erreur print = 8 # print est un mot r√©serv√© ‚Üí erreur\rTypes de base des donn√©es Type Exemple Description int 5, -3 Nombre entier float 3.14, -0.5 Nombre √† virgule flottante str \"Bonjour\" ou 'Bonjour' Cha√Æne de caract√®res (string) bool True, False Valeur bool√©enne (vrai ou faux) Attention\rPour les donn√©es de type √† virgule flottante, on utilise le point (.) √† la place d‚Äôune virgule (,).\nConversion de type Parfois on a besoin de modifier le type d‚Äôune donn√©es avant de l‚Äôutiliser. Pour ce faire on utilise des fonctions: int() pour convertir en nombre entier float() pour convertir en nombre d√©cimal str() pour convertir en chaine de caract√®res Exemples:\nage = int(\"18\") # str vers int temp = float(\"22.5\") # str vers float taxes = str(\"14.978\") # float vers str\rSi on veut connaitre le type d‚Äôune donn√©e on utilise type()\ntype(\"Bonjour\") # str type(3.14) # float type(42) # int\rLecture de donn√©es au clavier avec input() Souvent, les donn√©es d‚Äôun programme proviennent de son utilisateur qui les tape au clavier. La fonction input() permet de stocker la donn√©es dans une variable.\nnom = input(\"Quel est ton nom ? \") age = int(input(\"Quel est ton √¢ge ? \"))\rLes donn√©es entr√©es par input() sont toujours des cha√Ænes (str). Il faut donc les convertir pour faire des calculs :\nExemple d‚Äôerreur en cas d‚Äôoubli de convertir\nnote1 = input(\"Entrez la premi√®re note\") note2 = input(\"Entrez la deuxi√®me note\") moyenne = (note1 + note2) / 2\t==\u003e ERREUR\rImportant\rL‚Äôerreur est caus√©e par le fait que la fonction input(), transforme toutes les saisies au clavier en chaine de caract√®res (str). Si on tape au clavier 95 et 98, pour Python c‚Äôest ‚Äú95‚Äù + ‚Äú98‚Äù, ce qui n‚Äôest pas une op√©ration valide. C‚Äôest comme essayer de faire ‚ÄúBonjour‚Äù + ‚ÄúSalut‚Äù.\nLa conversion des deux notes en entier, fait en sorte que Python arrive √† faire le calcul sans probl√®me.\nFonctions pr√©d√©finies Qu‚Äôest-ce qu‚Äôune fonction ? Une fonction est un bloc de code r√©utilisable. On peut lui donner des param√®tres (valeurs en entr√©e) et elle peut renvoyer un r√©sultat ou simplement l‚Äôafficher. Si une fonction renvoie un r√©sultat, il devra √™tre stock√© dans une variable pour √™tre utilis√© ailleurs dans le code ou on pourra utiliser la fonction directement √† l‚Äôendroit o√π le r√©sultat est requis. Analogie dans la vie de tous les jours\rUne fonction est comme une recette qu‚Äôon peut r√©utiliser autant de fois que l‚Äôon veut:\nLes ingr√©dients : les param√®tres. La pr√©paration : le corps de la fonction. Le r√©sultat final : la valeur retourn√©e ou affich√©e. Utiliser une fonction, c‚Äôest suivre la recette avec des ingr√©dients pr√©cis. Exemples de fonctions pr√©d√©finies Fonction Utilit√© Exemple print() Afficher un message print(\"Bonjour !\") type() Afficher le type d‚Äôune variable type(3.5) ‚Üí \u003cclass 'float'\u003e input() Demander une donn√©e √† l‚Äôutilisateur nom = input(\"Votre nom :\") int() Convertir en entier val = int(\"5\") float() Convertir en nombre d√©cimal val = float(\"3.14\") round() Arrondir un nombre round(2.718, 2) ‚Üí 2.72 len() Compter les √©l√©ments d‚Äôune cha√Æne/liste len(\"atomes\") ‚Üí 6 On utilise une fonction en l‚Äôappelant. On l‚Äôappelle en √©crivant son nom suivi de parenth√®ses.\nQuelques fonctions du module math Pour acc√©der √† des fonctions math√©matiques, on utilise le module math.\nimport math\rFonction Description Exemple math.sqrt(x) Racine carr√©e math.sqrt(16) ‚Üí 4.0 math.pow(x, y) Puissance math.pow(2, 3) ‚Üí 8.0 math.sin(x) Sinus (en radians) math.sin(math.pi / 2) ‚Üí 1.0 math.log(x) Logarithme naturel math.log(10) La constante PI est aussi disponible via le module math :\nConstante Description Exemple math.pi La constante œÄ math.pi ‚Üí 3.14159... Affichage des donn√©es avec print et les f-string La fonction print() permet d‚Äôafficher des r√©sultats.\nOn peut aussi utiliser print() pour ajouter un saut de ligne.\nQuand on veut afficher une phrase contenant des valeurs num√©riques ou des variables, c‚Äôest pr√©f√©rable d‚Äôutiliser des f-strings (ou cha√Ænes format√©es) pour aller plus vite et rendre le code plus clair.\nExemple :\nnom = \"Sophie\" age = 18 print(f\"{nom} a {age} ans.\")\rR√©sultat : Sophie a 18 ans.\rLe f devant les guillemets indique qu‚Äôon veut ins√©rer des valeurs de variables directement dans le texte. On place les variables entre accolades {}.\nMais parfois, on veut afficher un nombre arrondi, align√©, ou avec des z√©ros. C‚Äôest l√† qu‚Äôon utilise les modificateurs de format juste apr√®s la variable, entre : et }.\nLes modificateurs de format num√©rique Objectif Syntaxe Exemple de r√©sultat Afficher 2 d√©cimales {valeur:.2f} 3.14 Afficher avec des z√©ros devant {valeur:06.2f} 003.14 Aligner √† droite sur 10 caract√®res {valeur:\u003e10.2f} 3.14 Aligner √† gauche sur 10 caract√®res {valeur:\u003c10.2f} 3.14 Pourcentage avec 1 d√©cimale {valeur:.1%} 314.2% Format scientifique (notation exp.) {valeur:.2e} 3.14e+00 Exemples :\nmontant = 134.8678 print(f\"Montant : {montant:.2f} $\") # ‚Üí Montant : 134.87 $ print(f\"Montant : {montant:10.2f} $\") # ‚Üí Montant : 134.87 $ print(f\"Montant : {montant:\u003c10.2f} $\") # ‚Üí Montant : 134.87 $ print(f\"Montant : {montant:\u003e10.2f} $\") # ‚Üí Montant : 134.87 $ print(f\"Montant : {montant:^10.2f} $\") # ‚Üí Montant : 134.87 $\rExplication :\n.2f ‚Üí f pour ‚Äúfloat‚Äù, 2 pour eux d√©cimales 10.2f ‚Üí total de 10 caract√®res, dont 2 apr√®s la virgule \u003c, \u003e, ^ ‚Üí alignement (gauche, droite, centr√©) Mais on peut aussi utiliser print() pour afficher plusieurs choses √† la fois, en les s√©parant avec des virgules :\nprenom = \"Nathalie\" age = 25 print(\"Pr√©nom :\", prenom, \"√Çge :\", age)\rPr√©nom: Nathalie √Çge : 25\rDocumentation du code (les commentaires) On √©crit des commentaires pour expliquer le code. Python ignore tout ce qui suit # sur une ligne.\nExemples :\n# Calcul de l'aire d'un cercle rayon = 3 aire = 3.14 * rayon ** 2 # formule de l‚Äôaire\rOp√©rateurs arithm√©tiques Op√©rateur Signification Exemple R√©sultat + Addition 3 + 2 5 - Soustraction 7 - 4 3 * Multiplication 5 * 2 10 / Division (r√©sultat d√©cimal) 6 / 2 3.0 // Division enti√®re 7 // 2 3 % Modulo (reste) 7 % 2 1 ** Puissance 3 ** 2 9 Notez\rLes diff√©rents r√©sultats pour les trois types de division (en gras dans le tableau).\nDivision et division enti√®re Division enti√®re et modulo Expressions et priorit√© des op√©rateurs Une expression est une combinaison de variables, de nombres et d‚Äôop√©rateurs.\nPriorit√© (ordre d‚Äôex√©cution) des op√©rateurs : () : parenth√®ses ** : puissance *, /, //, % : multiplication et division +, - : addition et soustraction Exemple :\nresultat = 3 + 4 * 2 # donne 11, pas 14 ! resultat = (3 + 4) * 2 # donne 14 gr√¢ce aux ()\r√Ä retenir‚Ä¶\rUne variable garde une valeur. On utilise les bonnes pratiques pour nommer nos variables. Les commentaires servent √† documenter le code. Les op√©rateurs arithm√©tiques permettent de faire des calculs. Comme en math√©matiques, l‚Äôordre des op√©rations est important en Python. print() permet d‚Äôafficher une r√©ponse, seule ou avec du texte. De pr√©f√©rence, utiliser des f-string. Le f vient juste avant les guillemets. On peut ins√©rer n‚Äôimporte quelle variable ou expression dans {}. Exercices Exercice 1 : Distance parcourue Un cycliste roule √† une vitesse constante de 6,5‚ÄØm/s pendant 12 minutes.\n√âcris le programme pour calculer la distance parcourue. R√©sultat attendu:\nLe cycliste a parcouru 4680.0 m√®tres en 12 minutes.\rExercice 2 : Conversion de temp√©rature Un thermom√®tre donne des relev√©s en Fahrenheit, mais vous devez les convertir en Celsius et Kelvin.\nUtilisez une variable pour stocker une temp√©rature en ¬∞C. Convertissez cette temp√©rature en ¬∞F et en K. Affichez les trois valeurs avec des messages clairs. Formules :\n$ ¬∞F = (¬∞C √ó 9/5) + 32 $ $ K = ¬∞C + 273.15 $\rR√©sultat attendu avec une temp√©rature de 38¬∞C :\nTemp√©rature en Celsius : 38¬∞C\rTemp√©rature en Fahrenheit : 100.4¬∞F\rTemp√©rature en Kelvin : 311.15K\rExercice 3 : Calcul de concentration molaire Un technicien pr√©pare une solution en dissolvant une masse donn√©e de solut√© dans un certain volume de solvant. √âcrire un programme qui calcule la concentration molaire (mol/L) selon la formule :\n$ C = n / V $ o√π $ n = m / M $\rR√©sultat attendu avec :\nm = 10.0 masse du solut√© en grammes\nM = 58.5\tmasse molaire du solut√© en g/mol (ex. NaCl)\nV = 0.25\tvolume de la solution en litres\nConcentration molaire : 0.682051282051282 mol/L\rExercice 4 : Vitesse moyenne d‚Äôune r√©action Lors d‚Äôune exp√©rience de cin√©tique chimique, on mesure la variation de la concentration d‚Äôun r√©actif au cours du temps. √âcrire un programme qui calcule la vitesse moyenne de disparition selon :\n$ v = \\frac{\\Delta [A]}{\\Delta t} $\ro√π [A] est la concentration du r√©actif.\nR√©sultat attendu avec: [R√©actif A] passe de 0.80 mol/L √† 0.20 mol/L en 120 secondes.\nVitesse moyenne = -0.005000 mol‚ÄØL‚Åª¬π‚ÄØs‚Åª¬π\rAtelier 2 Exercice #1 - Exp√©rience en chimie Un b√©cher contient 400 mL de solution. La solution s‚Äô√©vapore √† raison de 25 mL/min. La situation est lin√©aire : on commence √† 400 mL, et on perd 25 mL chaque minute. Donc la fonction est :\n$$\rq(t) = 400 - 25t\r$$\ro√π :\n$t$ est le temps en minutes, $q(t)$ est la quantit√© de solution restante (en mL) apr√®s $t$ minutes. On souhaite trouver la quantit√© de solution qu‚Äôil restera apr√®s 10 min 15 s\nNB:\nIdentifier les variables, les constantes et les formules n√©cessaires R√©sultat attendu :\nQuantit√© restante apr√®s 10.25 minutes : 143.75 mL.\rExercice #2 - Calcul de la force gravitationnelle √âcrire une fonction qui:\nDemande √† l‚Äôutilisateur d‚Äôentrer le nom de l‚Äôobjet (cha√Æne de caract√®res). Demande √† l‚Äôutilisateur d‚Äôentrer la masse de l‚Äôobjet (nombre d√©cimal, en kg). D√©fini la constante d‚Äôacc√©l√©ration gravitationnelle (9,8 m/s¬≤). Calcule la force en utilisant la formule : force = masse * acc√©l√©ration Affiche la force avec une phrase claire, incluant le nom de l‚Äôobjet et l‚Äôunit√© en N (Newton). Testez la fonction avec ces deux cas:\nCas #1. Objet: balle et masse: 2,5 Kg\nSortie attendue :\nLa force de la balle de 2.5 Kg est de 24.50 N.\rCas #2. Objet: voiture et masse: 1000,0 Kg\nSortie attendue :\nLa force de la voiture de 1000.0 Kg est de 9800.00 N.\rExercice #3 - Calcul d‚Äôint√©r√™ts simple et compos√© Vous avez deux placements avec le m√™me montant initial (qu‚Äôon peut appeler montant). Premier placement : int√©r√™t annuel simple de 3,2 % pendant 10 ans. Deuxi√®me placement : int√©r√™t compos√© √† 1,6 % tous les 6 mois, donc 2 fois par an, pendant 10 ans. i) On cherche l‚Äô√©cart en % entre les deux montants finaux au bout de 10 ans.\nii) En d√©duire quel est le meilleur placement sur 10 ans.\nHypoth√®se : Comme le montant initial est le m√™me, on peut le fixer √† 100‚ÄØ$ pour faciliter le calcul de l‚Äô√©cart en pourcentage √† la fin.\nNB:\nIdentifier les variables, les constantes et les formules n√©cessaires R√©sultat attendu (approximatif) :\nValeur avec int√©r√™t simple : 132.00 $\rValeur avec int√©r√™t compos√© : 134.87 $\r√âcart relatif : 2.17 %\rExercice #4 - Calcul de la hauteur maximale Vous voulez aider un¬∑e physicien¬∑ne √† calculer la hauteur maximale atteinte par un objet lanc√© verticalement vers le haut avec une certaine vitesse initiale.\n√âcrire un programme qui demande la vitesse initiale au lancement, puis calcule la hauteur maximale atteinte par l‚Äôobjet (en n√©gligeant la r√©sistance de l‚Äôair). La formule utilis√©e est :\n$$\rh_{\\text{max}} = \\frac{v^2}{2g}\r$$\ravec :\n$v$ : vitesse initiale (en m/s) $g$ : acc√©l√©ration gravitationnelle = 9.81 m/s¬≤ $h_{\\text{max}}$ : hauteur maximale (en m) Exercice 5 - Calcul de probabilit√© (Facultatif) On choisit un point au hasard dans ce rectangle. Calcule la probabilit√© que ce point se situe dans la r√©gion grise, c‚Äôest-√†-dire en dehors des cercles. Un rectangle contenant 6 cercles isom√©triques (m√™me taille), Ils sont organis√©s en 2 rang√©es de 3 cercles, La hauteur du rectangle est 10 cm, ce qui correspond √† deux diam√®tres de cercles (1 par rang√©e). NB:\nIdentifier les variables, les constantes et les formules n√©cessaires R√©sultat attendu: Probabilit√© qu‚Äôun point tombe dans la r√©gion grise : 0.2119 (soit 21.19 %)\r√Ä faire avant le prochain cours Lire la prochaine le√ßon : 3. Structures conditionnelles et algorithmes simples Faire les exercices de la prochaine le√ßon :",
    "description": "Objectifs Cr√©er des variables et afficher leurs types (int, float, str, bool). Demander une donn√©e √† l‚Äôutilisateur, la convertir et l‚Äôafficher de mani√®re claire et lisible. Utiliser diverses fonctions pr√©d√©finies. √âcrire des programmes simples en python. Variables et types de donn√©es de base Une variable est un nom qui d√©signe une valeur. prenom = \"Alice\" age = 20 temperature = 25.8\rBien nommer vos variables: Utiliser des noms significatifs (ex : masse_corps, volume_solution) Commencer par une lettre ou un soulign√© (_), jamais par un chiffre.",
    "tags": [],
    "title": " Variables, types, entr√©e utilisateur et fonctions pr√©d√©finies",
    "uri": "/semaine2/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences",
    "content": "Objectifs Identifier et utiliser correctement les op√©rateurs de comparaison et logiques pour √©valuer des conditions simples en Python. Appliquer les structures conditionnelles (if, elif, else) √† des contextes scientifiques simples. √âcrire des algorithmes simples et les traduire en Python. Les op√©rateurs de comparaison Ces op√©rateurs permettent de comparer des valeurs. Le r√©sultat est toujours un bool√©en : True (vrai) ou False (faux).\nOp√©rateur Signification Exemple R√©sultat == √©gal √† 5 == 5 True != diff√©rent de 3 != 4 True \u003c plus petit que 2 \u003c 5 True \u003c= plus petit ou √©gal √† 5 \u003c= 5 True \u003e plus grand que 7 \u003e 4 True \u003e= plus grand ou √©gal √† 6 \u003e= 9 False Dans une cellule de Code, testez les exemples du tableau.\nLes op√©rateurs logiques Ils permettent de combiner plusieurs conditions.\nOp√©rateur Signification Exemple R√©sultat and et (toutes vraies) (4 \u003c 5) and (6 \u003e 3) True or ou (au moins une vraie) (4 \u003c 5) or (6 \u003c 3) True not n√©gation not (4 \u003c 5) False Dans une cellule de Code, testez les exemples du tableau.\nLes structures conditionnelles Elles permettent d‚Äôex√©cuter un bloc de code seulement si une condition est vraie.\nL‚Äôinstruction if Pour ex√©cuter du code si une condition est vraie.\nif condition: # Bloc de code ex√©cut√© si la condition est vraie\rExemple :\nage = 20 if age \u003e= 18: print(\"Majeur\")\rL‚Äôinstruction if-else Pour ex√©cuter du code si une condition est fausse.\nif condition: # Si la condition est vraie else: # Sinon (condition fausse)\rExemple :\nage = 16 if age \u003e= 18: print(\"Majeur\") else: print(\"Mineur\")\rL‚Äôinstruction if-elif-else Pour tester plusieurs cas diff√©rents et ex√©cuter du code diff√©rent selon le cas.\nImportant\rSi la condition du if est fausse, un seul elif sera ex√©cut√©. Si et seulement si toutes les conditions (if et tous les elif) sont fausses, le else sera trait√©. if condition1: # Si condition1 est vraie elif condition2: # Sinon, si condition2 est vraie elif condition3: # Sinon, si condition3 est vraie else: # Sinon (aucune condition vraie)\rExemple :\nnote = 85 if note \u003e= 90: print(\"Excellent\") elif note \u003e= 75: print(\"Tr√®s bien\") elif note \u003e= 60: print(\"Passable\") else: print(\"√âchec\")\rImportant\rLes deux-points (:) sont obligatoires √† la fin des lignes if, elif et else. L‚Äôindentation est essentielle : elle d√©limite le bloc de code √† ex√©cuter. Dans des cellules de Code dans VS Code, testez les exemples des instructions if, elif et else.\nComment d√©cortiquer un probl√®me scientifique en algorithme et le traduire en Python ? Un algorithme, c‚Äôest une suite d‚Äôinstructions claires pour r√©soudre un probl√®me.\nCe processus crucial, est la cl√© pour arriver √† √©crire un programme sans s‚Äôarracher les cheveux. On peut le d√©crire en 6 √©tapes principales:\nLire et comprendre le probl√®me Identifier les variables et constantes Choisir ou √©crire la formule √âcrire un algorithme clair Traduire en code Python V√©rifier et tester le programme Voyons chacune des √©tapes plus en d√©tails:\n√âtape 1 ‚Äî Lire et comprendre le probl√®me Objectif : Identifier ce qu‚Äôon cherche, ce qu‚Äôon conna√Æt, et le contexte scientifique.\nQuestion principale : Que doit-on calculer, pr√©dire ou mod√©liser ? Donn√©es : Quelles sont les grandeurs connues ? (types ? unit√©s ? constantes ?) Formule ou loi : Y a-t-il une relation physique, chimique ou biologique utilisable ? Conditions : Y a-t-il des limites, des cas particuliers ou des hypoth√®ses ? √âtape 2 ‚Äî Identifier les variables et constantes Objectif : Rep√©rer les quantit√©s variables (entr√©es ou sorties) et les constantes.\nVariables d‚Äôentr√©e : Grandeurs connues fournies par le probl√®me ou l‚Äôutilisateur du programme. Variable de sortie : Ce que l‚Äôon veut calculer (la r√©ponse). Constantes : Valeurs fixes (ex. : constante des gaz, g, densit√© de l‚Äôeau, etc.). √âtape 3 ‚Äî Choisir ou √©crire la formule Objectif : Traduire la relation scientifique en √©quation.\nIdentifier la loi scientifique utilis√©e (ex. : Boyle, loi des gaz, loi de la gravit√©, etc.) R√©organiser si n√©cessaire pour isoler la variable √† calculer. √âtape 4 ‚Äî √âcrire un algorithme clair Objectif : D√©crire les √©tapes logiques avant de coder.\nD√©finir ou lire les donn√©es (entr√©es) Calculer la sortie (r√©sultat) avec la formule Afficher la r√©ponse √âtape 5 ‚Äî Traduire en code Python Objectif : √âcrire du code propre et comment√©.\n√âtape 6 ‚Äî V√©rifier et tester Objectif : Valider que le r√©sultat est coh√©rent (scientifiquement et informatiquement).\nEst-ce que l‚Äôunit√© du r√©sultat est correcte ? Est-ce que la valeur semble logique (ex. : une pression double si le volume diminue de moiti√©) ? Tester avec d‚Äôautres valeurs pour confirmer. Exemple 1 : Un gaz occupe un volume de 4,0 L √† une pression de 100 kPa. Quelle sera la pression si le volume diminue √† 2,0 L (√† temp√©rature constante) ?\n√âtape 1: Comprendre le probl√®me\nOn doit calculer la pression finale (P2) d‚Äôun gaz lorsque son volume final (V2) diminue de moiti√©. On connait les volumes initial (V1) et final (V2), la pression initiale (P1). On doit donc trouver la pression finale √† l‚Äôaide de la Loi de Boyle (P1 x V1 = P2 x V2) √âtape 2: Identifier les variables et constantes\nVariables d‚Äôentr√©e : V1 = 4.0, P1 = 100, V2 = 2.0 Variable de sortie : P2 Constantes : aucune ici Type : float (car ce sont des mesures continues) √âtape 3: √âcrire la formule\nLoi de Boyle : $P_1 \\cdot V_1 = P_2 \\cdot V_2$ ¬† Donc $P_2 = \\frac{P_1 \\cdot V_1}{V_2}$\r√âtape 4: √âcrire un algorithme clair\nFormat 1: algorithme en phrases simples et claires\n* D√©finir les deux volumes V1 et V2 (initial et final) et la pression initiale P1.\r* Calculer la pression finale √† l'aide de la formule P2 = (P1 * V1) / V2.\r* Afficher la pression finale P2.\rOu Format 2: algorithme en pseudo-code\nD√©but\rLire V1, P1, V2\rCalculer P2 = (P1 * V1) / V2\rAfficher P2\rFin\r√âtape 5: Traduire en Python\n# Donn√©es d'entr√©e (float = nombre √† virgule) V1 = 4.0 # Volume initial en litres P1 = 100.0 # Pression initiale en kPa V2 = 2.0 # Volume final en litres # Calcul (loi de Boyle) P2 = (P1 * V1) / V2 # Affichage du r√©sultat print(\"La pression finale est de {P2} kPa\")\r√âtape 6: V√©rifier et tester\nTest 1 ‚Äî Volume initial = Volume final V1 = 2.0 P1 = 100 V2 = 2.0 P2 = (P1 * V1) / V2 = (100 * 2.0) / 2.0 = 100.0\rR√©sultat : P2 = 100.0 kPa\nInterpr√©tation : Si le volume ne change pas, la pression reste la m√™me.\nTest 2 ‚Äî Volume final diminu√© de 4 √† 1 L V1 = 4.0 P1 = 100 V2 = 1.0 P2 = (100 * 4.0) / 1.0 = 400.0\rR√©sultat : P2 = 400.0 kPa\nInterpr√©tation : Si on divise le volume par 4, la pression est multipli√©e par 4.\nTest 3 ‚Äî Pression initiale r√©duite √† 50 kPa V1 = 4.0 P1 = 50 V2 = 2.0 P2 = (50 * 4.0) / 2.0 = 100.0\rR√©sultat : P2 = 100.0 kPa\nInterpr√©tation : Une pression initiale plus faible donne une pression finale plus faible, toutes choses √©gales par ailleurs.\nConclusion\nCes tests montrent que :\nLa pression est inversement proportionnelle au volume : si le volume diminue, la pression augmente, et inversement. Le calcul respecte la loi de Boyle √† temp√©rature constante. Les r√©sultats sont coh√©rents avec l‚Äôintuition physique. √Ä retenir\rLes op√©rateurs de comparaison comparent des valeurs.\nLes op√©rateurs logiques combinent plusieurs conditions.\nLes structures conditionnelles permettent de r√©agir √† des crit√®res dans un programme.\nLes deux-points (:) sont obligatoires √† la fin des lignes if, elif et else.\nL‚Äôindentation (souvent 4 espaces) est essentielle : elle d√©limite le bloc de code √† ex√©cuter.\nIl peut y avoir autant de elif que n√©cessaire, mais un seul if et au plus un seul else.\nif v√©rifie si une condition est vraie, si et seulement si c‚Äôest le cas, les instructions en dessous seront ex√©cut√©es. elif permet de v√©rifier une autre condition, si et seulement si la condition du if est fausse ET celle du elif est vraie, les instructions en dessous et d√©cal√©es seront ex√©cut√©es. else permet de pr√©voir des instructions √† effectuer, si et seulement si aucune des conditions pr√©c√©dentes n‚Äôest vraie. Avant de coder:\nComprendre le probl√®me afin d‚Äôidentifier les variables ou constantes et les formules. √âcrire en phrases simples, les √©tapes principales du programme (l‚Äôalgorithme). Exercices Exercice 1 ‚Äì Temps de demi-vie radioactive Un isotope radioactif se d√©sint√®gre avec le temps. Sa masse diminue de moiti√© √† chaque p√©riode de demi-vie. Un √©chantillon de 100 g d‚Äôun isotope a une demi-vie de 5 ans. On souhaite conna√Ætre la masse restante apr√®s un certain nombre d‚Äôann√©es.\n√âcris un algorithme permettant de :\nDemander √† l‚Äôutilisateur le nombre d‚Äôann√©es √©coul√©es. Calculer le nombre de p√©riodes de demi-vie. Calculer la masse restante : $$ \\text{masse} = \\text{masse initiale} \\times \\left(\\frac{1}{2}\\right)^{\\text{nb_periodes}} $$ Si la masse est inf√©rieure √† 1 g, afficher un message d‚Äôavertissement, sinon, afficher la masse restante normalement. Traduis ton algorithme en Python.\nExercice 2 ‚Äì Taux de croissance d‚Äôune population bact√©rienne Une colonie de bact√©ries double toutes les 3 heures si les conditions sont optimales. Une bo√Æte de P√©tri contient 500 bact√©ries. On souhaite estimer la taille de la population apr√®s un certain nombre d‚Äôheures.\n√âcris un algorithme pour :\nDemander √† l‚Äôutilisateur le nombre d‚Äôheures √©coul√©es. Calculer le nombre de p√©riodes de croissance (p√©riodes de 3 heures). Calculer la population apr√®s cette dur√©e avec la formule : $$ \\text{population} = \\text{population initiale} \\times 2^{\\text{nb_periodes}} $$ Afficher la population estim√©e. Si la population d√©passe 1 000 000 bact√©ries, afficher un message d‚Äôalerte sur la croissance excessive, sinon afficher la population normalement Traduis ton algorithme en Python.\nExercice 3 ‚Äì Temp√©rature critique d‚Äôun liquide Un liquide ne doit pas d√©passer 80‚ÄØ¬∞C pour rester stable. Demander √† l‚Äôutilisateur la temp√©rature actuelle du liquide et afficher un message selon les cas :\nSi la temp√©rature est inf√©rieure √† 80, afficher : ¬´‚ÄØTemp√©rature s√©curitaire.‚ÄØ¬ª Si elle est exactement 80, afficher : ¬´‚ÄØLimite atteinte.‚ÄØ¬ª Si elle est sup√©rieure √† 80, afficher : ¬´‚ÄØAttention : temp√©rature critique‚ÄØ!‚ÄØ¬ª Exercice 4 ‚Äì Classification du pH d‚Äôune solution En chimie, le pH permet de savoir si une solution est acide, neutre ou basique. Demander √† l‚Äôutilisateur le pH d‚Äôune solution (entre 0 et 14), puis afficher :\n¬´‚ÄØSolution acide‚ÄØ¬ª si pH \u003c 7 ¬´‚ÄØSolution neutre‚ÄØ¬ª si pH == 7 ¬´‚ÄØSolution basique‚ÄØ¬ª si pH \u003e 7 ¬´‚ÄØValeur de pH invalide‚ÄØ¬ª si le pH est en dehors de l‚Äôintervalle [0, 14] Exercice 5 ‚Äì Autorisation d‚Äôune r√©action chimique Une r√©action chimique ne peut avoir lieu que si la temp√©rature est entre 25‚ÄØ¬∞C et 45‚ÄØ¬∞C inclusivement, et si le pH est entre 6 et 8 inclusivement.\nDemander √† l‚Äôutilisateur la temp√©rature et le pH, puis afficher :\n¬´‚ÄØR√©action possible.‚ÄØ¬ª si les deux conditions sont remplies, ¬´‚ÄØConditions non compatibles.‚ÄØ¬ª sinon. Atelier 3 Exercice 1 L‚Äô√©tat physique de l‚Äôeau d√©pend de la temp√©rature et de la pression. √Ä pression atmosph√©rique normale (1 atm) :\nL‚Äôeau g√®le √† 0‚ÄØ¬∞C et bout √† 100‚ÄØ¬∞C. En altitude, la pression est plus faible, donc l‚Äôeau bout √† une temp√©rature plus basse. En autocuiseur, la pression est plus √©lev√©e, donc l‚Äôeau bout √† une temp√©rature plus √©lev√©e. On suppose ici un mod√®le tr√®s simple :\nPression (atm) Temp√©rature d‚Äô√©bullition (¬∞C) 0.5 81 1.0 100 1.5 112 2.0 120 Le point de cong√©lation demeure √† 0‚ÄØ¬∞C peu importe la pression.\n√âcris un programme Python qui :\nDemande √† l‚Äôutilisateur d‚Äôentrer :\nLa temp√©rature de l‚Äôeau en ¬∞C La pression en atm (choix parmi 0.5, 1.0, 1.5, 2.0) D√©termine et affiche l‚Äô√©tat physique de l‚Äôeau : \"solide\", \"liquide\" ou \"gaz\".\nExemples de fonctionnements attendus Temp√©rature (¬∞C) : 50 Pression (atm) : 1.0 √âtat de l‚Äôeau : liquide\rTemp√©rature (¬∞C) : 101 Pression (atm) : 1.0 √âtat de l‚Äôeau : gaz\rTemp√©rature (¬∞C) : -5 Pression (atm) : 2.0 √âtat de l‚Äôeau : solide\rPistes / rappels Utiliser des conditions imbriqu√©es ou combin√©es (if ... and ..., elif). Pour simplifier, vous pouvez faire un if sur la pression pour d√©finir le point d‚Äô√©bullition. Utilisez des variables pour stocker les seuils. Exemple d‚Äôex√©cution Temp√©rature de l'eau en ¬∞C : 105\rPression en atm (0.5, 1.0, 1.5 ou 2.0) : 1.5\rs√âtat de l‚Äôeau : liquide\rL‚Äôeau est liquide √† cette temp√©rature et pression.\rVersion am√©lior√©e G√©rer des cas d‚Äôerreurs (ex. : pression invalide) Afficher une petite phrase plus descriptive selon l‚Äô√©tat : ‚ÄúL‚Äôeau est sous forme de vapeur.‚Äù ou ‚ÄúL‚Äôeau est liquide √† cette temp√©rature et pression.‚Äù G√©rer des cas d‚Äôerreur: Utiliser la valeur None\rQu‚Äôest-ce que None en Python‚ÄØ? None est une valeur sp√©ciale en Python. Elle repr√©sente l‚Äôabsence de valeur ou ‚Äúrien‚Äù. Pourquoi utiliser None‚ÄØ? Pour v√©rifier si une variable est encore vide. Pour initialiser une variable sans lui donner de valeur tout de suite. Pour indiquer qu‚Äôune fonction ne retourne rien. Exemple 1 ‚Äì V√©rifier si une variable est vide reponse = None if reponse is None: print(\"Aucune r√©ponse re√ßue.\")\rAttention : on teste None avec is et non == dans les bonnes pratiques Python :\nif variable is None: ### Exemple 2 ‚Äì Variable vide au d√©part ```python resultat = None # on ne conna√Æt pas encore le r√©sultat # plus tard... resultat = 42\rExemple 3 ‚Äì Fonction sans return def afficher_message(): print(\"Bonjour!\") x = afficher_message() print(x) # Affiche : None (car la fonction ne retourne rien)\r√Ä faire avant le prochain cours Lire la prochaine le√ßon : 4. Boucles et algorithmes simples Faire les exercices de la prochaine le√ßon :",
    "description": "Objectifs Identifier et utiliser correctement les op√©rateurs de comparaison et logiques pour √©valuer des conditions simples en Python. Appliquer les structures conditionnelles (if, elif, else) √† des contextes scientifiques simples. √âcrire des algorithmes simples et les traduire en Python. Les op√©rateurs de comparaison Ces op√©rateurs permettent de comparer des valeurs. Le r√©sultat est toujours un bool√©en : True (vrai) ou False (faux).\nOp√©rateur Signification Exemple R√©sultat == √©gal √† 5 == 5 True !",
    "tags": [],
    "title": " Structures conditionnelles et algorithmes simples",
    "uri": "/semaine3/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences",
    "content": "Objectifs R√©p√©ter des instructions tant qu‚Äôune condition est vraie, avec la boucle while. R√©p√©ter des instructions un nombre de fois connu d‚Äôavance avec la boucle for. Interrompre le d√©roulement d‚Äôune boucle. Comprendre les messages d‚Äôerreurs et d√©couvrir des strat√©gies simples de d√©bogage. √Ä quoi servent les boucles ? R√©p√©ter des instructions plusieurs fois, soit un nombre connu (for), soit jusqu‚Äô√† ce qu‚Äôune condition soit atteinte (while).\nBoucle while La boucle while r√©p√®te un bloc tant qu‚Äôune condition est vraie.\nwhile condition: instructions\rExemple : Affiche les minutes jusqu‚Äô√† l‚Äô√©bullition (100¬∞C)\ntemp = 20 minutes = 0 while temp \u003c 100: print(f\"Minute {minutes} : {temp} ¬∞C\") temp += 5 minutes += 1 print(\"√âbullition atteinte !\")\rImportant\rIl faut modifier l‚Äô√©tat de la condition dans la boucle pour √©viter une boucle infinie. Dans l‚Äôexemple, c‚Äôest √† √ßa que sert l‚Äôinstruction compteur += 1\nBoucle infinie C‚Äôest lorsque la boucle ne s‚Äôarr√™te jamais. Cela peut arriver principalement dans deux situations:\nCas 1: oublier de modifier l‚Äô√©tat de la condition\ntemp = 100 # temp√©rature initiale while temp \u003e 0: print(f\"Temp√©rature : {temp} ¬∞C\") # temp n'est pas modifi√© Cas 1: oublier de modifier l‚Äô√©tat de la condition\ntemp = 100 # temp√©rature initiale while temp \u003e 0: print(f\"Temp√©rature : {temp} ¬∞C\") temp += 10\t# Erreur de logique\rArr√™ter une boucle infinie Cliquer dans la case Arr√™ter l‚Äôex√©cution des cellules se trouvant √† gauche de la cellule contenant la boucle infinie\nBoucle for La boucle for est id√©ale pour r√©p√©ter un nombre connu de fois, ou parcourir une s√©quence (ex : liste, cha√Æne de caract√®res, range()).\nfor √©l√©ment in s√©quence: instructions\rLa boucle for avec range() for i in range(d√©but, fin, pas): instructions\rd√©but : valeur initiale (optionnel, par d√©faut = 0) fin : valeur non incluse pas : saut entre chaque valeur (optionnel, par d√©faut = 1) Exemple :\nfor i in range(0, 5): print(\"i =\", i)\rAffiche les valeurs de 0 √† 4.\nInterrompre une boucle break : arr√™te imm√©diatement la boucle. continue : saute √† l‚Äôit√©ration suivante. Exemple avec break :\nfor i in range(10): if i == 5: break print(i)\rAffiche 0 √† 4. S‚Äôarr√™te √† 5.\ncompteur = 0 while compteur \u003c 10: if compteur == 5: break print(\"Valeur :\", compteur) compteur += 1\rAffiche :\nValeur : 0 Valeur : 1 Valeur : 2 Valeur : 3 Valeur : 4 Exemple avec continue for i in range(1, 11): if i % 3 == 0: continue # On saute les multiples de 3 print(i)\rAffiche:\n1\r2\r4\r5\r7\r8\r10\rC‚Äôest quoi un bogue? Un bogue (ou bug) est une erreur dans un programme qui emp√™che le code de fonctionner comme pr√©vu. Il peut √™tre :\nsyntaxique : le programme ne se lance m√™me pas (ex. oubli de : ou de parenth√®se); logique : le programme fonctionne mais donne un mauvais r√©sultat; d‚Äôex√©cution : le programme se lance mais plante en cours de route (ex. division par z√©ro). Types d‚Äôerreurs fr√©quentes Type d‚Äôerreur Exemple Message typique Syntaxe if x = 5: SyntaxError Typo pritn(\"Hello\") NameError Z√©ro 10 / 0 ZeroDivisionError Type invalide int(\"chat\") ValueError Oubli de variable print(resultat) NameError Importance de l‚Äôordre logique Un programme se lit de haut en bas. Une mauvaise organisation peut conduire √† des r√©sultats erron√©s. L‚Äôordre : entr√©e ‚Üí traitement ‚Üí sortie Exemple courant d‚Äôerreur : utiliser une variable avant de lui avoir donn√© une valeur. # Mauvais ordre : print(resultat) resultat = 5 + 2 # Erreur : la variable n'existe pas encore\rTechniques de d√©bogage simples 1. Lire les messages d‚Äôerreur Que dit-il? Sur quelle ligne? Quel type d‚Äôerreur? Quand Python rencontre une erreur, il t‚Äôaffiche un message d‚Äôerreur. C‚Äôest comme un indice pour t‚Äôaider.\nExemple :\nval = int(input(\"Donne un nombre: \")) print(\"Le carr√© est: \" val * val)\rSyntaxError: invalid syntax\nLe message t‚Äôindique une erreur de syntaxe. Ici, il manque une virgule ou un + dans le print. print(\"Le carr√© est:\", val * val)\r2. Ajouter des print() C‚Äôest ta lampe de poche : affiche les variables pour voir ce qui se passe.\nage = int(input(\"√Çge : \")) print(\"DEBUG - √¢ge re√ßu :\", age) if age \u003e= 18: print(\"Majeur\")\r3. Tester petit √† petit N‚Äô√©cris pas tout d‚Äôun coup. Teste par morceaux.\n# Mauvais # tout √©crit avant de tester # Mieux # √©crire un input ‚Üí tester # ajouter un if ‚Üí tester # ajouter un calcul ‚Üí tester\r√Ä retenir\rLes boucles (while et for) permettent de r√©p√©ter des actions efficacement. Il est possible d‚Äôinterrompre le d√©roulement d‚Äôune boucle √† l‚Äôaide de break ou continue. L‚Äôindentation est essentielle pour structurer le code. while : Utilis√©e lorsqu‚Äôune condition doit √™tre respect√©e pour que la boucle s‚Äôex√©cute. √âquivaut √† dire: TANT QUE condition est vraie FAIRE‚Ä¶ for avec range() : Utilis√©e lorsque le nombre de r√©p√©titions est connu d‚Äôavance. √âquivaut √† dire: POUR CHAQUE tour de boucle FAIRE‚Ä¶ ou\nPOUR CHAQUE valeur d‚Äôune s√©quence FAIRE‚Ä¶ Avant de commencer √† coder c‚Äôest tr√®s important de comprendre le probl√®me afin d‚Äôidentifier les variables ou constantes et les formules. Lorsqu‚Äôune erreur apparait, bien lire le message d‚Äôerreur, utiliser la fonction `print()``√† pour suivre l‚Äôex√©cution d‚Äôun programme et identifier les bogues. Toujours ‚Äúchallenger‚Äù les r√©sultats obtenus, √† l‚Äôaide de diff√©rentes valeurs: ‚ÄúEst-ce que √ßa a du sens scientifiquement ?‚Äù Exercices Bloc-notes de d√©part\nExercice 1 - For ou While ? Pour chacun des contextes suivants, avant d‚Äô√©crire le code, r√©pondez √† la question: ‚ÄúQuelle boucle devriez-vous utiliser ?‚Äù:\na. Afficher les nombres de 1 √† 10\nb. Compter jusqu‚Äô√† 100 par bonds de 10\nc. Simuler la chute d‚Äôun objet de 100 m (baisse de 10 m/s)\nd. Lire une temp√©rature jusqu‚Äô√† ce qu‚Äôelle soit \u003c 0 (entr√©e utilisateur)\ne. √âcrire un programme qui demande √† l‚Äôutilisateur d‚Äôentrer un chiffre (1 √† 10). Tant qu‚Äôil ne tape pas le chiffre 0, le programme lui redemande d‚Äôentrer un chiffre (1 √† 10) Sinon (i.e. il a tap√© 0) le programme s‚Äôarr√™te (Vous pouvez utiliser break et afficher un message).\nExercice 2 ‚Äì Table de multiplication √âcrire un programme qui affiche la table de multiplication d‚Äôun nombre donn√© par l‚Äôusager (entre 1 et 12), jusqu‚Äô√† 12 √ó ce nombre. utiliser une boucle while pour refaire une autre table tant que l‚Äôusager le souhaite. Exemple de sortie :\nEntrez un nombre entre 1 et 12 : 7\r1 x 7 = 7\r2 x 7 = 14\r3 x 7 = 21\r...\r12 x 7 = 84\rExercice 3 ‚Äì Utiliser while pour atteindre un objectif Une temp√©rature initiale est de 20 ¬∞C. Chaque heure, elle augmente de 1,5 ¬∞C. √âcrire un programme qui affiche l‚Äô√©volution de la temp√©rature jusqu‚Äô√† ce qu‚Äôelle atteigne 30 ¬∞C.\nCr√©e une variable temp avec 20 comme valeur initiale. Utilise une boucle while pour v√©rifier si temp est inf√©rieure √† 30. √Ä chaque tour, affiche la temp√©rature. Augmente la temp√©rature de 1.5. Exercice 4 ‚Äì R√©p√©ter une mesure fixe avec for On veut afficher les num√©ros de 10 √©chantillons : √âchantillon 1, √âchantillon 2, ‚Ä¶, √âchantillon 10.\nUtilise une boucle for avec range(1, 11). √Ä chaque tour, affiche √âchantillon suivi du num√©ro. Exercice 5 - Trouver les erreurs ! Corrige les erreurs dans ce programme pour qu‚Äôil fonctionne :\nnom = input(\"Quel est ton nom?\") print(\"Bonjour\", name) age = input(\"Quel √¢ge as-tu?\") print(\"Dans 10 ans, tu auras\" age + 10)\rAtelier Exercice 1 ‚Äì R√©action chimique : combien de fois? Une r√©action chimique simple a lieu entre deux r√©actifs A et B. √Ä chaque cycle, 1 mL de A r√©agit avec 2 mL de B pour produire un pr√©cipit√©. Vous disposez d‚Äôun certain volume de A et de B.\nDemander √† l‚Äôutilisateur combien de millilitres il a de A et de B. Puis, afficher combien de fois la r√©action peut avoir lieu en entier (sans fractions), et combien de mL de chaque r√©actif il reste apr√®s la derni√®re r√©action compl√®te.\nUtiliser une boucle while pour simuler la r√©action r√©p√©t√©e. √Ä chaque it√©ration, soustraire les volumes requis de A et B. S‚Äôarr√™ter lorsque l‚Äôun des r√©actifs n‚Äôest plus suffisant. Exemple d‚Äôex√©cution :\nQuantit√© de A disponible (en mL) : 10\rQuantit√© de B disponible (en mL) : 25\rLa r√©action a eu lieu 5 fois.\rIl reste 0 mL de A et 15 mL de B.\rExercice 2 ‚Äì D√©tection de mutation (compteur) Vous √™tes en train d‚Äôexaminer une longue s√©rie d‚Äô√©chantillons au microscope. Chaque √©chantillon peut √™tre sain (0) ou mut√© (1). Vous devez saisir les r√©sultats un √† un.\nDemander √† l‚Äôutilisateur combien d‚Äô√©chantillons il va analyser. Ensuite, lui demander un √† un les r√©sultats (0 ou 1) et compter combien d‚Äô√©chantillons sont mut√©s. √Ä la fin, afficher le pourcentage d‚Äô√©chantillons mut√©s.\nUtiliser une boucle for bas√©e sur le nombre total d‚Äô√©chantillons. Demander √† chaque it√©ration : ‚Äú√âchantillon X : sain (0) ou mut√© (1)?‚Äù Accumuler le nombre de mutations. Calculer et afficher le pourcentage. Exemple d‚Äôex√©cution :\nCombien d‚Äô√©chantillons vas-tu analyser? 4\r√âchantillon 1 : sain (0) ou mut√© (1)? 0\r√âchantillon 2 : sain (0) ou mut√© (1)? 1\r√âchantillon 3 : sain (0) ou mut√© (1)? 1\r√âchantillon 4 : sain (0) ou mut√© (1)? 0\r2/4 √©chantillons sont mut√©s.\rPourcentage de mutation : 50.0 %\r√Ä faire avant le prochain cours RAPPEL: Semaine prochaine c‚Äôest le premier examen (20%)\nLire la prochaine le√ßon : 6. Listes, chaines et visualisation des donn√©es Faire les exercices de la prochaine le√ßon :",
    "description": "Objectifs R√©p√©ter des instructions tant qu‚Äôune condition est vraie, avec la boucle while. R√©p√©ter des instructions un nombre de fois connu d‚Äôavance avec la boucle for. Interrompre le d√©roulement d‚Äôune boucle. Comprendre les messages d‚Äôerreurs et d√©couvrir des strat√©gies simples de d√©bogage. √Ä quoi servent les boucles ? R√©p√©ter des instructions plusieurs fois, soit un nombre connu (for), soit jusqu‚Äô√† ce qu‚Äôune condition soit atteinte (while).\nBoucle while La boucle while r√©p√®te un bloc tant qu‚Äôune condition est vraie.",
    "tags": [],
    "title": " Boucles et d√©bogage simple",
    "uri": "/semaine4/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences",
    "content": "Informations Date:\tSemaine #5 (Voir le calendrier scolaire) Mati√®re: Semaines 1 √† 4 inclusivement Documentation permise: 1 feuille recto-verso (manuscrite ou imprim√©e) Format de l‚Äôexamen:\tExercices pratiques avec VS Code.",
    "description": "Informations Date:\tSemaine #5 (Voir le calendrier scolaire) Mati√®re: Semaines 1 √† 4 inclusivement Documentation permise: 1 feuille recto-verso (manuscrite ou imprim√©e) Format de l‚Äôexamen:\tExercices pratiques avec VS Code.",
    "tags": [],
    "title": " √âvaluation #1 (20%)",
    "uri": "/semaine5/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences",
    "content": "Objectifs Cr√©er, modifier et parcourir une liste simple. Manipuler des listes imbriqu√©es (listes dans un liste). Appliquer les notions des listes simples sur les chaines de caract√®res. Cr√©er, afficher, embellir et enregistrer des graphiques simples avec matplotlib. Qu‚Äôest-ce qu‚Äôune liste ? Une liste, c‚Äôest un conteneur dans lequel on peut ranger plusieurs √©l√©ments (nombres, cha√Ænes, bool√©ens, etc.).\nC‚Äôest un peu comme une bo√Æte √† compartiments.\nma_liste = [3, 7, 42, 5]\rChaque √©l√©ment a une position (appel√©e indice).\nprint(ma_liste[0]) # Affiche 3 (le premier √©l√©ment) print(ma_liste[2]) # Affiche 42\rCr√©er et modifier une liste Cr√©er une liste vide liste_vide = []\rAjouter des √©l√©ments fruits = [\"pomme\", \"banane\"] fruits.append(\"cerise\") # [\"pomme\", \"banane\", \"cerise\"]\rRemplacer un √©l√©ment fruits[1] = \"poire\" # [\"pomme\", \"poire\", \"cerise\"]\rParcourir une liste avec la boucle for La boucle for est utilis√©e quand on conna√Æt d‚Äôavance combien de fois on doit r√©p√©ter.\nAvec une boucle for. La syntaxe g√©n√©rale de la boucle est:\nfor variable in sequence: instructions √† r√©p√©ter jusqu'√† la fin de la s√©quence.\rExemple :\nfruits = [\"pommes\", \"poires\", \"cerises\"] for fruit in fruits: print(f\"J'aime les {fruit}\") # Affiche: J'aime les pommes J'aime les poires J'aime les cerises\rExplication :\nLa variable fruit prendra comme valeur, les √©l√©ments de la liste fruits un √† un. Avec les indices :\nfor i in range(len(fruits)): print(f\"L'indice {i} contient : {fruits[i]}\") # Affiche: L'indice 0 contient : pomme L'indice 1 contient : poire L'indice 2 contient : cerise\rExplication :\nLa fonction `` g√©n√®re des nombres entiers de 0 √† 2 (qui est le nombre d‚Äô√©l√©ments dans la liste - 1) len(fruits) vaut 3, le nombre d‚Äô√©l√©ments dans la liste. La variable i prendra les valeurs 0, 1 et 2. fruits[i] contient un √† un les fruits de la liste fruits. Fonctions utiles sur les listes simples M√©thode / Fonction Description Exemple append(valeur) Ajoute un √©l√©ment √† la fin ma_liste.append(10) insert(indice, valeur) Ins√®re une valeur √† une position donn√©e ma_liste.insert(1, 99) pop(indice) Retire l‚Äô√©l√©ment √† l‚Äôindice (ou le dernier) ma_liste.pop() remove(valeur) Retire la premi√®re occurrence d‚Äôune valeur ma_liste.remove(42) len() Donne la longueur de la liste len(ma_liste) sorted() Trie la liste sans la modifier sorted(ma_liste) sort()* Trie la liste en la modifiant ma_liste.sort() reverse() Inverse l‚Äôordre des √©l√©ments ma_liste.reverse() in V√©rifie si un √©l√©ment est dans la liste \"pomme\" in fruits ‚Üí True index(valeur) Renvoie l‚Äôindice de la premi√®re occurrence fruits.index(\"poire\") count(valeur) Compte combien de fois un √©l√©ment appara√Æt fruits.count(\"poire\") max() Trouver le max max(ma_liste) min() Trouver le min min(ma_liste) sum() Calculer une somme des √©l√©ments s = sum(ma_liste) Exemple : Calcul de la moyenne d‚Äôune liste de notes\nnotes = [85, 90, 78] moyenne = sum(notes) / len(notes) print(f\"Moyenne : {moyenne:.2f}\")\r*Important\rmots.sort() utilis√© sur une liste de chaines de caract√®res trie la liste en respectant l‚Äôordre Unicode, ce qui fait que les mots commen√ßant par une majuscule sont plac√©s avant ceux en minuscules. mots = [\"pomme\", \"Banane\", \"abricot\", \"Orange\"] mots.sort() print(mots) # Affichage : ['Banane', 'Orange', 'abricot', 'pomme']\rListes imbriqu√©es Une liste imbriqu√©e, c‚Äôest une liste qui contient d‚Äôautres listes.\nExemple : Une liste contenant trois listes\nmatrice = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ]\rAcc√©der √† un √©l√©ment pr√©cis Il faut pr√©ciser les deux indices: [rang√©e][colonne] print(matrice[0][2]) # Affiche 3 qui se trouve sur la premi√®re rang√©e (indice 0) et la 3e colonne (indice 2). Parcourir une liste imbriqu√©e Il faut utiliser deux boucles for. La premi√®re boucle pour parcourir chaque rang√©e une √† la fois. La deuxi√®me boucle (√† l‚Äôint√©rieur de la premi√®re) pour parcourir les √©l√©ments d‚Äôune rang√©e. for ligne in matrice: for valeur in ligne: print(valeur)\rExemple : afficher une grille 3x3\ngrille = [ [\"X\", \"O\", \"X\"], [\"O\", \"X\", \"O\"], [\"O\", \"X\", \"X\"] ] for ligne in grille: for valeur in ligne: print(valeur) # Affiche: X O X O X O O X X\r√Ä retenir (listes)\rUne liste permet de stocker plusieurs valeurs. On acc√®de aux √©l√©ments avec des indices. Les listes peuvent √™tre modifi√©es facilement. Une liste peut contenir d‚Äôautres listes ‚Üí super utile pour repr√©senter des tableaux ou des grilles. Les cha√Ænes de caract√®res sont des listes On peut manipuler une chaine de caract√®re comme une suite de lettres ou une liste de lettres.\nmessage = \"Bonjour √† tous!\" print(message[0]) # 'B' (le premier caract√®re) print(message[-1]) # '!' (le dernier caract√®re) print(message[-7]) # '√†' Sachez que‚Ä¶\rLes espaces comptent dans le calcul du nombre de caract√®res dans une chaine.\nParcourir une cha√Æne for lettre in message: print(lettre)\rLongueur d‚Äôune cha√Æne len(message) # Nombre de caract√®res, incluant les espaces\rFonctions utiles sur les cha√Ænes Objectif Code Python Passer en minuscules message.lower() Passer en majuscules message.upper() Enlever les espaces autour texte.strip() S√©parer une cha√Æne en morceaux message.split(\" \") Remplacer un mot message.replace(\"Bonjour\", \"Salut\") Trouver la position d‚Äôun mot/lettre message.find(\"bio\") Compter le nombre de fois qu‚Äôun mot appara√Æt message.count(\"e\") √Ä retenir (chaines de caract√®res)\rUne chaine de caract√®res se manipule comme une liste simple, dont les √©l√©ments sont des caract√®res (incluant l‚Äôespace). Visualiser les donn√©es avec Matplotlib (graphiques de base) Pour pouvoir visualiser des donn√©es sous forme de graphiques, nous utiliserons le module pyplot de la biblioth√®que matplotlib.\nImporter matplotlib.pyplot La partie de matplotlib qu‚Äôon utilise le plus pour cr√©er des graphiques s‚Äôappelle pyplot.\nimport matplotlib.pyplot as plt\rOn utilise souvent l‚Äôabr√©viation plt pour simplifier l‚Äô√©criture.\nTracer une courbe simple avec plot() La fonction plot() prend deux listes (ou deux tableaux) :\nLa premi√®re repr√©sente l‚Äôaxe x La seconde repr√©sente l‚Äôaxe y x = [0, 1, 2, 3, 4] y = [0, 1, 4, 9, 16] plt.plot(x, y)\rSachez qu‚Äô‚Ä¶\r√Ä ce stade, rien ne s‚Äôaffiche encore. Il faut une derni√®re commande pour voir le graphique.\nAfficher le graphique avec show() La commande show() sert √† afficher la figure dans une nouvelle fen√™tre.\nplt.show()\rR√©sultat : Une courbe repr√©sentant les points (0,0), (1,1), (2,4), (3,9), (4,16). Exemple complet import matplotlib.pyplot as plt x = [0, 1, 2, 3, 4] y = [0, 1, 4, 9, 16] plt.plot(x, y) plt.show()\rPersonnaliser le trait de la courbe (Style de ligne, couleur, marqueur) plt.plot(x, y, color='green', linestyle='--', marker='o')\rR√©sultat Options les plus courantes pour la m√©thode plt.plot() Option Description Exemple color ou c Couleur de la courbe color='red' ou c='r' linestyle ou ls Style de ligne : continue, pointill√©e, etc. ls='--' linewidth ou lw √âpaisseur de la ligne lw=2 marker Symbole pour marquer les points marker='o' markersize ou ms Taille des marqueurs ms=8 label Nom de la courbe (pour la l√©gende) label='x¬≤' alpha Transparence (0 = invisible, 1 = opaque) alpha=0.7 plt.plot(x, y, color='blue', linestyle='--', marker='o', label='x¬≤', linewidth=2) plt.legend()\rCela trace une courbe en bleu, avec une ligne pointill√©e, des cercles aux points, une l√©gende ‚Äúx¬≤‚Äù, et une ligne √©paisse.\nAjouter un titre, des √©tiquettes et une grille plt.title(\"Courbe de y = x¬≤\") : Ajoute un titre au graphique. plt.xlabel(\"x\") et plt.ylabel(\"y\") : Donnent un nom √† l‚Äôaxe horizontal (ici, ‚Äúx‚Äù) et un nom √† l‚Äôaxe vertical (ici, ‚Äúy‚Äù). plt.grid() : Affiche une grille pour mieux lire les valeurs sur le graphique (optionnel mais utile). x = [0, 1, 2, 3, 4] y = [0, 1, 4, 9, 16] plt.plot(x, y) plt.title(\"Courbe de y = x¬≤\") plt.xlabel(\"x\") plt.ylabel(\"y\") plt.grid() plt.show()\rR√©sultat Tracer plusieurs courbes sur un m√™me graphique et ajouter une l√©gende Il suffit d‚Äôutiliser autant de plt.plot() qu‚Äôil y a de courbes √† tracer. La fonction plt.legend() affiche une l√©gende sur le graphique. Elle permet d‚Äôidentifier les courbes ou les √©l√©ments trac√©s, √† condition qu‚Äôils aient √©t√© nomm√©s avec label=. x = [0, 1, 2, 3, 4] y1 = [0, 1, 4, 9, 16] y2 = [0, 2, 3, 4, 8] plt.plot(x, y1, label=\"objet A\") plt.plot(x, y2, label=\"objet B\") plt.title(\"Deux courbes sur le m√™me graphique\") plt.xlabel(\"x\") plt.ylabel(\"y\") plt.grid() plt.legend() # Affiche la l√©gende plt.show()\rCela ajoutera une petite bo√Æte dans le coin du graphique indiquant ‚ÄúCourbe 1‚Äù et ‚ÄúCourbe 2‚Äù.\nR√©sultat Enregistrer un graphique sous forme d‚Äôimage La fonction plt.savefig(\"figure.png\") enregistre le graphique dans un fichier image (ici au format PNG). Cela permet de conserver ou partager le graphique m√™me sans afficher la fen√™tre graphique.\nplt.plot(x, y) plt.savefig(\"figure.png\")\rLe fichier ‚Äúfigure.png‚Äù sera cr√©√© dans le m√™me dossier que le fichier .ipynb.\nFonctions de base pour les graphiques Fonction / M√©thode R√¥le principal Exemple minimal plt.plot(x, y) Trace une courbe (x, y) plt.plot(x, y) plt.scatter(x, y) Trace un nuage de points plt.scatter(x, y) plt.bar(x, y) Trace un diagramme √† barres plt.bar(x, y) plt.hist(data) Trace un histogramme plt.hist(valeurs) plt.title(\"titre\") Ajoute un titre au graphique plt.title(\"Graphique\") plt.xlabel(\"nom de l'axe x\") Ajoute un titre √† l‚Äôaxe des x plt.xlabel(\"Temps (s)\") plt.ylabel(\"nom de l'axe y\") Ajoute un titre √† l‚Äôaxe des y plt.ylabel(\"Vitesse (m/s)\") plt.legend() Affiche une l√©gende pour les courbes nomm√©es plt.legend() plt.grid(True) Affiche une grille plt.grid(True) plt.show() Affiche le graphique √† l‚Äô√©cran (√† la fin du trac√©) plt.show() plt.savefig(\"figure.png\") Sauvegarde le graphique en image plt.savefig(\"mon_graph.png\") plt.figure(figsize=(w, h)) D√©finit la taille du graphique (en pouces) plt.figure(figsize=(8, 4)) √Ä retenir (graphiques simples)\rImporter la biblioth√®que : matplotlib.pyplot Cr√©er les donn√©es sous forme de listes ou de tableaux NumPy Tracer une courbe avec plt.plot(x, y) plt.plot() change selon le type de graphique (voir le tableau ICI Il existe des options permettant de personnaliser les couleurs, traits, etc. Afficher le graphique avec plt.show(). Ajouter un titre avec plt.title(\"Mon graphique\") Nommer les axes avec plt.xlabel(\"x\") et plt.ylabel(\"y\") Afficher une grille pour mieux lire les valeurs avec plt.grid() Ajouter une l√©gende avec label=\"...\" dans plot() et plt.legend() Tracer plusieurs courbes sur un m√™me graphique en appelant plusieurs fois plt.plot(...) avant plt.show() Exercices Bloc-notes de d√©part\nListes Exercice 1 : Cr√©e une liste contenant 5 animaux. Affiche chaque animal avec une phrase du type : Voici un/une \u003canimal\u003e\rExercice 2 : Cr√©e une grille de 5 lignes et 4 colonnes (liste de listes) contenant des chiffres. Affiche tous les chiffres un par un. Exercice 3 : Demande √† l‚Äôutilisateur d‚Äôentrer 3 noms et stocke-les dans une liste. Affiche chaque animal en ordre alphab√©tique croissant. Affiche chaque animal en ordre alphab√©tique d√©croissant. Exercice 4 Cr√©e une liste de s√©quences : suspects = [ [\"A\", \"T\", \"C\", \"G\"], [\"G\", \"A\", \"T\", \"G\"], [\"A\", \"T\", \"T\", \"G\"] ]\rAffiche la 2e base de la 1re s√©quence. Affiche la derni√®re base de la 3e s√©quence. Chaines de caract√®res Exercice 5 - Cr√©er une liste de nombres √† partir d‚Äôune liste de mots Utiliser une boucle pour obtenir le nombre de lettres de chaque mot Pour chacun des mots, ajouter son nombre de lettres dans la liste nb_lettres. mots = [\"chlorophylle\", \"atome\", \"prot√©ine\"] nb_lettres = []\rExercice 6 - Convertir en ARN Une s√©quence d‚ÄôADN est ‚ÄúATGCT‚Äù.\nMets-la en minuscules. Remplace les ‚Äút‚Äù par ‚Äúu‚Äù. Graphiques Exercice 7 ‚Äì Temp√©rature dans une journ√©e Heures : [0, 4, 8, 12, 16, 20, 24] Temp√©ratures : [-5, -2, 3, 7, 6, 1, -2] Cr√©e un graphique de temp√©rature en fonction de l‚Äôheure.\nAjoute :\nUn titre \"Temp√©rature en fonction de l‚Äôheure\" Les √©tiquettes \"Heure (h)\" et \"Temp√©rature (¬∞C)\" Une grille Exercice 8 - Comparaison des valeurs mesur√©es et attendues On a mesur√© la concentration d‚Äôun solut√© √† diff√©rentes temp√©ratures. Les valeurs attendues suivent une loi th√©orique, tandis que les valeurs mesur√©es viennent d‚Äôun capteur.\ntemp = [10, 20, 30, 40, 50] attendu = [2.1, 3.8, 5.6, 7.3, 9.0] mesure = [2.0, 3.9, 5.2, 7.5, 8.8]\rAffiche les valeurs attendues avec plt.plot(...) (ligne noire avec des ronds). Affiche les valeurs mesur√©es avec plt.bar(...) (barres bleues l√©g√®rement transparentes). Ajoute un titre, une l√©gende, les √©tiquettes d‚Äôaxes et une grille. Atelier Exercice Une station m√©t√©orologique t‚Äôa envoy√© un fichier .csv nomm√© temperatures.csv, contenant les relev√©s bruts de temp√©ratures (en ¬∞C) prises 3 fois par jour (matin, midi, soir) pendant 7 jours.\nTu disposes de la variable suivante :\ndonnees = [ \"12.3, 16.8, 14.0\", # jour 1 : matin, midi, soir \"11.5, 18.2, 15.4\", \"10.8, 17.6, 14.9\", \"13.0, 19.1, 16.3\", \"14.1, 20.2, 18.5\", \"12.9, 18.7, 16.2\", \"11.7, 17.8, 15.0\" ]\r√âtapes √† suivre : Extraction et nettoyage des donn√©es\nTransforme chaque cha√Æne de la liste donnees en une liste de 3 nombres flottants. Obtiens ainsi une liste imbriqu√©e temperatures, contenant 7 sous-listes (une par jour). Calculs sur les donn√©es\nCalcule la temp√©rature moyenne de chaque jour, et stocke les r√©sultats dans une nouvelle liste moyennes_journali√®res. Trouve la temp√©rature maximale de toute la semaine et quel jour elle a eu lieu. Calcule la temp√©rature moyenne g√©n√©rale sur l‚Äôensemble de la semaine (toutes les valeurs confondues). Visualisation avec matplotlib\nCr√©e une figure avec :\nl‚Äôaxe X : jours (1 √† 7) l‚Äôaxe Y : temp√©rature moyenne journali√®re Ajoute un titre et des √©tiquettes d‚Äôaxes\nAjoute une grille et une courbe bleue avec marqueurs ronds ('o')\nSauvegarde le graphique sous le nom graphique_temperature.png\nExploration des cha√Ænes de caract√®res\nAffiche le nombre de jours o√π la temp√©rature du midi a d√©pass√© 18¬∞C Utilise la fonction split() pour isoler les temp√©ratures de midi dans chaque cha√Æne. Exemple d‚Äôaffichage attendu (partiel) : Liste des temp√©ratures (liste imbriqu√©e) :\r[[12.3, 16.8, 14.0], [11.5, 18.2, 15.4], ..., [11.7, 17.8, 15.0]]\rTemp√©ratures moyennes par jour :\r[14.37, 15.03, 14.43, ..., 14.83]\rTemp√©rature maximale : 20.2¬∞C (Jour 5)\rTemp√©rature moyenne de la semaine : 15.01¬∞C\rNombre de jours o√π la temp√©rature de midi a d√©pass√© 18¬∞C : 2\rBo√Æte √† outils float() pour convertir un texte en nombre split(',') pour d√©couper une cha√Æne append() pour ajouter dans une liste sum() et len() pour les moyennes plt.plot(), plt.title(), plt.xlabel(), plt.grid(), plt.savefig() √Ä faire avant le prochain cours Lire la prochaine le√ßon : 7. Tableaux numpy et op√©rations scientifiques Faire les exercices de la prochaine le√ßon :",
    "description": "Objectifs Cr√©er, modifier et parcourir une liste simple. Manipuler des listes imbriqu√©es (listes dans un liste). Appliquer les notions des listes simples sur les chaines de caract√®res. Cr√©er, afficher, embellir et enregistrer des graphiques simples avec matplotlib. Qu‚Äôest-ce qu‚Äôune liste ? Une liste, c‚Äôest un conteneur dans lequel on peut ranger plusieurs √©l√©ments (nombres, cha√Ænes, bool√©ens, etc.).\nC‚Äôest un peu comme une bo√Æte √† compartiments.\nma_liste = [3, 7, 42, 5]\rChaque √©l√©ment a une position (appel√©e indice).",
    "tags": [],
    "title": " Listes, cha√Ænes et visualisation des donn√©es",
    "uri": "/semaine6/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences",
    "content": "Objectifs Cr√©er des tableaux de donn√©es √† une ou deux dimensions. Calculer des moyennes et √©carts types. G√©rer des donn√©es exp√©rimentales incompl√®tes (np.nan). Comparer des r√©sultats entre √©l√©ments ou conditions. Filtrer des donn√©es selon des conditions. Tracer un graphique √† barres muni d‚Äôune barre d‚Äôerreur avec matplotlib. Tracer une droite de r√©gression et interpr√©ter la pente, l‚Äôordonn√©e √† l‚Äôorigine et le coefficient de d√©termination R¬≤ √âtablir une relation entre deux donn√©es Importer la biblioth√®que import numpy as np\rCr√©er un tableau de donn√©es (array) Tableau 1D sol = np.array([32.0, 35.5, 37.2]) print(f\"Solubilit√©s mesur√©es : {sol}\")\rTableau 2D Un tableau numpy multidimentionnel c‚Äôest un tableau numpy qui contient une liste de listes. matrice = np.array([[1, 2], [3, 4]]) print(matrice.shape) # Affiche les dimensions (2 lignes, 2 colonnes)\rCr√©er des tableaux remplis d‚Äôune m√™me valeur Rempli de 0 np.zeros((2, 3)) # Cr√©e un tableau de 2 lignes et 3 colonnes rempli de 0\rRempli de 1 np.ones((3, 2)) # Cr√©e un tableau de 3 lignes et 2 colonnes rempli de 1\rRempli d‚Äôune autre valeur np.full(4, 0.5) # Cr√©e un tableau [0.5, 0.5, 0.5, 0.5]\rRempli de valeurs espac√©es r√©guli√®rement (utile pour les graphiques) np.linspace(0, 10, 5) # Cr√©e un tableau : [ 0. 2.5 5. 7.5 10. ]\rFonctions statistiques Calculer la moyenne des donn√©es moy = np.mean(sol) print(f\"Moyenne : {moy:.2f} g/100mL\")\rCalculer l‚Äô√©cart type des donn√©es ecart = np.std(sol) print(f\"√âcart type : {ecart:.2f}\")\rOp√©rations vectorielles (rapides et simples) L‚Äôint√©r√™t principal de NumPy : on peut faire des op√©rations sur tout un tableau en une seule ligne.\nx = np.array([1, 2, 3]) y = np.array([4, 5, 6])\rAddition √©l√©ment par √©l√©ment x + y # [5 7 9]\rSoustraction √©l√©ment par √©l√©ment y - x # [3 3 3]\rMultiplication par un scalaire x * 10 # [10 20 30]\rDivision par un scalaire y / 2 # [2. 2.5 3. ]\rIgnorer des valeurs manquantes (np.nan) Parfois, une mesure a √©t√© oubli√©e ou mal prise. On utilise np.nan pour repr√©senter une valeur manquante :\nsol = np.array([32.0, np.nan, 37.2]) moy = np.nanmean(sol) print(f\"Moyenne (sans valeur manquante) : {moy:.2f} g/100mL\")\rLa fonction np.nanmean() calcule la moyenne des √©l√©ments en ignorant les valeurs NaN (Not a Number), qui repr√©sentent g√©n√©ralement des donn√©es manquantes ou invalides.\nNotez\rSans nanmean, la fonction np.mean(sol) retournerait nan car une seule valeur nan dans la liste contamine le r√©sultat.\nFiltrage de donn√©es Cr√©er un tableau et afficher uniquement certaines valeurs selon une condition array = np.array([2, 5, 7, 1, 8, 3]) masque = array \u003e 5\t# Masquage : valeurs sup√©rieures √† 5 print(f\"Masque bool√©en : {masque} valeurs_filtr√©es = array[masque] print(f\"Valeurs sup√©rieures √† 5 : {valeurs_filtr√©es}\")\rSortie attendue :\nMasque bool√©en : [False False True False True False]\rValeurs sup√©rieures √† 5 : [7 8]\rComptage conditionnel avec np.sum Compter combien de valeurs respectent un seuil donn√©.\narray = np.array([3, 7, 4, 6, 2, 9, 5]) seuil = 5 nb_valeurs = np.sum(array \u003e seuil)\t# Comptage des valeurs \u003e 5 print(f\"Nombre de valeurs sup√©rieures √† {seuil} : {nb_valeurs}\")\rSortie attendue :\nNombre de valeurs sup√©rieures √† 5 : 3\r√Ä retenir\rimport numpy as np pour utiliser NumPy. np.array() cr√©e un tableau de donn√©es. np.zeros(), np.ones(), np.full() cr√©ent des tableaux remplis. np.linspace() g√©n√®re des valeurs espac√©es r√©guli√®rement. np.mean() calcule la moyenne. np.std() calcule l‚Äô√©cart type. np.nanmean() ignore les donn√©es manquantes. Les op√©rations (+, -, *, /) s‚Äôappliquent √† tout le tableau. Tracer un graphique √† barres avec barre d‚Äôerreurs Importer la biblioth√®que import matplotlib.pyplot as plt\rGraphique √† barres Exemple de base :\nnoms = [\"A\", \"B\", \"C\"] valeurs = [4, 7, 5] plt.bar(noms, valeurs) plt.title(\"R√©sultats\") plt.xticks(rotation=0) plt.legend([\"Score\"]) plt.show()\rFonction R√¥le plt.bar(x, y) Cr√©e des barres plt.xticks() Contr√¥le les √©tiquettes sur l‚Äôaxe x Graphique avec barres d‚Äôerreur Exemple :\nx = [1, 2, 3] y = [10, 12, 9] erreurs = [0.5, 0.3, 0.6] plt.errorbar(x, y, yerr=erreurs, fmt=\"o\", label=\"Mesures\") plt.title(\"Mesures avec incertitude\") plt.legend() plt.grid(True) plt.show()\rArgument Signification yerr barres d‚Äôerreur verticales xerr (optionnel) erreurs horizontales fmt=\"o\" style des points Tracer une droite de r√©gression Rappel : L‚Äô√©quation d‚Äôune droite est y = a¬∑x + b\nExemple import numpy as np x = np.array([1, 2, 3, 4]) y = np.array([2.1, 4.2, 6.1, 8.0]) # Droite de r√©gression : y = a¬∑x + b a, b = np.polyfit(x, y, 1) y_reg = a * x + b plt.plot(x, y, \"o\", label=\"Donn√©es\") plt.plot(x, y_reg, \"-\", label=f\"y = {a:.2f}x + {b:.2f}\") plt.legend() plt.grid(True) plt.show()\rAffichage propre Fonction Effet plt.tight_layout() Ajuste l‚Äôespacement pour √©viter le chevauchement R√©sum√© minimal T√¢che Fonction Graphique √† barres plt.bar() Barres d‚Äôerreur plt.errorbar() Droite de r√©gression np.polyfit(), plt.plot() Affichage final plt.show(), plt.tight_layout() Exercices Bloc-notes de d√©part\nExercice 1 ‚Äì Solubilit√© d‚Äôun sel Une solution a √©t√© test√©e √† diff√©rentes temp√©ratures. Voici les r√©sultats (en g/100‚ÄØmL) :\nimport numpy as np sol = np.array([32.0, 35.5, np.nan, 37.2, 39.0])\rAffiche les valeurs de solubilit√©. Calcule et affiche la moyenne en ignorant la valeur manquante. Calcule et affiche l‚Äô√©cart type. Exercice 2 ‚Äì Temp√©ratures journali√®res Un thermom√®tre enregistre la temp√©rature trois fois par jour pendant 7 jours :\ntemperatures = np.array([ [12.1, 17.3, 14.2], [11.8, 16.9, 13.9], [13.0, 18.1, 15.0], [12.5, 17.5, 14.7], [np.nan, 16.0, 14.0], [13.2, 18.0, 15.2], [12.0, 17.0, 14.5] ])\rQuelle est la forme (shape) du tableau ? Calcule la moyenne journali√®re pour chaque jour. Calcule la temp√©rature moyenne du matin (1re colonne), en ignorant les donn√©es manquantes. Exercice 3 ‚Äì Analyse d‚ÄôADN Un test mesure l‚Äôintensit√© de 5 fragments ADN (valeurs arbitraires) pour deux √©chantillons :\nech1 = np.array([3.2, 2.8, 4.1, 3.9, 2.5]) ech2 = np.array([2.9, 3.0, 4.2, 4.0, 2.7])\rAdditionne les deux tableaux pour obtenir un profil combin√©. Calcule la diff√©rence entre les deux √©chantillons. Calcule la moyenne et l‚Äô√©cart type pour chacun des deux. Exercice 4 ‚Äì Pressions dans un cylindre On mesure la pression (en kPa) √† diff√©rentes hauteurs (en cm) dans un cylindre :\nhauteur = np.linspace(0, 50, 6) # [0, 10, 20, 30, 40, 50] pression = np.array([101.3, 100.0, 98.7, 97.5, 96.2, 95.0])\rAffiche les hauteurs et les pressions. Calcule la variation de pression par tranche de 10 cm. Calcule la moyenne de pression. Exercice 5 ‚Äì Croissance d‚Äôune plante (mod√©lisation simplifi√©e) Une plante pousse selon ce mod√®le : sa taille augmente de 2 cm par jour.\nCr√©e un tableau NumPy qui contient la taille de la plante pendant 10 jours, en partant de 5 cm. Ajoute 1‚ÄØcm suppl√©mentaire √† chaque valeur pour simuler un apport d‚Äôengrais. Calcule la moyenne de croissance avec et sans engrais. Trace la droite de r√©gression lin√©aire pour le graphique (plot()) de la pression en fonction de la hauteur. Atelier Exercice : Analyse d‚Äôune exp√©rience sur l‚Äôeffet de la lumi√®re sur la croissance des plantes Une √©quipe de recherche a mesur√© la hauteur (en cm) de jeunes plantes apr√®s 10 jours de croissance dans trois conditions lumineuses diff√©rentes :\nlumi√®re naturelle, lumi√®re LED blanche, lumi√®re LED rouge. Pour chaque condition, 5 plantes ont √©t√© mesur√©es. Certaines donn√©es sont manquantes, car une ou deux plantes n‚Äôont pas surv√©cu. Les donn√©es brutes sont les suivantes :\nCondition Plante 1 Plante 2 Plante 3 Plante 4 Plante 5 Naturelle 12.5 13.1 12.9 13.0 12.8 LED blanche 11.2 11.6 np.nan 11.5 11.3 LED rouge 10.4 10.1 10.2 np.nan np.nan √âcris un programme Python qui :\nRepr√©sente les donn√©es sous forme d‚Äôun tableau 2D (√† l‚Äôaide de numpy). Calcule la moyenne et l‚Äô√©cart-type de la hauteur des plantes pour chaque condition, en ignorant les valeurs manquantes. Compare les hauteurs moyennes entre les conditions (affiche par exemple la condition ayant la croissance moyenne la plus √©lev√©e). Affiche un r√©sum√© clair, par exemple : Moyenne (Naturelle) = 12.86 cm, √©cart-type = 0.22 cm\rMoyenne (LED blanche) = ...\r...\rCondition avec la plus grande croissance moyenne : Naturelle\rAffiche le graphique montrant la croissance moyenne par type de lumi√®re, avec barres d‚Äôerreur repr√©sentant l‚Äô√©cart-type. Aide Utilise numpy.array() pour construire le tableau. Utilise np.nanmean() et np.nanstd() pour les calculs. Tu peux cr√©er une liste conditions = [\"Naturelle\", \"LED blanche\", \"LED rouge\"] pour faciliter l‚Äôaffichage. Utilise np.arrange(), plt.bar() et plt.plt.xticks() pour construire le graphique. √Ä faire avant le prochain cours Lire la prochaine le√ßon : 8. Dictionnaires Faire les exercices de la prochaine le√ßon :",
    "description": "Objectifs Cr√©er des tableaux de donn√©es √† une ou deux dimensions. Calculer des moyennes et √©carts types. G√©rer des donn√©es exp√©rimentales incompl√®tes (np.nan). Comparer des r√©sultats entre √©l√©ments ou conditions. Filtrer des donn√©es selon des conditions. Tracer un graphique √† barres muni d‚Äôune barre d‚Äôerreur avec matplotlib. Tracer une droite de r√©gression et interpr√©ter la pente, l‚Äôordonn√©e √† l‚Äôorigine et le coefficient de d√©termination R¬≤ √âtablir une relation entre deux donn√©es Importer la biblioth√®que import numpy as np\rCr√©er un tableau de donn√©es (array) Tableau 1D sol = np.",
    "tags": [],
    "title": " Tableaux numpy et droite de r√©gression",
    "uri": "/semaine7/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences",
    "content": "Objectifs Cr√©er un dictionnaire simple pour repr√©senter des donn√©es associatives (ex. : atome ‚Üí masse atomique) Manipuler des donn√©es dans un dictionnaire (acc√®s, ajout, modification, parcours). Lire un fichier csv contenant des donn√©es exp√©rimentales Explorer les donn√©es Filtrer les r√©sultats pour donn√©e cibl√©e. Comparer des valeurs selon une donn√©e Qu‚Äôest-ce qu‚Äôun dictionnaire? Un dictionnaire est une structure de donn√©es qui associe des cl√©s √† des valeurs. Il permet de stocker des informations organis√©es, un peu comme un mini-fichier Excel, mais avec des √©tiquettes personnalis√©es au lieu d‚Äôindices num√©riques.\nSyntaxe de base :\nmon_dictionnaire = { \"cl√©1\": valeur1, \"cl√©2\": valeur2 }\rUtilisation fr√©quente en sciences Les dictionnaires sont utiles pour :\nAssocier des symboles d‚Äô√©l√©ments √† des valeurs (masse molaire, charge, √©tat) Regrouper des r√©sultats par √©chantillon (ex. temp√©rature par lieu) Associer des noms de g√®nes √† leur expression Exemple Un dictionnaire contenant les masses molaires de quelques √©l√©ments :\nmasses_molaires = { \"H\": 1.008, \"O\": 15.999, \"C\": 12.011 }\rAcc√©der √† une valeur avec une cl√© print(masses_molaires[\"O\"]) # Affiche : 15.999\rSi la cl√© n‚Äôexiste pas, Python d√©clenche une erreur KeyError.\nAjouter ou modifier une valeur Ajouter masses_molaires[\"N\"] = 14.007\rModifier masses_molaires[\"C\"] = 12.01 # Correction\rV√©rifier si une cl√© est pr√©sente if \"H\" in masses_molaires: print(\"L‚Äôhydrog√®ne est dans le dictionnaire.\")\rParcourir un dictionnaire Via les cl√©s for element in masses_molaires: print(element)\rVia les valeurs for valeur in masses_molaires.values(): print(valeur)\r.values() permet d‚Äôobtenir uniquement les valeurs du dictionnaire, sans les cl√©s. Utile quand on veut faire un calcul avec les valeurs, comme une moyenne ou une somme. for valeur in densites.values(): print(valeur)\rVia les paires cl√©-valeur : for element, masse in masses_molaires.items(): print(f\"{element} ‚Üí {masse}\")\r.items() permet d‚Äôobtenir les couples cl√©-valeur sous forme de paires (appel√©es aussi tuples en Python). Utile quand on veut √† la fois le nom (cl√©) et la valeur associ√©e pour un affichage ou un traitement. Supprimer une entr√©e del masses_molaires[\"H\"]\rTraitement de fichiers textes (.csv) Les fichiers .csv (Comma-Separated Values) permettent de stocker des tableaux de donn√©es.\nExemple de fichier mesures.csv :\ntemps,temperature\r0,22.5\r5,24.1\r10,26.3\r15,28.0\rLire et √©crire des fichiers de donn√©es (.csv) √âcrire (cr√©er) :\nwith open(\"donnees.csv\", \"w\") as f: f.write(\"Nom,√Çge\\n\") f.write(\"Alice,20\\n\") f.write(\"Bob,22\\n\")\rLire un fichier .csv\n# Lecture du fichier CSV import csv with open(\"donnees.csv\", \"r\") as f: contenu = f.read() print(contenu)\rPour des donn√©es num√©riques, on peut utiliser numpy.savetxt() et numpy.loadtxt() import numpy as np # Sauvegarder un tableau tableau = np.array([[1, 2], [3, 4]]) np.savetxt(\"tableau.csv\", tableau, delimiter=\",\") # Charger un tableau donnees = np.loadtxt(\"tableau.csv\", delimiter=\",\") print(donnees)\rTraitement de fichiers .csv avec Pandas Importer la biblioth√®que import pandas as pd\rCharger un fichier CSV df = pd.read_csv(\"solubilite.csv\")\rAfficher les 10 premi√®res lignes print(df.head())\rAfficher les noms des colonnes print(df.columns)\rAfficher toutes les mesures pour un seul compos√© Exemple : tout ce qui concerne le nitrate de potassium (KNO‚ÇÉ)\nfiltre = df[\"Compos√©\"] == \"KNO3\" print(df[filtre])\rAcc√©der √† une colonne (ex. : Temp√©ratures) print(df[\"Temp√©rature\"])\rMoyenne de solubilit√© pour un compos√© filtre = df[\"Compos√©\"] == \"NaCl\" moyenne = df[filtre][\"Solubilit√©\"].mean() print(f\"Moyenne de solubilit√© pour NaCl : {moyenne:.2f} g/100mL\")\rBoucler sur les compos√©s composes = df[\"Compos√©\"].unique() for compose in composes: moyenne = df[df[\"Compos√©\"] == compose][\"Solubilit√©\"].mean() print(f\"{compose} : {moyenne:.2f} g/100mL\")\rAjouter une colonne calcul√©e Exemple : ajouter une colonne indiquant si la solubilit√© est ‚Äúhaute‚Äù (\u003e 80) ou ‚Äúfaible‚Äù\ndf[\"√âvaluation\"] = df[\"Solubilit√©\"] \u003e 80 print(df)\r√Ä retenir\rDictionnaires : mon_dict = {\"a\": 5, \"b\": 10} mon_dict[\"a\"] # acc√©der √† une valeur for cl√© in mon_dict: # boucle sur les cl√©s mon_dict.get(\"cl√©\", valeur_par_d√©faut) # acc√®s s√©curis√© mon_dict.keys(), .values() # it√©rations\rFichiers .csv (sans Pandas): open(), write(), read(), loadtxt(), savetxt()\nFichiers .csv (avec Pandas):\nimport pandas as pd pd.read_csv(\"fichier.csv\") # lecture de fichier df.head() # aper√ßu des premi√®res donn√©es df[\"colonne\"] # acc√®s √† une colonne df.loc[3], df.iloc[3] # acc√®s √† une ligne df.mean(), df[\"col\"].std() # stats df.dropna() # suppression des lignes incompl√®tes df[df[\"col\"] \u003e seuil] # filtrage conditionnel\rExercices Bloc-notes de d√©part\nExercice 1 - Densit√©s Cr√©e un dictionnaire densites qui contient la densit√© (en g/mL) de l‚Äôeau, de l‚Äô√©thanol et du mercure :\ndensites = { \"eau\": ..., \"√©thanol\": ..., \"mercure\": ... }\rPuis :\nAffiche la densit√© du mercure. Ajoute la densit√© de l‚Äôhuile (0.91 g/mL). Affiche toutes les substances et leur densit√©. Exercice 2 ‚Äì Chargement et exploration Fichier de donn√©es: solubilite.csv\nCharge le fichier solubilite.csv. Affiche les premi√®res lignes. Affiche les noms de colonnes. Affiche toutes les temp√©ratures pour le compos√© \"NaCl\". Exercice 3 ‚Äì Moyenne de solubilit√© Calcule la moyenne de solubilit√© pour \"KNO3\". Fais de m√™me pour \"NaCl\". Compare les deux valeurs avec des f-strings. Exercice 4 ‚Äì Boucle sur les compos√©s Affiche la moyenne de solubilit√© pour chaque compos√© du fichier. Indique pour chacun si elle est sup√©rieure √† 80 g/100mL. Exercice 5 ‚Äì Ajout d‚Äôune colonne Cr√©e une colonne Tendance qui vaut \"Haute\" si la solubilit√© est \u003e 80 et \"Faible\" sinon. Affiche les 10 premi√®res lignes du tableau mis √† jour. Atelier Exercice On a r√©alis√© des exp√©riences pour mesurer la temp√©rature de cristallisation de diff√©rentes substances dans plusieurs conditions (pression normale, pression √©lev√©e, en solution aqueuse, etc.).\nLes donn√©es sont enregistr√©es dans un fichier CSV, sous la forme suivante :\nFichier √† utiliser: cristallisation.csv\nContenu :\nsubstance,condition,temp_cristallisation\rNaCl,pression_normale,801\rNaCl,en_solution,800\rH2O,pression_normale,0\rH2O,pression_elevee,-1\rFe,pression_normale,1538\rFe,en_solution,1530\rInstructions Lire le fichier CSV cristallisation.csv et stocker les donn√©es sous forme de dictionnaire ayant la structure suivante : { \"NaCl\": {\"pression_normale\": 801, \"en_solution\": 800}, \"H2O\": {\"pression_normale\": 0, \"pression_elevee\": -1}, \"Fe\": {\"pression_normale\": 1538, \"en_solution\": 1530} }\rAfficher les temp√©ratures de cristallisation pour chaque substance dans chaque condition avec une phrase comme : NaCl cristallise √† 801¬∞C sous pression normale. NaCl cristallise √† 800¬∞C en solution. ...\rAjouter une nouvelle mesure : supposons qu‚Äôon a obtenu une temp√©rature de cristallisation de -5¬∞C pour H2O dans une nouvelle condition en_solution. Ajoutez cette donn√©e au dictionnaire.\nV√©rifiez si la substance \"Cu\" est pr√©sente dans le dictionnaire. Si elle ne l‚Äôest pas, affichez : \"Cu n'est pas pr√©sent dans les donn√©es.\"\nFiltrer et afficher toutes les substances ayant une temp√©rature de cristallisation inf√©rieure √† 100¬∞C dans au moins une condition.\nComparer les temp√©ratures de cristallisation d‚Äôune m√™me substance selon les conditions exp√©rimentales et afficher la diff√©rence maximale observ√©e pour chaque substance, par exemple :\nPour H2O, l‚Äô√©cart maximal est de 5¬∞C entre deux conditions.\rExtension pour les rapides (facultatif) Cr√©er une fonction comparaison_substances(donnees) qui :\nCompare les temp√©ratures moyennes de cristallisation de chaque substance. Identifie quelle substance cristallise en moyenne √† la temp√©rature la plus √©lev√©e. √Ä faire avant le prochain cours Semaine prochaine est une r√©vision\nLire la prochaine le√ßon : 9. R√©vision Faire les exercices de la prochaine le√ßon :",
    "description": "Objectifs Cr√©er un dictionnaire simple pour repr√©senter des donn√©es associatives (ex. : atome ‚Üí masse atomique) Manipuler des donn√©es dans un dictionnaire (acc√®s, ajout, modification, parcours). Lire un fichier csv contenant des donn√©es exp√©rimentales Explorer les donn√©es Filtrer les r√©sultats pour donn√©e cibl√©e. Comparer des valeurs selon une donn√©e Qu‚Äôest-ce qu‚Äôun dictionnaire? Un dictionnaire est une structure de donn√©es qui associe des cl√©s √† des valeurs. Il permet de stocker des informations organis√©es, un peu comme un mini-fichier Excel, mais avec des √©tiquettes personnalis√©es au lieu d‚Äôindices num√©riques.",
    "tags": [],
    "title": " Dictionnaires et fichier textes (csv)",
    "uri": "/semaine8/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences",
    "content": "AJOUTER GRAPHIQUE\nRAPPEL: Semaine prochaine c‚Äôest le deuxi√®me examen (25%)\nObjectifs Utiliser des listes de listes et des listes de dictionnaires. Parcourir des structures imbriqu√©es avec des boucles for imbriqu√©es. R√©utiliser les connaissances sur listes, dictionnaires, et tableaux NumPy. Appliquer des conditions lors des parcours. Tracer des graphiques Nom du fichier : revisions_eval2.ipynb\nExercice 1 ‚Äì Liste de listes 1. Cr√©e une grille 3x3 contenant les nombres de 1 √† 9 (sous forme de liste de listes). 2. Affiche la valeur au centre. 3. Affiche tous les nombres un par un avec deux boucles for. grille = [ ‚Ä¶ ]\nExercice 2 ‚Äì Liste de dictionnaires On t‚Äôa donn√© les donn√©es suivantes : mesures = [\r{\"id\": \"E1\", \"temp\": 21.3, \"pression\": 101.5},\r{\"id\": \"E2\", \"temp\": 23.0, \"pression\": 100.8},\r{\"id\": \"E3\", \"temp\": 20.8, \"pression\": 102.0}\r]\r1. Affiche le nom de chaque √©chantillon et sa temp√©rature. 2. Affiche uniquement les √©chantillons dont la temp√©rature est sup√©rieure √† 22 ¬∞C. Exercice 3 ‚Äì NumPy 2D Cr√©e un tableau NumPy 2D √† partir de cette grille : import numpy as np\rtableau = np.array(grille)\r1. Affiche la moyenne de chaque ligne (utilise une boucle). 2. Affiche tous les √©l√©ments sup√©rieurs √† 5. Corrig√© Nom du fichier : 4_revisions_boucles_corrige.ipynb\n# Exercice 1 grille = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] print(grille[1][1]) # Centre = 5 for ligne in grille: for valeur in ligne: print(valeur) # Exercice 2 mesures = [ {\"id\": \"E1\", \"temp\": 21.3, \"pression\": 101.5}, {\"id\": \"E2\", \"temp\": 23.0, \"pression\": 100.8}, {\"id\": \"E3\", \"temp\": 20.8, \"pression\": 102.0} ] for echantillon in mesures: print(f\"{echantillon['id']} : {echantillon['temp']} ¬∞C\") for echantillon in mesures: if echantillon[\"temp\"] \u003e 22: print(f\"{echantillon['id']} est chaud (\u003e22 ¬∞C)\") # Exercice 3 import numpy as np tableau = np.array(grille) for ligne in tableau: print(np.mean(ligne)) print(tableau[tableau \u003e 5])",
    "description": "AJOUTER GRAPHIQUE\nRAPPEL: Semaine prochaine c‚Äôest le deuxi√®me examen (25%)\nObjectifs Utiliser des listes de listes et des listes de dictionnaires. Parcourir des structures imbriqu√©es avec des boucles for imbriqu√©es. R√©utiliser les connaissances sur listes, dictionnaires, et tableaux NumPy. Appliquer des conditions lors des parcours. Tracer des graphiques Nom du fichier : revisions_eval2.ipynb\nExercice 1 ‚Äì Liste de listes 1. Cr√©e une grille 3x3 contenant les nombres de 1 √† 9 (sous forme de liste de listes).",
    "tags": [],
    "title": " R√©vision ou rattrapage",
    "uri": "/semaine9/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences",
    "content": "Informations ‚¶Å Date:\tSemaine #10 (Voir le calendrier)\n‚¶Å Mati√®re: Semaines 6 √† 9 inclusivement\n‚¶Å Documentation permise: 1 feuille recto-verso (manuscrite ou imprim√©e)\n‚¶Å Format:\t√Ä confirmer",
    "description": "Informations ‚¶Å Date:\tSemaine #10 (Voir le calendrier)\n‚¶Å Mati√®re: Semaines 6 √† 9 inclusivement\n‚¶Å Documentation permise: 1 feuille recto-verso (manuscrite ou imprim√©e)\n‚¶Å Format:\t√Ä confirmer",
    "tags": [],
    "title": " √âvaluation #2 (25%)",
    "uri": "/semaine10/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences",
    "content": "Objectifs D√©finir vos propres fonctions avec def (param√®tres, return, port√©e locale) Documenter les fonctions personnalis√©es (docstring) Cr√©ation de fonction avec def Une fonction peut:\nAfficher un r√©sultat (ex: print()) Retourner un r√©sultat (ex: input()) Comment cr√©er et utiliser une fonction ? On utilise le mot cl√© def. Suivi du nom de la fonction. Suivi de parenth√®ses (). Suivi de deux-points :. Les instructions de la fonction sont sur les lignes d‚Äôen dessous, d√©cal√©es. Ce d√©calage, permet √† Python de reconnaitre le code qui appartient √† la fonction et qui sera ex√©cut√© lors de son utilisation. L‚Äôabsence de ce d√©calage (indentation) provoque l‚Äôerreur IndentationError. IndentationError: expected an indented block after function definition on line X\rImportant\rLes r√®gles de nomenclature des variables, s‚Äôappliquent aussi aux noms de fonctions. Entre les parenth√®ses, on peut indiquer des param√®tres ou pas, mais les parenth√®ses sont obligatoires. Syntaxes g√©n√©rales Une fonction qui affiche le r√©sultat :\ndef nom_fonction(param1, param2): # \u003c--- Les deux-points instructions print(r√©sultat) # \u003c--- La fonction se termine ici\rExemple :\n# D√©finition de la fonction def aire_rectangle(longueur, largeur): aire = longueur * largeur print(f\"L'aire du rectangle de longueur {longueur} et de largeur {largeur} est {aire} cm^2\") Cette fonction re√ßoit deux valeurs (longueur et largeur du rectangle), calcule l‚Äôaire du rectangle et affiche l‚Äôaire.\nUne fonction qui retourne le r√©sultat :\ndef nom_fonction(param1, param2): instructions return r√©sultat # \u003c---- La fonction se termine ici\rExemple :\n# D√©finition de la fonction def aire_rectangle(longueur, largeur): aire = longueur * largeur return aire Cette fonction re√ßoit deux valeurs (longueur et largeur du rectangle), calcule l‚Äôaire du rectangle et la retourne.\nLe mot-cl√© return Il renvoie un r√©sultat √† l‚Äôendroit o√π la fonction a √©t√© utilis√©e (appel√©e). D√®s que return est ex√©cut√©, la fonction s‚Äôarr√™te. Appeler (utiliser) une fonction Utilisation de la fonction aire_rectangle() qui affiche l‚Äôaire\n# Appel de la fonction aire_rectangle(5, 2)\rLes valeurs utilis√©es entre les parenth√®ses seront utilis√©es par la fonction. Ici, 5 est la valeur pour la longueur et 2 celle de la largeur.\nUtilisation de la fonction aire_rectangle() qui retourne l‚Äôaire\nsurface = aire_rectangle(5, 2) # Appel de la fonction print(f\"L'aire du rectangle est : {surface}\")\rNotez la diff√©rence: Ici, il faut stocker le r√©sultat de la fonction dans une variable.\nOn aurait aussi pu faire:\nprint(f\"L'aire du rectangle est : {aire_rectangle(5, 2)}\") # Appel de la fonction\rLa port√©e locale des variables Les variables cr√©√©es √† l‚Äôint√©rieur d‚Äôune fonction (ex: aire) n‚Äôexistent que dans la fonction.\nExemple :\ndef test(): x = 10 \u003c---- On peut utiliser x qu'√† l'int√©rieur de la fonction. return x \u003c---- Apr√®s cette ligne, x n'existe plus. print(test()) # OK, affiche 10 print(x) # Erreur : x n'existe pas ici\rDocumenter ses fonctions (docstrings) Les docstrings sont des cha√Ænes de caract√®res utilis√©es pour documenter les fonctions. Elles sont plac√©es juste apr√®s la d√©finition de la fonction.\nFormat standard\ndef nom_fonction(param): \"\"\" Description de la fonction. Param√®tres: - param (type): Description. Retour: - type: Description. \"\"\"\rExemple :\ndef addition(a, b): \"\"\" Calcule la somme de deux nombres. Param√®tres: a (int, float): Le premier nombre. b (int, float): Le deuxi√®me nombre. Retour: int, float: La somme des deux nombres. \"\"\" return a + b\r√Ä retenir\rdef : sert √† d√©finir une fonction nom_fonction(param√®tres) : Les param√®tres sont les variables repr√©sentant les donn√©es dont la fonction a besoin pour obtenir le r√©sultat. return : Permet √† la fonction de retourner un r√©sultat (resultat = fonction() ou print(fonction())) Port√©e locale : Signifie que les variables dans une fonction n‚Äôexistent qu‚Äô√† l‚Äôint√©rieur de .elle-ci| Pour utiliser une fonction pr√©d√©finie ou personnalis√©, il faut √©crire sont nom, les parenth√®ses et les param√®tres si elle en a. Exercices Appel de fonction\rPour les exercices #2 √† #5, utilisez (appelez) la fonction cr√©e.\nBloc-notes de d√©part\nExercice 1 : La loi d‚ÄôOhm Un technicien de laboratoire vous demande d‚Äô√©crire un programme Python pour calculer la tension (U) en volts selon la loi d‚ÄôOhm. Il voudrait pouvoir entrer la valeur de la r√©sistance (en ohms) et la valeur du courant (en amp√®res), puis obtenir la tension.\nLoi d‚ÄôOhm : $ U = R √ó I $\r√âcrire un programme qui :\nDemande √† l‚Äôutilisateur d‚Äôentrer la valeur de la r√©sistance (en ohms). Demande √† l‚Äôutilisateur d‚Äôentrer la valeur du courant (en amp√®res). Calcule et affiche la tension √† l‚Äôaide d‚Äôune phrase. NB : Ajoutez des explications en commentaire dans le code.\nR√©sultat attendu :\nEntrer la r√©sistance en ohms : 10\rEntrer le courant en amp√®res : 2\rLa tension est de 20.0 V\rExercice 2 : √âl√©ment chimique √âcrire un programme qui :\nDemande √† l‚Äôutilisateur d‚Äôentrer le nom d‚Äôun √©l√©ment chimique. Affiche un message disant ‚ÄúL‚Äô√©l√©ment choisi est [nom]‚Äù Exemple d‚Äôaffichage attendu (√©l√©ment oxyg√®ne) :\nEntrer le nom d'un √©l√©ment chimique : oxyg√®ne L‚Äô√©l√©ment choisi est : oxyg√®ne\rExercice 3 : Convertir Celsius en Kelvin Cr√©e une fonction nomm√©e convertir_C_en_K qui :\nprend une temp√©rature en ¬∞C en param√®tre retourne la temp√©rature en Kelvin (formule : K = C + 273.15) Exemple d‚Äôaffichage attendu (30¬∞C) :\nUne temp√©rature de 30¬∞C √©quivaut √† 303.15 K.\rExercice 4 : Calculer une √©nergie cin√©tique Cr√©ez une fonction energie_cinetique(m, v) qui calcule et retourne la valeur de l‚Äô√©nergie cin√©tique d‚Äôun objet en joules:\n$E_c = \\frac{1}{2} \\cdot m \\cdot v^2$\ro√π\nm : La masse de l‚Äôobjet en kilogrammes. v : La vitesse de l‚Äôobjet en m√®tres par seconde. Exemple d‚Äôaffichage attendu avec masse=2.0 kg et vitesse=3.0 m/s :\nL'√©nergie cin√©tique de l'objet est de 9.0 joules.\rExercice 5 : Aire d‚Äôun cercle √âcrire une fonction aire_cercle() qui :\nDemande √† l‚Äôutilisateur d‚Äôentrer le rayon du cercle (en cm). Calcule l‚Äôaire du cercle (utilisez le module math pour PI et le rayon¬≤.) Affiche l‚Äôaire du cercle, arrondie √† 2 d√©cimales (utilisez la fonction round). Exemple d‚Äôaffichage attendu (rayon de 5 cm) :\nAire du cercle de rayon 5 cm : 78.54 cm¬≤\rExercice 6 : V√©rifier la port√©e locale Cr√©e une fonction tester_variable() qui cr√©e une variable prenom = \"votre pr√©nom et l‚Äôaffiche dans la fonction avec un print. Essaye ensuite d‚Äôafficher la valeur de prenom √† l‚Äôext√©rieur de la fonction.\nExemple d‚Äôaffichage attendu :\nNameError Traceback (most recent call last) Cell In[16], line 6 3 print(f\"Dans la fonction tu t'appelles : {prenom}\") 5 tester_variable() ----\u003e 6 print(f\"√Ä l'exterieur de la fonction tu t'appelles : {prenom}\") NameError: name 'prenom' is not defined\rRAPPEL: Le troisi√®me et dernier examen (20%) et pr√©vu √† la semaine 15.\nLire la description du Projet final Prendre connaissance de la Grille de correction S‚Äôapproprier des Notions √† savoir pour r√©ussir le projet",
    "description": "Objectifs D√©finir vos propres fonctions avec def (param√®tres, return, port√©e locale) Documenter les fonctions personnalis√©es (docstring) Cr√©ation de fonction avec def Une fonction peut:\nAfficher un r√©sultat (ex: print()) Retourner un r√©sultat (ex: input()) Comment cr√©er et utiliser une fonction ? On utilise le mot cl√© def. Suivi du nom de la fonction. Suivi de parenth√®ses (). Suivi de deux-points :. Les instructions de la fonction sont sur les lignes d‚Äôen dessous, d√©cal√©es.",
    "tags": [],
    "title": " Fonctions personnalis√©es",
    "uri": "/semaine11/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences",
    "content": "Objectifs Pr√©sentation du projet Pr√©sentation de la grille de correction Analyse pr√©liminaire du projet (activit√© guid√©e): Comprendre le probl√®me Identifier les variables (types), constantes, formules, fonctions, etc. √âlaborer les algorithmes Projet : Enqu√™te scientifique par analyse d‚ÄôADN Contexte Vous √™tes le ou la bioinformaticien¬∑ne en charge d‚Äôune enqu√™te m√©dico-l√©gale : votre r√¥le est d‚Äôidentifier, √† partir de donn√©es g√©n√©tiques partielles, le ou les suspects les plus compatibles avec un √©chantillon d‚ÄôADN trouv√© sur une sc√®ne de crime.\nMais votre mission ne s‚Äôarr√™te pas √† un simple tri de valeurs‚ÄØ: vous devrez aussi mod√©liser les relations g√©n√©tiques par analyse statistique, quantifier l‚Äôincertitude, et pr√©senter vos r√©sultats de mani√®re claire et rigoureuse √† l‚Äôaide de Python.\nContraintes techniques Fichiers de d√©part : Bloc-notes de travail projet_enquete_adn.ipynb et le fichier de donn√©es contenant les profils ADN suspects.csv se trouvant sur Moodle. Langage : Python dans Jupyter Notebook (.ipynb). Biblioth√®ques autoris√©es : pandas, numpy, matplotlib, scipy Programmation lettr√©e : structurez votre rapport avec des sections Markdown, des titres explicites, et des explications claires. Fonctions personnalis√©es : vous devez cr√©er vos propres fonctions √† l‚Äôaide de def, avec param√®tres et valeurs retourn√©es, pour automatiser les analyses. Normes : code lisible, modulaire, comment√©. Remise Remettre un seul fichier : projet_prenom_nom.ipynb, toutes cellules ex√©cut√©es. Facultatif : joindre une version PDF export√©e du bloc-notes. Rappel : vos superpouvoirs Python Pensez √† tester chaque fonction sur des cas simples avant de l‚Äôappliquer aux donn√©es compl√®tes. Utilisez les cellules Markdown pour documenter vos choix et expliquer votre d√©marche. Soyez cr√©atifs¬∑ves, mais rigoureux¬∑ses. Bonne enqu√™te ! Que la science √©claire vos soup√ßons‚Ä¶ et que votre code r√©siste √† toutes les erreurs !\n√âtapes de votre enqu√™te (guide progressif) 1. √âlaboration de votre plan de travail Avant de coder, r√©digez une br√®ve strat√©gie en Markdown :\nQuelles sont les √©tapes de l‚Äôenqu√™te‚ÄØ? Quelles fonctions pourriez-vous cr√©er pour structurer votre code (par exemple‚ÄØ: comparaison, calcul, affichage graphique, etc.)‚ÄØ? Dans quel ordre allez-vous proc√©der ? Cette planification peut √©voluer en cours de route, mais elle doit √™tre claire d√®s le d√©part.\n2. Chargement et nettoyage des donn√©es Importez les biblioth√®ques autoris√©es. Chargez le fichier suspects.csv. Observez la structure des donn√©es. Identifiez les caract√®res manquants (ex. ?) et pr√©parez vos fonctions pour g√©rer ces cas lors des comparaisons. Cr√©ez une fonction pour comparer deux s√©quences ADN et calculer le pourcentage de correspondance malgr√© les caract√®res ambigus.\n3. Calculs de correspondance Pour chaque suspect et pour chaque locus, comparez sa s√©quence avec celle trouv√©e sur la sc√®ne de crime.\nCalculez :\nLe taux de correspondance par locus (en %) La moyenne globale de correspondance Cr√©ez des fonctions r√©utilisables pour ces calculs. Par exemple‚ÄØ: calculer_correspondance(sequence1, sequence2), analyser_suspects(df)‚Ä¶\n4. R√©sum√© et visualisation des r√©sultats Pr√©sentez les taux de correspondance dans un tableau synth√®se (DataFrame).\nIdentifiez les suspects ayant les correspondances les plus √©lev√©es.\nRepr√©sentez les r√©sultats avec :\nUn diagramme √† barres (correspondance par locus, par suspect) Des barres d‚Äôerreur illustrant l‚Äôincertitude estim√©e (¬±5‚ÄØ%) Cr√©ez une fonction pour g√©n√©rer ces graphiques √† partir d‚Äôun DataFrame.\n5. Analyse statistique (r√©gression lin√©aire) Choisissez deux loci (ex. : Locus_1 et Locus_2).\nUtilisez scipy.stats.linregress() pour :\nObtenir la pente, l‚Äôinterception, le R¬≤ et l‚Äôincertitude sur la pente. Tracer la droite de r√©gression sur un nuage de points (scores par suspect). Afficher l‚Äô√©quation de la droite et l‚Äôerreur sur la pente. Vous pouvez cr√©er une fonction comme analyser_relation_loci(df, locus1, locus2).\n6. Interpr√©tation scientifique Dans une section Markdown :\nConcluez sur les suspects les plus probables.\nDiscutez de :\nLa qualit√© des donn√©es L‚Äôimpact des caract√®res manquants La valeur explicative de vos analyses statistiques D‚Äô√©ventuelles am√©liorations (plus de loci, meilleure qualit√© des √©chantillons, approches bioinformatiques plus avanc√©es‚Ä¶)",
    "description": "Objectifs Pr√©sentation du projet Pr√©sentation de la grille de correction Analyse pr√©liminaire du projet (activit√© guid√©e): Comprendre le probl√®me Identifier les variables (types), constantes, formules, fonctions, etc. √âlaborer les algorithmes Projet : Enqu√™te scientifique par analyse d‚ÄôADN Contexte Vous √™tes le ou la bioinformaticien¬∑ne en charge d‚Äôune enqu√™te m√©dico-l√©gale : votre r√¥le est d‚Äôidentifier, √† partir de donn√©es g√©n√©tiques partielles, le ou les suspects les plus compatibles avec un √©chantillon d‚ÄôADN trouv√© sur une sc√®ne de crime.",
    "tags": [],
    "title": " Projet - Pr√©sentation et analyse",
    "uri": "/semaine12/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences¬†\u003e¬†\rProjet - Pr√©sentation et analyse",
    "content": "Pond√©ration du projet Rappel : Le projet compte pour 35% de la note finale du cours.\nGrille crit√©ri√©e Version PDF √† t√©l√©chargeable\nVolet Crit√®re Excellent (100‚ÄØ%) Satisfaisant (75‚ÄØ%) Partiel (50‚ÄØ%) Insuffisant (0-25‚ÄØ%) /xx 1. Planification Le bloc-notes est structur√© avec des objectifs, des √©tapes claires et une organisation logique Tous les √©l√©ments sont pr√©sents, bien hi√©rarchis√©s et coh√©rents Pr√©sence de la plupart des √©l√©ments, organisation g√©n√©rale claire Organisation pr√©sente mais confuse ou incompl√®te Aucune planification apparente /10 2. Lisibilit√© du code Le code est lisible, correctement indent√©, les fonctions sont bien d√©finies et les noms explicites Code propre, bien comment√©, sans redondance Code globalement clair avec peu d‚Äôerreurs ou incoh√©rences Fonctions peu claires ou redondantes, erreurs de logique mineures Code difficile √† suivre, fonctions inutilisables ou syntaxe d√©faillante /15 3. Comparaison ADN Fonction de comparaison bien pens√©e (tol√©rante, ex. avec ?) et appliqu√©e aux trois loci Fonction robuste, g√®re variations/incertitudes, bien r√©utilis√©e Fonction correcte mais pas optimis√©e, application partielle Fonction rigide ou trop simple, partiellement utilis√©e Aucune fonction claire ou mal utilis√©e /10 4. R√©sultats tabul√©s Moyennes bien calcul√©es, tableau tri√©, lisible et interpr√©table Tableau complet et tri√©, avec moyenne calcul√©e Tableau lisible mais sans tri ou calculs partiels Tableau confus ou incomplet Aucun tableau fonctionnel /10 5. Visualisation de base Diagrammes propres, avec axes lisibles, couleurs pertinentes Diagrammes bien faits et interpr√©tables Diagramme pr√©sent mais peu lisible ou non personnalis√© Diagramme brouillon ou ininterpr√©table Aucun diagramme /10 6. Programmation lettr√©e Markdown utilis√© pour structurer l‚Äôexplication du raisonnement Titres, descriptions, cheminement clair et continu Explications pr√©sentes mais parfois floues ou manquantes Peu ou pas d‚Äôexplication, structure d√©sorganis√©e Aucune cellule explicative /10 7. Analyse critique finale Interpr√©tation approfondie, prise en compte des limites et incertitudes biologiques Analyse claire avec mention des incertitudes ou biais Analyse partielle, peu critique ou tr√®s g√©n√©rale Aucune r√©elle interpr√©tation, simple r√©p√©tition du r√©sultat Aucune conclusion /5 8. Code ex√©cutable Toutes les cellules s‚Äôex√©cutent sans erreur, r√©sultats reproductibles Une ou deux erreurs mineures mais sans cons√©quence Plusieurs erreurs g√™nantes, parfois bloquantes Le code ne fonctionne pas sans corrections majeures Aucun code ex√©cutable /10 9. R√©gression lin√©aire R√©gression bien r√©alis√©e, r√©sultats interpr√©t√©s avec un lien au contexte biologique Mod√®le pr√©sent et partiellement justifi√© R√©gression pr√©sente mais mal appliqu√©e ou sans analyse R√©gression maladroite ou d√©connect√©e du sujet Absente /10 10. Barres d‚Äôerreur Int√©gration claire et pertinente de barres d‚Äôerreur (biologiques/statistiques) Barres d‚Äôerreur pr√©sentes mais peu justifi√©es Pr√©sentes mais incompl√®tes ou inappropri√©es Pr√©sence symbolique ou hors sujet Aucune barre d‚Äôerreur /10",
    "description": "Pond√©ration du projet Rappel : Le projet compte pour 35% de la note finale du cours.\nGrille crit√©ri√©e Version PDF √† t√©l√©chargeable\nVolet Crit√®re Excellent (100‚ÄØ%) Satisfaisant (75‚ÄØ%) Partiel (50‚ÄØ%) Insuffisant (0-25‚ÄØ%) /xx 1. Planification Le bloc-notes est structur√© avec des objectifs, des √©tapes claires et une organisation logique Tous les √©l√©ments sont pr√©sents, bien hi√©rarchis√©s et coh√©rents Pr√©sence de la plupart des √©l√©ments, organisation g√©n√©rale claire Organisation pr√©sente mais confuse ou incompl√®te Aucune planification apparente /10 2.",
    "tags": [],
    "title": "Grille d'√©valuation crit√©ri√©e",
    "uri": "/semaine12/grille/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences¬†\u003e¬†\rProjet - Pr√©sentation et analyse",
    "content": "Voici une liste des notions, fonctions et m√©thodes que vous devez avoir apprises avant de faire le projet ADN. Elle couvre la programmation de base, les biblioth√®ques scientifiques et les comp√©tences analytiques sp√©cifiques au projet.\nA. Programmation de base en Python Th√®me Notions, fonctions, m√©thodes Variables \u0026 types int, float, str, bool, list, dict Structures de contr√¥le if, elif, else, for, while, break, continue Fonctions personnalis√©es def, return, param√®tres et port√©e locale Manipulation de cha√Ænes str.lower(), str.replace(), in, ==, slicing, boucles sur cha√Ænes Listes \u0026 tableaux imbriqu√©s acc√®s √† un √©l√©ment, boucles imbriqu√©es, conditions dans les listes B. Manipulation de donn√©es avec Pandas Th√®me Fonctions / m√©thodes Cr√©er un DataFrame pd.DataFrame(...) Lire un fichier CSV pd.read_csv(...) Parcourir un DataFrame .iterrows(), indexation par colonne Calculs sur colonnes .mean(), .round(), .sort_values() Cr√©er des colonnes df[\"nouvelle_colonne\"] = ... C. NumPy pour le calcul scientifique Th√®me Fonctions / m√©thodes Cr√©er des tableaux NumPy np.array(...) Fonctions math√©matiques np.mean(), np.std(), np.full(), np.linspace() Op√©rations vectorielles tableau ¬± valeur, array1 + array2, etc. D. Visualisation avec Matplotlib Th√®me Fonctions / m√©thodes Graphique √† barres plt.bar(...), plt.xticks(...), plt.title(...), plt.legend() Graphique avec barres d‚Äôerreur plt.errorbar(x, y, xerr, yerr) Tracer une droite de r√©gression plt.plot(...), affichage de l‚Äô√©quation Affichage plt.show(), plt.grid(True), plt.tight_layout() E. Statistiques et r√©gression avec SciPy Th√®me Fonctions / m√©thodes R√©gression lin√©aire simple from scipy.stats import linregress Extraire les r√©sultats slope, intercept, r_value, std_err, p_value √âvaluer la concordance r_value ** 2 pour le coefficient de d√©termination F. Programmation lettr√©e et structuration du bloc-notes Th√®me Pratiques attendues Markdown Titres (#), sous-titres, explication des sections S√©paration claire Th√©orie, code, interpr√©tation Commentaires # dans le code + commentaires en Markdown pour chaque bloc Ex√©cution sans erreur Toutes les cellules ex√©cut√©es du d√©but √† la fin sans blocage R√©sum√© des comp√©tences transversales Analyser un probl√®me scientifique Choisir les bons outils (librairie, type de graphique) Repr√©senter des incertitudes et des relations math√©matiques Interpr√©ter les r√©sultats dans un contexte r√©aliste Produire un rapport structur√©, scientifique et rigoureux",
    "description": "Voici une liste des notions, fonctions et m√©thodes que vous devez avoir apprises avant de faire le projet ADN. Elle couvre la programmation de base, les biblioth√®ques scientifiques et les comp√©tences analytiques sp√©cifiques au projet.\nA. Programmation de base en Python Th√®me Notions, fonctions, m√©thodes Variables \u0026 types int, float, str, bool, list, dict Structures de contr√¥le if, elif, else, for, while, break, continue Fonctions personnalis√©es def, return, param√®tres et port√©e locale Manipulation de cha√Ænes str.",
    "tags": [],
    "title": "Notions n√©cessaires pour r√©ussir le projet",
    "uri": "/semaine12/competences_reussite/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences",
    "content": "",
    "description": "",
    "tags": [],
    "title": " Projet-Partie 2: Repr√©sentations graphiques de base",
    "uri": "/semaine13/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences",
    "content": "",
    "description": "",
    "tags": [],
    "title": " Projet-Partie 3: Repr√©sentation graphique avanc√©e",
    "uri": "/semaine14/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences",
    "content": "Informations Date:\tSemaine #15 (Voir le calendrier) Mati√®re: Semaines 11 √† 14 inclusivement Documentation permise: 1 feuille recto-verso (manuscrite ou imprim√©e) Format:\t√Ä confirmer Important\rVous devez remettre votre code sur Moodle : le fichier projet_prenom_nom.ipynb au plus tard ce soir √† 23h59.",
    "description": "Informations Date:\tSemaine #15 (Voir le calendrier) Mati√®re: Semaines 11 √† 14 inclusivement Documentation permise: 1 feuille recto-verso (manuscrite ou imprim√©e) Format:\t√Ä confirmer Important\rVous devez remettre votre code sur Moodle : le fichier projet_prenom_nom.ipynb au plus tard ce soir √† 23h59.",
    "tags": [],
    "title": " √âvaluation #3 (20%)",
    "uri": "/semaine15/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences¬†\u003e¬†\r√Ä FAIRE",
    "content": "Consigne du projet final Contexte : Dans ce projet, vous allez analyser l‚Äôimpact de la consommation de caf√©ine sur la fr√©quence cardiaque. Les donn√©es collect√©es concernent la fr√©quence cardiaque de quatre sujets avant et apr√®s consommation de caf√© √† des intervalles de 30 minutes.\nObjectifs Importer et manipuler les donn√©es : Vous allez charger les donn√©es dans un DataFrame pandas √† partir du fichier CSV fourni et effectuer un traitement pour extraire les informations pertinentes. Analyser la variation de la fr√©quence cardiaque apr√®s la consommation de caf√©. Visualiser les tendances de la fr√©quence cardiaque pour chaque sujet avec un graphique lin√©aire, en mettant en √©vidence l‚Äôeffet de la consommation de caf√© sur la fr√©quence cardiaque. Faire des comparaisons entre les sujets et interpr√©ter les r√©sultats. Vous allez calculer des statistiques descriptives (moyenne, √©cart-type) et identifier les variations notables dans les donn√©es. R√©diger une conclusion sur l‚Äôimpact de la caf√©ine sur la fr√©quence cardiaque, en basant votre analyse sur les r√©sultats obtenus. Consignes sp√©cifiques : Lecture et traitement des donn√©es :\nImportez les donn√©es √† l‚Äôaide de pandas et affichez un r√©sum√© des donn√©es. Utilisez numpy pour effectuer des calculs comme la moyenne et l‚Äô√©cart-type de la fr√©quence cardiaque pour chaque sujet avant et apr√®s l‚Äôingestion de caf√©. Cr√©ation des fonctions :\nCr√©ez une fonction variation(frequence) qui calcule les variations de fr√©quence cardiaque entre les mesures (avant et apr√®s). Cr√©ez une fonction analyser_impact(frequences_avant, frequences_apres) qui retourne la diff√©rence moyenne de la fr√©quence cardiaque et des statistiques de variation. Visualisation :\nUtilisez matplotlib pour tracer l‚Äô√©volution de la fr√©quence cardiaque pour chaque sujet avant et apr√®s l‚Äôingestion de caf√©. Ajoutez une ligne horizontale pour la fr√©quence cardiaque moyenne avant consommation et une autre pour la fr√©quence apr√®s consommation. Exportation :\nExportez un fichier CSV contenant les r√©sultats de votre analyse, incluant les variations de fr√©quence cardiaque pour chaque sujet. Donn√©es : Le fichier CSV problematique_1_cafeine.csv contient les donn√©es √† analyser. Il est structur√© comme suit :\nSujet : Nom du sujet (A, B, C, D) Temps (min) : Temps √©coul√© depuis le d√©but de l‚Äôexp√©rience (en minutes) Frequence (bpm) : Fr√©quence cardiaque (battements par minute) Crit√®res d‚Äô√©valuation : Pr√©cision de l‚Äôanalyse : Exactitude des calculs et des interpr√©tations statistiques. Qualit√© du code : Clart√© et organisation du code, utilisation ad√©quate des structures de donn√©es (pandas, numpy). Visualisation : Graphiques clairs et pertinents, avec une bonne utilisation de matplotlib. Clart√© de la conclusion : Interpr√©tation logique des r√©sultats et conclusion sur l‚Äôeffet de la caf√©ine sur la fr√©quence cardiaque. Format du projet : D√©lai : Le projet est √† rendre dans trois semaines (fin de la semaine 15).\nLivrables :\nUn notebook Jupyter contenant le code et les analyses. Le fichier CSV export√© avec les r√©sultats. Un document PDF ou une section dans le notebook avec la conclusion. Ressources : Pandas : https://pandas.pydata.org/ Matplotlib : https://matplotlib.org/",
    "description": "Consigne du projet final Contexte : Dans ce projet, vous allez analyser l‚Äôimpact de la consommation de caf√©ine sur la fr√©quence cardiaque. Les donn√©es collect√©es concernent la fr√©quence cardiaque de quatre sujets avant et apr√®s consommation de caf√© √† des intervalles de 30 minutes.\nObjectifs Importer et manipuler les donn√©es : Vous allez charger les donn√©es dans un DataFrame pandas √† partir du fichier CSV fourni et effectuer un traitement pour extraire les informations pertinentes.",
    "tags": [],
    "title": "Projet: Effet de la caf√©ine sur la fr√©quence cardiaque",
    "uri": "/afaire/projets/projet1/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences¬†\u003e¬†\r√Ä FAIRE",
    "content": "Consigne du projet final Contexte : Dans ce projet, vous allez analyser la cin√©tique d‚Äôune r√©action chimique en utilisant des donn√©es simul√©es de la concentration d‚Äôun r√©actif au cours du temps. Ces donn√©es vous permettront de d√©terminer la vitesse de la r√©action et d‚Äôobserver l‚Äô√©volution de la concentration.\nObjectifs : Importer et manipuler les donn√©es : Charger les donn√©es √† partir du fichier CSV fourni, puis traiter et pr√©parer les informations pour l‚Äôanalyse. Analyser la cin√©tique de la r√©action chimique : D√©terminer l‚Äô√©volution de la concentration en fonction du temps et estimer des param√®tres de la r√©action (comme la vitesse de r√©action). Visualiser les donn√©es avec un graphique montrant l‚Äô√©volution de la concentration en fonction du temps. R√©diger une conclusion : Bas√©e sur l‚Äôanalyse des r√©sultats, vous devrez expliquer la forme de la courbe de concentration et d√©terminer la nature de la r√©action (par exemple, r√©action de premier ordre, second ordre, etc.). Consignes sp√©cifiques : Lecture et traitement des donn√©es :\nImportez les donn√©es √† l‚Äôaide de pandas et affichez un r√©sum√© des donn√©es. Utilisez numpy pour effectuer des calculs comme la variation moyenne de la concentration entre chaque mesure. Cr√©ation des fonctions :\nCr√©ez une fonction taux_reaction(concentration_initiale, concentration_finale, temps) qui calcule la vitesse de la r√©action en fonction des concentrations initiale et finale et du temps. Cr√©ez une fonction analyse_reaction(temps, concentrations) qui permet d‚Äôanalyser la courbe et de d√©terminer la nature de la r√©action (ordre de r√©action). Visualisation :\nUtilisez matplotlib pour tracer la courbe de la concentration du r√©actif en fonction du temps. Ajoutez une ligne pour la concentration initiale, la concentration finale et tracez la pente de la courbe si applicable. Exportation :\nExportez un fichier CSV contenant les r√©sultats de votre analyse, incluant la concentration du r√©actif √† chaque instant et les vitesses de r√©action calcul√©es. Donn√©es : Le fichier CSV problematique_3_reaction.csv contient les donn√©es √† analyser. Il est structur√© comme suit :\nTemps (s) : Temps √©coul√© depuis le d√©but de la r√©action (en secondes) Concentration (mol/L) : Concentration du r√©actif √† chaque instant de temps mesur√© Crit√®res d‚Äô√©valuation : Pr√©cision de l‚Äôanalyse : Exactitude des calculs et des interpr√©tations des r√©sultats. Qualit√© du code : Clart√© et organisation du code, utilisation appropri√©e des biblioth√®ques (pandas, numpy). Visualisation : Graphiques clairs et pertinents, avec une bonne utilisation de matplotlib. Interpr√©tation des r√©sultats : Excellente capacit√© √† interpr√©ter les donn√©es et √† d√©terminer la nature de la r√©action chimique. Format du projet : D√©lai : Le projet est √† rendre dans trois semaines (fin de la semaine 15).\nLivrables :\nUn notebook Jupyter contenant le code et les analyses. Le fichier CSV export√© avec les r√©sultats. Un document PDF ou une section dans le notebook avec la conclusion sur la cin√©tique de la r√©action. Ressources : Pandas : https://pandas.pydata.org/ Matplotlib : https://matplotlib.org/",
    "description": "Consigne du projet final Contexte : Dans ce projet, vous allez analyser la cin√©tique d‚Äôune r√©action chimique en utilisant des donn√©es simul√©es de la concentration d‚Äôun r√©actif au cours du temps. Ces donn√©es vous permettront de d√©terminer la vitesse de la r√©action et d‚Äôobserver l‚Äô√©volution de la concentration.\nObjectifs : Importer et manipuler les donn√©es : Charger les donn√©es √† partir du fichier CSV fourni, puis traiter et pr√©parer les informations pour l‚Äôanalyse.",
    "tags": [],
    "title": "Projet: Cin√©tique d'une r√©action chimique",
    "uri": "/afaire/projets/projet2/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences¬†\u003e¬†\r√Ä FAIRE",
    "content": "Consigne du projet final Contexte : Une √©quipe d‚Äô√©tudiants a particip√© √† un programme d‚Äôentra√Ænement visant √† am√©liorer leurs performances en course √† pied. Des tests de temps de course (sur une m√™me distance) ont √©t√© r√©alis√©s avant et apr√®s le programme. Vous devez analyser ces donn√©es pour d√©terminer si le programme a √©t√© efficace.\nObjectifs : Importer et manipuler les donn√©es : Charger les donn√©es √† partir d‚Äôun fichier CSV, puis pr√©parer les donn√©es pour l‚Äôanalyse. Comparer les performances avant et apr√®s l‚Äôentra√Ænement. Visualiser les r√©sultats de mani√®re claire et significative. Interpr√©ter les r√©sultats pour conclure sur l‚Äôefficacit√© du programme d‚Äôentra√Ænement. Consignes sp√©cifiques : Lecture et traitement des donn√©es :\nCharger les donn√©es avec pandas. Calculer la diff√©rence entre les temps ‚Äúavant‚Äù et ‚Äúapr√®s‚Äù pour chaque √©l√®ve. Ajouter une colonne \"Am√©lioration\" (temps avant - temps apr√®s). Cr√©ation de fonctions :\nCr√©ez une fonction calculer_amelioration(df) qui retourne les am√©liorations individuelles et les statistiques globales (moyenne, √©cart-type). Cr√©ez une fonction interpreter_resultats(am√©liorations) qui d√©termine si l‚Äôam√©lioration est significative pour l‚Äôensemble des participants. Visualisation avec matplotlib :\nDiagramme en barres comparant les temps ‚Äúavant‚Äù et ‚Äúapr√®s‚Äù pour chaque √©l√®ve. Histogramme des am√©liorations individuelles. Option : tracer une ligne horizontale repr√©sentant l‚Äôam√©lioration moyenne. Exportation :\nExportez un fichier CSV avec les colonnes suivantes : Nom, Avant, Apr√®s, Am√©lioration. Donn√©es : Le fichier problematique_4_course.csv contient les temps de course (en secondes) de plusieurs √©l√®ves avant et apr√®s un programme d‚Äôentra√Ænement. Colonnes :\nNom Avant (s) Apres (s) Crit√®res d‚Äô√©valuation : Pr√©cision de l‚Äôanalyse : Calculs corrects et coh√©rence des conclusions. Qualit√© du code : Code clair, bien comment√© et bien structur√©. Visualisation : Graphiques clairs, bien √©tiquet√©s, pertinents. Interpr√©tation : Interpr√©tation logique, soutenue par les donn√©es, sur l‚Äôefficacit√© du programme. Format du projet : Dur√©e : Projet √† remettre √† la fin de la semaine 15.\nLivrables :\nUn fichier .ipynb (notebook Jupyter) avec votre analyse compl√®te. Le fichier CSV export√© avec les r√©sultats. Une section ‚ÄúConclusion‚Äù claire dans le notebook ou en fichier PDF s√©par√©.",
    "description": "Consigne du projet final Contexte : Une √©quipe d‚Äô√©tudiants a particip√© √† un programme d‚Äôentra√Ænement visant √† am√©liorer leurs performances en course √† pied. Des tests de temps de course (sur une m√™me distance) ont √©t√© r√©alis√©s avant et apr√®s le programme. Vous devez analyser ces donn√©es pour d√©terminer si le programme a √©t√© efficace.\nObjectifs : Importer et manipuler les donn√©es : Charger les donn√©es √† partir d‚Äôun fichier CSV, puis pr√©parer les donn√©es pour l‚Äôanalyse.",
    "tags": [],
    "title": "Projet: Analyse de l‚Äôimpact de l'entra√Ænement sur la performance physique",
    "uri": "/afaire/projets/projet3/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences¬†\u003e¬†\r√Ä FAIRE",
    "content": "Consigne du projet final Contexte : Vous avez men√© une exp√©rience de croissance bact√©rienne dans un milieu nutritif contr√¥l√©. La concentration bact√©rienne a √©t√© mesur√©e √† diff√©rents moments. Vous devez analyser ces donn√©es pour comprendre la dynamique de croissance et d√©terminer le mod√®le le plus appropri√© (lin√©aire, exponentiel, logistique).\nObjectifs : Charger et manipuler les donn√©es exp√©rimentales. Analyser la progression de la population bact√©rienne dans le temps. Visualiser les r√©sultats pour identifier un mod√®le de croissance. Tirer des conclusions sur les caract√©ristiques de la croissance. Consignes sp√©cifiques : Lecture et traitement des donn√©es :\nCharger un fichier CSV contenant les mesures de concentration bact√©rienne (cfu/mL) en fonction du temps (heures). V√©rifier les types de donn√©es et nettoyer si n√©cessaire. Cr√©ation de fonctions :\nUne fonction calculer_taux_croissance(df) pour calculer le taux de croissance moyen entre chaque intervalle de temps. Une fonction modeliser_croissance(df) pour proposer un mod√®le de croissance √† partir des donn√©es observ√©es. Visualisation avec matplotlib :\nGraphique de la croissance (courbe de concentration vs. temps). Visualisation du taux de croissance par intervalle. Comparaison avec un mod√®le math√©matique si applicable (optionnel). Exportation :\nExport d‚Äôun fichier CSV contenant le temps, la concentration, les taux de croissance entre les mesures. Donn√©es : Le fichier problematique_1_croissance.csv contient deux colonnes :\nTemps (h) Concentration (cfu/mL) Crit√®res d‚Äô√©valuation : Analyse correcte des donn√©es : traitements justes, interpr√©tations logiques. Clart√© et structure du code. Pertinence des visualisations et interpr√©tations. Capacit√© √† proposer une mod√©lisation simple. Format du projet : Dur√©e : √Ä remettre √† la fin de la semaine 15.\nLivrables :\nUn notebook Jupyter (.ipynb) avec votre travail complet. Le fichier CSV export√© avec vos r√©sultats. Une section de conclusion expliquant la nature de la croissance observ√©e.",
    "description": "Consigne du projet final Contexte : Vous avez men√© une exp√©rience de croissance bact√©rienne dans un milieu nutritif contr√¥l√©. La concentration bact√©rienne a √©t√© mesur√©e √† diff√©rents moments. Vous devez analyser ces donn√©es pour comprendre la dynamique de croissance et d√©terminer le mod√®le le plus appropri√© (lin√©aire, exponentiel, logistique).\nObjectifs : Charger et manipuler les donn√©es exp√©rimentales. Analyser la progression de la population bact√©rienne dans le temps. Visualiser les r√©sultats pour identifier un mod√®le de croissance.",
    "tags": [],
    "title": "Projet: Analyse de la croissance bact√©rienne",
    "uri": "/afaire/projets/projet4/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences",
    "content": "02. Variables, types, entr√©es et fonctions\n03. Structures conditionnelles\n04. Boucles et d√©bogage simple\n06. Listes, chaines et visualisation des donn√©es\n07. Tableaux NumPy et droite de r√©gression\n08. Dictionnaires et fichiers texte\n09. R√©vision\n11. Fonctions personnalis√©es",
    "description": "02. Variables, types, entr√©es et fonctions\n03. Structures conditionnelles\n04. Boucles et d√©bogage simple\n06. Listes, chaines et visualisation des donn√©es\n07. Tableaux NumPy et droite de r√©gression\n08. Dictionnaires et fichiers texte\n09. R√©vision\n11. Fonctions personnalis√©es",
    "tags": [],
    "title": "Solutions des exercices",
    "uri": "/solutions_exercices/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences¬†\u003e¬†\rSolutions des exercices",
    "content": "Exercice 1 : Distance parcourue # Donn√©es vitesse = 6.5 # en m/s temps_minutes = 12 # Conversion du temps en secondes temps_secondes = temps_minutes * 60 # Calcul de la distance distance = vitesse * temps_secondes # Affichage print(f\"Le cycliste a parcouru {distance} m√®tres en {temps_minutes} minutes.\")\rR√©sultat :\nLe cycliste a parcouru 4680.0 m√®tres en 12 minutes.\rExercice 2 : Conversion de temp√©rature # Donn√©e temperature_celsius = 38 # Conversions temperature_fahrenheit = (temperature_celsius * 9 / 5) + 32 temperature_kelvin = temperature_celsius + 273.15 # Affichage print(f\"Temp√©rature en Celsius : {temperature_celsius}¬∞C\") print(f\"Temp√©rature en Fahrenheit : {temperature_fahrenheit}¬∞F\") print(f\"Temp√©rature en Kelvin : {temperature_kelvin}K\")\rR√©sultat :\nTemp√©rature en Celsius : 38¬∞C\rTemp√©rature en Fahrenheit : 100.4¬∞F\rTemp√©rature en Kelvin : 311.15K\rExercice 3 : Calcul de concentration molaire # Donn√©es masse = 10.0 # en g masse_molaire = 58.5 # en g/mol volume = 0.25 # en L # Calcul du nombre de moles n = masse / masse_molaire # Calcul de la concentration concentration = n / volume # Affichage print(f\"Concentration molaire : {concentration} mol/L\")\rR√©sultat :\nConcentration molaire : 0.682051282051282 mol/L\rExercice 4 : Vitesse moyenne d‚Äôune r√©action # Donn√©es concentration_initiale = 0.80 # mol/L concentration_finale = 0.20 # mol/L temps = 120 # en secondes # Calcul de la variation de concentration delta_concentration = concentration_finale - concentration_initiale # Calcul de la vitesse moyenne vitesse_moyenne = delta_concentration / temps # Affichage print(f\"Vitesse moyenne = {vitesse_moyenne:.6f} mol‚ÄØL‚Åª¬π‚ÄØs‚Åª¬π\")\rR√©sultat :\nVitesse moyenne = -0.005000 mol‚ÄØL‚Åª¬π‚ÄØs‚Åª¬π",
    "description": "Exercice 1 : Distance parcourue # Donn√©es vitesse = 6.5 # en m/s temps_minutes = 12 # Conversion du temps en secondes temps_secondes = temps_minutes * 60 # Calcul de la distance distance = vitesse * temps_secondes # Affichage print(f\"Le cycliste a parcouru {distance} m√®tres en {temps_minutes} minutes.\")\rR√©sultat :\nLe cycliste a parcouru 4680.0 m√®tres en 12 minutes.\rExercice 2 : Conversion de temp√©rature # Donn√©e temperature_celsius = 38 # Conversions temperature_fahrenheit = (temperature_celsius * 9 / 5) + 32 temperature_kelvin = temperature_celsius + 273.",
    "tags": [],
    "title": " Variables, types, entr√©es et fonctions",
    "uri": "/solutions_exercices/2_variables_types_entree_fn/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences¬†\u003e¬†\rSolutions des exercices",
    "content": "Exercice 1 : Demi-vie radioactive # Constantes masse_initiale = 100 # en grammes demi_vie = 5 # en ann√©es # Entr√©e utilisateur temps_ecoule = float(input(\"Combien d'ann√©es se sont √©coul√©es ? \")) # Calcul nb_periodes = temps_ecoule / demi_vie masse_restante = masse_initiale * (0.5) ** nb_periodes # Affichage conditionnel if masse_restante \u003c 1: print(f\"La masse restante est tr√®s faible : {masse_restante:.4f} g. L‚Äôisotope est presque enti√®rement d√©sint√©gr√©.\") else: print(f\"Masse restante apr√®s {temps_ecoule} ans : {masse_restante:.2f} g.\")\rExercice 2 : Croissance bact√©rienne # Constantes population_initiale = 500 periode = 3 # heures pour un doublement # Entr√©e utilisateur heures = float(input(\"Combien d‚Äôheures se sont √©coul√©es ? \")) # Calcul nb_periodes = heures / periode population_finale = population_initiale * 2 ** nb_periodes # Affichage conditionnel if population_finale \u003e 1_000_000: print(f\"Alerte ! La population bact√©rienne a explos√© : {population_finale:.0f} bact√©ries.\") else: print(f\"Population estim√©e apr√®s {heures} heures : {population_finale:.0f} bact√©ries.\")\rExercice 3 ‚Äì Temp√©rature critique d‚Äôun liquide temperature = float(input(\"Entrez la temp√©rature du liquide (en ¬∞C) : \")) if temperature \u003c 80: print(\"Temp√©rature s√©curitaire.\") elif temperature == 80: print(\"Limite atteinte.\") else: print(\"Attention : temp√©rature critique‚ÄØ!\")\rExercice 4 ‚Äì Classification du pH d‚Äôune solution ph = float(input(\"Entrez le pH de la solution (entre 0 et 14) : \")) if 0 \u003c= ph \u003c 7: print(\"Solution acide\") elif ph == 7: print(\"Solution neutre\") elif 7 \u003c ph \u003c= 14: print(\"Solution basique\") else: print(\"Valeur de pH invalide\")\rExercice 5 ‚Äì Autorisation d‚Äôune r√©action chimique temperature = float(input(\"Temp√©rature en ¬∞C : \")) ph = float(input(\"pH de la solution : \")) if 25 \u003c= temperature \u003c= 45 and 6 \u003c= ph \u003c= 8: print(\"R√©action possible.\") else: print(\"Conditions non compatibles.\")",
    "description": "Exercice 1 : Demi-vie radioactive # Constantes masse_initiale = 100 # en grammes demi_vie = 5 # en ann√©es # Entr√©e utilisateur temps_ecoule = float(input(\"Combien d'ann√©es se sont √©coul√©es ? \")) # Calcul nb_periodes = temps_ecoule / demi_vie masse_restante = masse_initiale * (0.5) ** nb_periodes # Affichage conditionnel if masse_restante \u003c 1: print(f\"La masse restante est tr√®s faible : {masse_restante:.4f} g. L‚Äôisotope est presque enti√®rement d√©sint√©gr√©.\") else: print(f\"Masse restante apr√®s {temps_ecoule} ans : {masse_restante:.",
    "tags": [],
    "title": " Structures conditionnelles",
    "uri": "/solutions_exercices/3_struct_cond/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences¬†\u003e¬†\rSolutions des exercices",
    "content": "Exercice 1 ‚Äì For ou While ? a. Afficher les nombres de 1 √† 10 Boucle : for (on conna√Æt le d√©but et la fin)\nfor i in range(1, 11): print(i)\rb. Compter jusqu‚Äô√† 100 par bonds de 10 Boucle : for\nfor i in range(0, 101, 10): print(i)\rc. Simuler la chute d‚Äôun objet de 100 m (baisse de 10 m/s) Boucle : while (on ne conna√Æt pas d‚Äôavance le nombre de r√©p√©titions, mais on conna√Æt la condition d‚Äôarr√™t)\nhauteur = 100 while hauteur \u003e 0: print(f\"Hauteur actuelle : {hauteur} m\") hauteur -= 10\rd. Lire une temp√©rature jusqu‚Äô√† ce qu‚Äôelle soit \u003c 0 Boucle : while\ntemperature = float(input(\"Entrez une temp√©rature : \")) while temperature \u003e= 0: temperature = float(input(\"Entrez une temp√©rature : \")) print(\"Temp√©rature n√©gative d√©tect√©e. Fin du programme.\")\re. Tant que l‚Äôutilisateur ne tape pas 0 Boucle : while, avec break si n√©cessaire\nwhile True: valeur = int(input(\"Entrez un chiffre entre 1 et 10 (0 pour quitter) : \")) if valeur == 0: print(\"Fin du programme.\") break\rExercice 2 ‚Äì Table de multiplication avec r√©p√©tition continuer = \"oui\" while continuer.lower() == \"oui\": n = int(input(\"Entrez un nombre entre 1 et 12 : \")) for i in range(1, 13): print(f\"{i} x {n} = {i * n}\") continuer = input(\"Voulez-vous une autre table ? (oui/non) : \")\rExercice 3 ‚Äì Temp√©rature qui augmente jusqu‚Äô√† 30‚ÄØ¬∞C temp = 20.0 while temp \u003c 30: print(f\"Temp√©rature actuelle : {temp:.1f} ¬∞C\") temp += 1.5\rExercice 4 ‚Äì Boucle for avec range for i in range(1, 11): print(f\"√âchantillon {i}\")\rExercice 5 ‚Äì Corriger les erreurs Version corrig√©e : nom = input(\"Quel est ton nom? \") print(\"Bonjour\", nom) age = int(input(\"Quel √¢ge as-tu? \")) print(\"Dans 10 ans, tu auras\", age + 10)",
    "description": "Exercice 1 ‚Äì For ou While ? a. Afficher les nombres de 1 √† 10 Boucle : for (on conna√Æt le d√©but et la fin)\nfor i in range(1, 11): print(i)\rb. Compter jusqu‚Äô√† 100 par bonds de 10 Boucle : for\nfor i in range(0, 101, 10): print(i)\rc. Simuler la chute d‚Äôun objet de 100 m (baisse de 10 m/s) Boucle : while (on ne conna√Æt pas d‚Äôavance le nombre de r√©p√©titions, mais on conna√Æt la condition d‚Äôarr√™t)",
    "tags": [],
    "title": " Boucles et d√©bogage simple",
    "uri": "/solutions_exercices/4_boucles_debogage/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences¬†\u003e¬†\rSolutions des exercices",
    "content": "Listes Exercice 1 animaux = [\"chat\", \"chien\", \"lapin\", \"perroquet\", \"tigre\"] for animal in animaux: print(f\"Voici un/une {animal}\")\rExercice 2 grille = [ [1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16], [17, 18, 19, 20] ] for ligne in grille: for chiffre in ligne: print(chiffre)\rExercice 3 noms = [] for i in range(3): nom = input(f\"Entrez le nom {i+1} : \") noms.append(nom) print(\"Ordre alphab√©tique croissant :\") for nom in sorted(noms): print(nom) print(\"Ordre alphab√©tique d√©croissant :\") for nom in sorted(noms, reverse=True): print(nom)\rExercice 4 suspects = [ [\"A\", \"T\", \"C\", \"G\"], [\"G\", \"A\", \"T\", \"G\"], [\"A\", \"T\", \"T\", \"G\"] ] print(suspects[0][1]) # 2e base de la 1re s√©quence ‚Üí T print(suspects[2][-1]) # derni√®re base de la 3e s√©quence ‚Üí G\rCha√Ænes de caract√®res Exercice 5 mots = [\"chlorophylle\", \"atome\", \"prot√©ine\"] nb_lettres = [] for mot in mots: nb_lettres.append(len(mot)) print(nb_lettres) # [12, 5, 8]\rExercice 6 adn = \"ATGCT\" arn = adn.lower().replace(\"t\", \"u\") print(arn) # augcu\rGraphiques avec matplotlib Exercice 7 import matplotlib.pyplot as plt heures = [0, 4, 8, 12, 16, 20, 24] temperatures = [-5, -2, 3, 7, 6, 1, -2] plt.plot(heures, temperatures) plt.title(\"Temp√©rature en fonction de l‚Äôheure\") plt.xlabel(\"Heure (h)\") plt.ylabel(\"Temp√©rature (¬∞C)\") plt.grid() plt.show()\rExercice 8 import matplotlib.pyplot as plt temp = [10, 20, 30, 40, 50] attendu = [2.1, 3.8, 5.6, 7.3, 9.0] mesure = [2.0, 3.9, 5.2, 7.5, 8.8] plt.plot(temp, attendu, \"ok-\", label=\"Valeurs attendues\") # o = rond, k = noir, - = ligne plt.bar(temp, mesure, color=\"blue\", alpha=0.5, label=\"Valeurs mesur√©es\") plt.title(\"Comparaison des concentrations\") plt.xlabel(\"Temp√©rature (¬∞C)\") plt.ylabel(\"Concentration\") plt.grid() plt.legend() plt.show()",
    "description": "Listes Exercice 1 animaux = [\"chat\", \"chien\", \"lapin\", \"perroquet\", \"tigre\"] for animal in animaux: print(f\"Voici un/une {animal}\")\rExercice 2 grille = [ [1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16], [17, 18, 19, 20] ] for ligne in grille: for chiffre in ligne: print(chiffre)\rExercice 3 noms = [] for i in range(3): nom = input(f\"Entrez le nom {i+1} : \") noms.append(nom) print(\"Ordre alphab√©tique croissant :\") for nom in sorted(noms): print(nom) print(\"Ordre alphab√©tique d√©croissant :\") for nom in sorted(noms, reverse=True): print(nom)\rExercice 4 suspects = [ [\"A\", \"T\", \"C\", \"G\"], [\"G\", \"A\", \"T\", \"G\"], [\"A\", \"T\", \"T\", \"G\"] ] print(suspects[0][1]) # 2e base de la 1re s√©quence ‚Üí T print(suspects[2][-1]) # derni√®re base de la 3e s√©quence ‚Üí G\rCha√Ænes de caract√®res Exercice 5 mots = [\"chlorophylle\", \"atome\", \"prot√©ine\"] nb_lettres = [] for mot in mots: nb_lettres.",
    "tags": [],
    "title": " Listes, chaines et visualisation des donn√©es",
    "uri": "/solutions_exercices/6_listes_chaines_visualisation/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences¬†\u003e¬†\rSolutions des exercices",
    "content": "Exercice 1 ‚Äì Solubilit√© d‚Äôun sel import numpy as np sol = np.array([32.0, 35.5, np.nan, 37.2, 39.0]) # 1. Affiche les valeurs de solubilit√© print(\"Solubilit√©s :\", sol) # 2. Moyenne sans NaN moyenne = np.nanmean(sol) print(\"Moyenne sans NaN :\", moyenne) # 3. √âcart type ecart_type = np.nanstd(sol) print(\"√âcart type :\", ecart_type)\rExercice 2 ‚Äì Temp√©ratures journali√®res temperatures = np.array([ [12.1, 17.3, 14.2], [11.8, 16.9, 13.9], [13.0, 18.1, 15.0], [12.5, 17.5, 14.7], [np.nan, 16.0, 14.0], [13.2, 18.0, 15.2], [12.0, 17.0, 14.5] ]) # 1. Forme du tableau print(\"Forme :\", temperatures.shape) # 2. Moyenne journali√®re par ligne (axis=1) moyennes_journali√®res = np.nanmean(temperatures, axis=1) print(\"Moyennes journali√®res :\", moyennes_journali√®res) # 3. Moyenne des temp√©ratures du matin (colonne 0), sans NaN moyenne_matin = np.nanmean(temperatures[:, 0]) print(\"Moyenne du matin :\", moyenne_matin)\rExercice 3 ‚Äì Analyse d‚ÄôADN ech1 = np.array([3.2, 2.8, 4.1, 3.9, 2.5]) ech2 = np.array([2.9, 3.0, 4.2, 4.0, 2.7]) # 1. Profil combin√© profil_combine = ech1 + ech2 print(\"Profil combin√© :\", profil_combine) # 2. Diff√©rence difference = ech1 - ech2 print(\"Diff√©rence :\", difference) # 3. Moyennes et √©carts types print(\"Moyenne √©ch1 :\", np.mean(ech1)) print(\"√âcart type √©ch1 :\", np.std(ech1)) print(\"Moyenne √©ch2 :\", np.mean(ech2)) print(\"√âcart type √©ch2 :\", np.std(ech2))\rExercice 4 ‚Äì Pressions dans un cylindre Voici la solution compl√®te de l‚Äôexercice 4 ‚Äì Pressions dans un cylindre, incluant le calcul, l‚Äôaffichage, et la visualisation graphique avec une droite de r√©gression lin√©aire :\n‚úÖ Exercice 4 ‚Äì Pressions dans un cylindre (avec graphique) import numpy as np import matplotlib.pyplot as plt from scipy.stats import linregress # Donn√©es de l'exercice hauteur = np.linspace(0, 50, 6) # [0, 10, 20, 30, 40, 50] pression = np.array([101.3, 100.0, 98.7, 97.5, 96.2, 95.0]) # 1. Affichage des hauteurs et des pressions print(\"Hauteurs (cm) :\", hauteur) print(\"Pressions (kPa) :\", pression) # 2. Variation de pression par tranche de 10 cm variation = np.diff(pression) print(\"Variation de pression (chaque 10 cm) :\", variation) # 3. Moyenne de la pression moyenne = np.mean(pression) print(\"Pression moyenne :\", moyenne) # 4. R√©gression lin√©aire (pression en fonction de la hauteur) slope, intercept, r_value, p_value, std_err = linregress(hauteur, pression) pression_modele = slope * hauteur + intercept print(f\"Pente de la r√©gression : {slope:.3f} kPa/cm\") print(f\"Ordonn√©e √† l'origine : {intercept:.3f} kPa\") print(f\"Coefficient de corr√©lation r : {r_value:.3f}\") # 5. Graphique avec donn√©es et droite de r√©gression plt.figure(figsize=(8, 5)) plt.plot(hauteur, pression, 'o', label=\"Donn√©es mesur√©es\", color='blue') plt.plot(hauteur, pression_modele, '-', label=f\"R√©gression lin√©aire\\n(pente = {slope:.2f})\", color='red') plt.xlabel(\"Hauteur (cm)\") plt.ylabel(\"Pression (kPa)\") plt.title(\"Pression en fonction de la hauteur\") plt.grid(True) plt.legend() plt.savefig(\"graphique_pression_regression.png\") plt.show()\rR√©sultat visuel : Le graphique g√©n√©r√© affiche :\nles points mesur√©s (ronds bleus), la droite de r√©gression (ligne rouge), une l√©gende et des axes clairs. Exercice 5 ‚Äì Croissance d‚Äôune plante # 1. Croissance sans engrais jours = np.arange(10) taille = 5 + jours * 2 print(\"Taille sans engrais :\", taille) # 2. Avec engrais (+1 cm) taille_engrais = taille + 1 print(\"Taille avec engrais :\", taille_engrais) # 3. Moyennes print(\"Moyenne sans engrais :\", np.mean(taille)) print(\"Moyenne avec engrais :\", np.mean(taille_engrais))",
    "description": "Exercice 1 ‚Äì Solubilit√© d‚Äôun sel import numpy as np sol = np.array([32.0, 35.5, np.nan, 37.2, 39.0]) # 1. Affiche les valeurs de solubilit√© print(\"Solubilit√©s :\", sol) # 2. Moyenne sans NaN moyenne = np.nanmean(sol) print(\"Moyenne sans NaN :\", moyenne) # 3. √âcart type ecart_type = np.nanstd(sol) print(\"√âcart type :\", ecart_type)\rExercice 2 ‚Äì Temp√©ratures journali√®res temperatures = np.array([ [12.1, 17.3, 14.2], [11.8, 16.9, 13.9], [13.0, 18.1, 15.0], [12.5, 17.5, 14.",
    "tags": [],
    "title": " Tableaux NumPy et droite de r√©gression",
    "uri": "/solutions_exercices/7_numpy_regression/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences¬†\u003e¬†\rSolutions des exercices",
    "content": "Exercice 1 ‚Äì Solubilit√© d‚Äôun sel Donn√©es :\nimport numpy as np sol = np.array([32.0, 35.5, np.nan, 37.2, 39.0])\r1. Affiche les valeurs print(f\"Solubilit√©s : {sol}\")\r2. Moyenne sans la valeur manquante moyenne = np.nanmean(sol) print(f\"Moyenne (sans valeur manquante) : {moyenne:.2f} g/100mL\")\r3. √âcart type ecart = np.nanstd(sol) print(f\"√âcart type : {ecart:.2f}\")\rExercice 2 ‚Äì Temp√©ratures journali√®res Donn√©es :\ntemperatures = np.array([ [12.1, 17.3, 14.2], [11.8, 16.9, 13.9], [13.0, 18.1, 15.0], [12.5, 17.5, 14.7], [np.nan, 16.0, 14.0], [13.2, 18.0, 15.2], [12.0, 17.0, 14.5] ])\r1. Forme du tableau print(temperatures.shape) # (7, 3)\r2. Moyenne journali√®re moyennes_journalieres = np.nanmean(temperatures, axis=1) print(f\"Moyennes par jour : {moyennes_journalieres}\")\r3. Moyenne du matin (colonne 0) moy_matin = np.nanmean(temperatures[:, 0]) print(f\"Moyenne du matin : {moy_matin:.2f} ¬∞C\")\rExercice 3 ‚Äì Analyse d‚ÄôADN Donn√©es :\nech1 = np.array([3.2, 2.8, 4.1, 3.9, 2.5]) ech2 = np.array([2.9, 3.0, 4.2, 4.0, 2.7])\r1. Profil combin√© profil = ech1 + ech2 print(f\"Profil combin√© : {profil}\")\r2. Diff√©rence diff = ech2 - ech1 print(f\"Diff√©rences (√©ch2 - √©ch1) : {diff}\")\r3. Moyenne et √©cart type print(f\"Moyenne √©ch1 : {np.mean(ech1):.2f}\") print(f\"√âcart type √©ch1 : {np.std(ech1):.2f}\") print(f\"Moyenne √©ch2 : {np.mean(ech2):.2f}\") print(f\"√âcart type √©ch2 : {np.std(ech2):.2f}\")\rExercice 4 ‚Äì Pression dans un cylindre Donn√©es :\nhauteur = np.linspace(0, 50, 6) # [0, 10, 20, 30, 40, 50] pression = np.array([101.3, 100.0, 98.7, 97.5, 96.2, 95.0])\r1. Affichage print(\"Hauteurs :\", hauteur) print(\"Pressions :\", pression)\r2. Variation de pression variations = pression[:-1] - pression[1:] print(f\"Chutes de pression entre tranches de 10 cm : {variations}\")\r3. Moyenne print(f\"Moyenne des pressions : {np.mean(pression):.2f} kPa\")\rExercice 5 ‚Äì Croissance d‚Äôune plante 1. Taille pendant 10 jours, d√©part √† 5 cm jours = np.arange(10) taille = 5 + jours * 2 print(f\"Taille sans engrais : {taille}\")\r2. Ajout de 1 cm par jour (engrais) taille_engrais = taille + 1 print(f\"Taille avec engrais : {taille_engrais}\")\r3. Moyennes print(f\"Moyenne sans engrais : {np.mean(taille):.2f} cm\") print(f\"Moyenne avec engrais : {np.mean(taille_engrais):.2f} cm\")",
    "description": "Exercice 1 ‚Äì Solubilit√© d‚Äôun sel Donn√©es :\nimport numpy as np sol = np.array([32.0, 35.5, np.nan, 37.2, 39.0])\r1. Affiche les valeurs print(f\"Solubilit√©s : {sol}\")\r2. Moyenne sans la valeur manquante moyenne = np.nanmean(sol) print(f\"Moyenne (sans valeur manquante) : {moyenne:.2f} g/100mL\")\r3. √âcart type ecart = np.nanstd(sol) print(f\"√âcart type : {ecart:.2f}\")\rExercice 2 ‚Äì Temp√©ratures journali√®res Donn√©es :\ntemperatures = np.array([ [12.1, 17.3, 14.2], [11.8, 16.9, 13.9], [13.0, 18.1, 15.",
    "tags": [],
    "title": " R√©vision",
    "uri": "/solutions_exercices/9_revision/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences¬†\u003e¬†\rSolutions des exercices",
    "content": "Exercice 1 ‚Äì Densit√©s # Cr√©ation du dictionnaire densites = { \"eau\": 1.0, \"√©thanol\": 0.789, \"mercure\": 13.6 } # 1. Affiche la densit√© du mercure print(f\"Densit√© du mercure : {densites['mercure']} g/mL\") # 2. Ajout de la densit√© de l'huile densites[\"huile\"] = 0.91 # 3. Affiche toutes les substances et leur densit√© for substance, densite in densites.items(): print(f\"{substance} : {densite} g/mL\")\rExercice 2 ‚Äì Chargement et exploration import pandas as pd # 1. Charger le fichier df = pd.read_csv(\"solubilite.csv\") # 2. Afficher les premi√®res lignes print(df.head()) # 3. Afficher les noms de colonnes print(df.columns) # 4. Afficher toutes les temp√©ratures pour le compos√© \"NaCl\" nacl_temp = df[df[\"Compos√©\"] == \"NaCl\"][\"Temp√©rature (¬∞C)\"] print(\"Temp√©ratures pour NaCl :\") print(nacl_temp)\rExercice 3 ‚Äì Moyenne de solubilit√© # 1. Moyenne pour KNO3 moy_kno3 = df[df[\"Compos√©\"] == \"KNO3\"][\"Solubilit√© (g/100 mL)\"].mean() # 2. Moyenne pour NaCl moy_nacl = df[df[\"Compos√©\"] == \"NaCl\"][\"Solubilit√© (g/100 mL)\"].mean() # 3. Comparaison avec f-strings print(f\"Moyenne de solubilit√© - KNO3 : {moy_kno3:.2f} g/100 mL\") print(f\"Moyenne de solubilit√© - NaCl : {moy_nacl:.2f} g/100 mL\")\rExercice 4 ‚Äì Boucle sur les compos√©s # 1. Moyenne pour chaque compos√© compos√©s = df[\"Compos√©\"].unique() for c in compos√©s: moy = df[df[\"Compos√©\"] == c][\"Solubilit√© (g/100 mL)\"].mean() # 2. V√©rifier si \u003e 80 if moy \u003e 80: etat = \"sup√©rieure √† 80\" else: etat = \"inf√©rieure ou √©gale √† 80\" print(f\"{c} : {moy:.2f} g/100 mL ({etat})\")\rExercice 5 ‚Äì Ajout d‚Äôune colonne # 1. Cr√©ation de la colonne \"Tendance\" df[\"Tendance\"] = df[\"Solubilit√© (g/100 mL)\"].apply(lambda s: \"Haute\" if s \u003e 80 else \"Faible\") # 2. Affichage des 10 premi√®res lignes print(df.head(10))",
    "description": "Exercice 1 ‚Äì Densit√©s # Cr√©ation du dictionnaire densites = { \"eau\": 1.0, \"√©thanol\": 0.789, \"mercure\": 13.6 } # 1. Affiche la densit√© du mercure print(f\"Densit√© du mercure : {densites['mercure']} g/mL\") # 2. Ajout de la densit√© de l'huile densites[\"huile\"] = 0.91 # 3. Affiche toutes les substances et leur densit√© for substance, densite in densites.items(): print(f\"{substance} : {densite} g/mL\")\rExercice 2 ‚Äì Chargement et exploration import pandas as pd # 1.",
    "tags": [],
    "title": " Dictionnaires et fichiers texte",
    "uri": "/solutions_exercices/8_dict_fichiers/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences¬†\u003e¬†\rSolutions des exercices",
    "content": "",
    "description": "",
    "tags": [],
    "title": " Fonctions personnalis√©es",
    "uri": "/solutions_exercices/11_fonctions_perso/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences",
    "content": "02. Variables, types, entr√©es et fonctions\n03. Structures conditionnelles\n04. Boucles et d√©bogage simple\n06. Listes, chaines et visualisation des donn√©es\n07. Tableaux NumPy et droite de r√©gression\n08. Dictionnaires et fichiers texte\n09. R√©vision\n11. Fonctions personnalis√©es",
    "description": "02. Variables, types, entr√©es et fonctions\n03. Structures conditionnelles\n04. Boucles et d√©bogage simple\n06. Listes, chaines et visualisation des donn√©es\n07. Tableaux NumPy et droite de r√©gression\n08. Dictionnaires et fichiers texte\n09. R√©vision\n11. Fonctions personnalis√©es",
    "tags": [],
    "title": "Solutions des ateliers",
    "uri": "/solutions_ateliers/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences¬†\u003e¬†\rSolutions des ateliers",
    "content": "Exercice #1 - Quantit√© restante apr√®s √©vaporation # Constantes q_initiale = 400 # en mL t_minutes = 10 + 15/60 # conversion des 15 s en minutes =\u003e 10.25 minutes taux_evaporation = 25 # en mL/min # Formule : q(t) = 400 - 25 * t quantite_restante = q_initiale - taux_evaporation * t_minutes print(f\"Quantit√© restante apr√®s {t_minutes} minutes : {quantite_restante:.2f} mL.\")\rR√©sultat attendu :\nQuantit√© restante apr√®s 10.25 minutes : 143.75 mL.\rExercice #2 - Force gravitationnelle def calcul_force(): objet = input(\"Nom de l'objet : \") masse = float(input(\"Masse de l'objet (en kg) : \")) g = 9.8 # acc√©l√©ration gravitationnelle en m/s¬≤ force = masse * g print(f\"La force de la {objet} de {masse:.1f} Kg est de {force:.2f} N.\") # Tests # Test 1 # \u003e\u003e\u003e balle, 2.5 # Test 2 # \u003e\u003e\u003e voiture, 1000.0\rR√©sultats attendus :\nLa force de la balle de 2.5 Kg est de 24.50 N.\rLa force de la voiture de 1000.0 Kg est de 9800.00 N.\rExercice #3 - Int√©r√™ts simple et compos√© # Montant initial montant = 100 # Int√©r√™t simple : 3.2 % par an pendant 10 ans taux_simple = 0.032 duree = 10 valeur_simple = montant * (1 + taux_simple * duree) # Int√©r√™t compos√© : 1.6 % deux fois par an pendant 10 ans taux_compos√© = 0.016 # tous les 6 mois periodes = 2 * duree # 2 fois par an pendant 10 ans valeur_compos√©e = montant * (1 + taux_compos√©) ** periodes # √âcart en pourcentage √©cart = ((valeur_compos√©e - valeur_simple) / valeur_simple) * 100 # Affichage des r√©sultats print(f\"Valeur avec int√©r√™t simple : {valeur_simple:.2f} $\") print(f\"Valeur avec int√©r√™t compos√© : {valeur_compos√©e:.2f} $\") print(f\"√âcart relatif : {√©cart:.2f} %\")\rR√©sultats attendus :\nValeur avec int√©r√™t simple : 132.00 $\rValeur avec int√©r√™t compos√© : 134.87 $\r√âcart relatif : 2.17 %\rExercice #4 - Hauteur maximale # Demander la vitesse initiale √† l'utilisateur vitesse_initiale = float(input(\"Entrez la vitesse initiale (en m/s) : \")) g = 9.81 # acc√©l√©ration gravitationnelle en m/s¬≤ # Calcul de la hauteur maximale h_max = (vitesse_initiale ** 2) / (2 * g) # Affichage print(f\"La hauteur maximale atteinte est de {h_max:.2f} m√®tres.\")\rTest suggestion :\nv = 20 m/s ‚Üí h ‚âà 20.39 m\rExercice #5 - Probabilit√© g√©om√©trique (Facultatif) Hypoth√®ses :\nLe rectangle fait 10 cm de haut. Cela repr√©sente 2 diam√®tres, donc diam√®tre = 5 cm ‚Üí rayon = 2.5 cm. Chaque cercle a une aire : œÄr¬≤ = œÄ √ó 2.5¬≤ ‚âà 19.63 cm¬≤ Il y a 6 cercles, donc aire totale des cercles ‚âà 6 √ó 19.63 import math # Dimensions hauteur = 10 diametre = hauteur / 2 # car 2 diam√®tres = 10 cm rayon = diametre / 2 # donc rayon = 2.5 cm largeur = 3 * diametre # 3 cercles c√¥te √† c√¥te ‚Üí largeur = 15 cm # Aire du rectangle aire_rectangle = largeur * hauteur # Aire totale des 6 cercles aire_cercle = math.pi * rayon ** 2 aire_cercles = 6 * aire_cercle # Aire grise = tout sauf les cercles aire_grise = aire_rectangle - aire_cercles # Probabilit√© = aire grise / aire totale probabilite = aire_grise / aire_rectangle print(f\"Probabilit√© qu‚Äôun point tombe dans la r√©gion grise : {probabilite:.4f} (soit {probabilite*100:.2f} %)\")\rR√©sultat attendu :\nProbabilit√© qu‚Äôun point tombe dans la r√©gion grise : 0.2119 (soit 21.19 %)",
    "description": "Exercice #1 - Quantit√© restante apr√®s √©vaporation # Constantes q_initiale = 400 # en mL t_minutes = 10 + 15/60 # conversion des 15 s en minutes =\u003e 10.25 minutes taux_evaporation = 25 # en mL/min # Formule : q(t) = 400 - 25 * t quantite_restante = q_initiale - taux_evaporation * t_minutes print(f\"Quantit√© restante apr√®s {t_minutes} minutes : {quantite_restante:.2f} mL.\")\rR√©sultat attendu :\nQuantit√© restante apr√®s 10.25 minutes : 143.",
    "tags": [],
    "title": " Variables, types, entr√©es et fonction",
    "uri": "/solutions_ateliers/2_variables_types_entrees_fn/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences¬†\u003e¬†\rSolutions des ateliers",
    "content": "# Demander les donn√©es √† l'utilisateur temperature = float(input(\"Temp√©rature de l'eau en ¬∞C : \")) pression = float(input(\"Pression en atm (0.5, 1.0, 1.5 ou 2.0) : \")) # D√©terminer le point d‚Äô√©bullition selon la pression if pression == 0.5: ebullition = 81 elif pression == 1.0: ebullition = 100 elif pression == 1.5: ebullition = 112 elif pression == 2.0: ebullition = 120 else: print(\"Pression invalide. Veuillez entrer 0.5, 1.0, 1.5 ou 2.0.\") exit() # D√©terminer l‚Äô√©tat de l‚Äôeau if temperature \u003c 0: etat = \"solide\" description = \"L‚Äôeau est sous forme de glace.\" elif temperature \u003c ebullition: etat = \"liquide\" description = \"L‚Äôeau est liquide √† cette temp√©rature et pression.\" else: etat = \"gaz\" description = \"L‚Äôeau est sous forme de vapeur.\" # Affichage print(f\"√âtat de l‚Äôeau : {etat}\") print(description)\rExemples de sorties Exemple 1 : Temp√©rature de l'eau en ¬∞C : 50\rPression en atm (0.5, 1.0, 1.5 ou 2.0) : 1.0\r√âtat de l‚Äôeau : liquide\rL‚Äôeau est liquide √† cette temp√©rature et pression.\rExemple 2 : Temp√©rature de l'eau en ¬∞C : 101\rPression en atm (0.5, 1.0, 1.5 ou 2.0) : 1.0\r√âtat de l‚Äôeau : gaz\rL‚Äôeau est sous forme de vapeur.\rExemple 3 : Temp√©rature de l'eau en ¬∞C : -5\rPression en atm (0.5, 1.0, 1.5 ou 2.0) : 2.0\r√âtat de l‚Äôeau : solide\rL‚Äôeau est sous forme de glace.",
    "description": "# Demander les donn√©es √† l'utilisateur temperature = float(input(\"Temp√©rature de l'eau en ¬∞C : \")) pression = float(input(\"Pression en atm (0.5, 1.0, 1.5 ou 2.0) : \")) # D√©terminer le point d‚Äô√©bullition selon la pression if pression == 0.5: ebullition = 81 elif pression == 1.0: ebullition = 100 elif pression == 1.5: ebullition = 112 elif pression == 2.0: ebullition = 120 else: print(\"Pression invalide. Veuillez entrer 0.5, 1.0, 1.",
    "tags": [],
    "title": " Structures conditionnelles",
    "uri": "/solutions_ateliers/3_struct_cond/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences¬†\u003e¬†\rSolutions des ateliers",
    "content": "Exercice 1 : R√©action chimique # R√©action : 1 mL de A + 2 mL de B a_dispo = int(input(\"Quantit√© de A disponible (en mL) : \")) b_dispo = int(input(\"Quantit√© de B disponible (en mL) : \")) nb_reactions = 0 while a_dispo \u003e= 1 and b_dispo \u003e= 2: a_dispo -= 1 b_dispo -= 2 nb_reactions += 1 print(\"La r√©action a eu lieu\", nb_reactions, \"fois.\") print(\"Il reste\", a_dispo, \"mL de A et\", b_dispo, \"mL de B.\")\rExercice 2 : D√©tection de mutation nb_total = int(input(\"Combien d‚Äô√©chantillons vas-tu analyser? \")) nb_mutations = 0 for i in range(1, nb_total + 1): reponse = int(input(f\"√âchantillon {i} : sain (0) ou mut√© (1)? \")) if reponse == 1: nb_mutations += 1 pourcentage = (nb_mutations / nb_total) * 100 print(f\"{nb_mutations}/{nb_total} √©chantillons sont mut√©s.\") print(f\"Pourcentage de mutation : {pourcentage:.1f} %\")",
    "description": "Exercice 1 : R√©action chimique # R√©action : 1 mL de A + 2 mL de B a_dispo = int(input(\"Quantit√© de A disponible (en mL) : \")) b_dispo = int(input(\"Quantit√© de B disponible (en mL) : \")) nb_reactions = 0 while a_dispo \u003e= 1 and b_dispo \u003e= 2: a_dispo -= 1 b_dispo -= 2 nb_reactions += 1 print(\"La r√©action a eu lieu\", nb_reactions, \"fois.\") print(\"Il reste\", a_dispo, \"mL de A et\", b_dispo, \"mL de B.",
    "tags": [],
    "title": " Boucles de d√©bogage simple",
    "uri": "/solutions_ateliers/4_boucles_debogage/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences¬†\u003e¬†\rSolutions des ateliers",
    "content": "import matplotlib.pyplot as plt # Donn√©es brutes sous forme de cha√Ænes donnees = [ \"12.3, 16.8, 14.0\", # jour 1 : matin, midi, soir \"11.5, 18.2, 15.4\", \"10.8, 17.6, 14.9\", \"13.0, 19.1, 16.3\", \"14.1, 20.2, 18.5\", \"12.9, 18.7, 16.2\", \"11.7, 17.8, 15.0\" ] # 1. Extraction et nettoyage temperatures = [] # liste imbriqu√©e for ligne in donnees: trio = ligne.split(\",\") trio_float = [float(valeur.strip()) for valeur in trio] temperatures.append(trio_float) print(\"Liste des temp√©ratures (liste imbriqu√©e) :\") print(temperatures) # 2. Calculs sur les donn√©es # Moyenne par jour moyennes_journali√®res = [] for jour in temperatures: moyenne = sum(jour) / len(jour) moyennes_journali√®res.append(moyenne) print(\"Temp√©ratures moyennes par jour :\") print(moyennes_journali√®res) # Temp√©rature maximale et jour toutes_valeurs = [temp for jour in temperatures for temp in jour] temp_max = max(toutes_valeurs) index_max = toutes_valeurs.index(temp_max) jour_max = index_max // 3 + 1 print(f\"Temp√©rature maximale : {temp_max}¬∞C (Jour {jour_max})\") # Moyenne globale moyenne_generale = sum(toutes_valeurs) / len(toutes_valeurs) print(f\"Temp√©rature moyenne de la semaine : {moyenne_generale:.2f}¬∞C\") # 3. Visualisation avec matplotlib jours = list(range(1, 8)) plt.plot(jours, moyennes_journali√®res, marker='o', color='blue', label=\"Moyenne quotidienne\") plt.title(\"Temp√©ratures moyennes par jour\") plt.xlabel(\"Jour\") plt.ylabel(\"Temp√©rature (¬∞C)\") plt.grid() plt.legend() plt.savefig(\"graphique_temperature.png\") plt.show() # 4. Exploration des cha√Ænes de caract√®res (temp√©ratures de midi) nb_midi_sup_18 = 0 for ligne in donnees: valeurs = ligne.split(\",\") midi = float(valeurs[1].strip()) if midi \u003e 18: nb_midi_sup_18 += 1 print(f\"Nombre de jours o√π la temp√©rature de midi a d√©pass√© 18¬∞C : {nb_midi_sup_18}\")\rR√©sultat attendu (valeurs approximatives √† cause des arrondis) : Liste des temp√©ratures (liste imbriqu√©e) :\r[[12.3, 16.8, 14.0], [11.5, 18.2, 15.4], ..., [11.7, 17.8, 15.0]]\rTemp√©ratures moyennes par jour :\r[14.37, 15.03, 14.43, 16.13, 17.6, 15.93, 14.83]\rTemp√©rature maximale : 20.2¬∞C (Jour 5)\rTemp√©rature moyenne de la semaine : 15.47¬∞C\rNombre de jours o√π la temp√©rature de midi a d√©pass√© 18¬∞C : 2",
    "description": "import matplotlib.pyplot as plt # Donn√©es brutes sous forme de cha√Ænes donnees = [ \"12.3, 16.8, 14.0\", # jour 1 : matin, midi, soir \"11.5, 18.2, 15.4\", \"10.8, 17.6, 14.9\", \"13.0, 19.1, 16.3\", \"14.1, 20.2, 18.5\", \"12.9, 18.7, 16.2\", \"11.7, 17.8, 15.0\" ] # 1. Extraction et nettoyage temperatures = [] # liste imbriqu√©e for ligne in donnees: trio = ligne.split(\",\") trio_float = [float(valeur.strip()) for valeur in trio] temperatures.append(trio_float) print(\"Liste des temp√©ratures (liste imbriqu√©e) :\") print(temperatures) # 2.",
    "tags": [],
    "title": " Listes, chaines et visualisation des donn√©es",
    "uri": "/solutions_ateliers/6_listes_chaines_visualisation/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences¬†\u003e¬†\rSolutions des ateliers",
    "content": "R√©sum√© des r√©sultats : Moyenne (Naturelle) = 12.86 cm, √©cart-type = 0.21 cm Moyenne (LED blanche) = 11.40 cm, √©cart-type = 0.16 cm Moyenne (LED rouge) = 10.23 cm, √©cart-type = 0.12 cm Condition avec la plus grande croissance moyenne : Naturelle\rimport numpy as np import matplotlib.pyplot as plt # Donn√©es avec valeurs manquantes hauteurs = np.array([ [12.5, 13.1, 12.9, 13.0, 12.8], [11.2, 11.6, np.nan, 11.5, 11.3], [10.4, 10.1, 10.2, np.nan, np.nan] ]) conditions = [\"Naturelle\", \"LED blanche\", \"LED rouge\"] # Moyenne et √©cart-type en ignorant les NaN moyennes = np.nanmean(hauteurs, axis=1) ecarts_type = np.nanstd(hauteurs, axis=1) # Affichage du r√©sum√© for i in range(3): print(f\"Moyenne ({conditions[i]}) = {moyennes[i]:.2f} cm, √©cart-type = {ecarts_type[i]:.2f} cm\") indice_max = np.argmax(moyennes) print(f\"Condition avec la plus grande croissance moyenne : {conditions[indice_max]}\") # Graphique x = np.arange(len(conditions)) plt.figure(figsize=(8, 5)) plt.bar(x, moyennes, yerr=ecarts_type, capsize=8, color=[\"green\", \"gray\", \"red\"]) plt.xticks(x, conditions) plt.ylabel(\"Hauteur moyenne (cm)\") plt.title(\"Effet de la lumi√®re sur la croissance des plantes\") plt.grid(axis=\"y\") plt.tight_layout() plt.savefig(\"graphique_croissance_lumiere.png\") plt.show()\rR√©sultat visuel",
    "description": "R√©sum√© des r√©sultats : Moyenne (Naturelle) = 12.86 cm, √©cart-type = 0.21 cm Moyenne (LED blanche) = 11.40 cm, √©cart-type = 0.16 cm Moyenne (LED rouge) = 10.23 cm, √©cart-type = 0.12 cm Condition avec la plus grande croissance moyenne : Naturelle\rimport numpy as np import matplotlib.pyplot as plt # Donn√©es avec valeurs manquantes hauteurs = np.array([ [12.5, 13.1, 12.9, 13.0, 12.8], [11.2, 11.6, np.nan, 11.5, 11.3], [10.4, 10.1, 10.",
    "tags": [],
    "title": " Tableaux NumPy et droite de r√©gression",
    "uri": "/solutions_ateliers/7_numpy_regression/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences¬†\u003e¬†\rSolutions des ateliers",
    "content": "# 1. Lecture du fichier CSV import csv donnees = {} with open(\"cristallisation.csv\", newline='', encoding='utf-8') as fichier: lecteur = csv.DictReader(fichier) for ligne in lecteur: substance = ligne[\"substance\"] condition = ligne[\"condition\"] temp = float(ligne[\"temp_cristallisation\"]) if substance not in donnees: donnees[substance] = {} donnees[substance][condition] = temp # 2. Affichage des donn√©es for substance in donnees: for condition in donnees[substance]: temp = donnees[substance][condition] print(f\"{substance} cristallise √† {temp}¬∞C {condition.replace('_', ' ')}.\") # 3. Ajout d'une nouvelle condition pour H2O donnees[\"H2O\"][\"en_solution\"] = -5 # 4. V√©rification de la pr√©sence de \"Cu\" if \"Cu\" in donnees: print(\"Cu est pr√©sent dans les donn√©es.\") else: print(\"Cu n'est pas pr√©sent dans les donn√©es.\") # 5. Filtrage : substances ayant une temp√©rature \u003c 100¬∞C dans au moins une condition print(\"Substances ayant au moins une temp√©rature de cristallisation \u003c 100¬∞C :\") for substance in donnees: for condition in donnees[substance]: if donnees[substance][condition] \u003c 100: print(f\"- {substance} ({condition.replace('_', ' ')} : {donnees[substance][condition]}¬∞C)\") break # on passe √† la substance suivante # 6. Comparaison : √©cart maximal de temp√©rature pour chaque substance print(\"√âcart maximal entre les conditions pour chaque substance :\") for substance in donnees: temperatures = list(donnees[substance].values()) ecart = max(temperatures) - min(temperatures) print(f\"Pour {substance}, l‚Äô√©cart maximal est de {ecart:.1f}¬∞C entre deux conditions.\") # 7. (Facultatif) Comparaison moyenne entre substances def comparaison_substances(donnees): moyennes = {} for substance in donnees: valeurs = list(donnees[substance].values()) moyennes[substance] = sum(valeurs) / len(valeurs) substance_max = max(moyennes, key=moyennes.get) print(f\"\\nSubstance avec la temp√©rature moyenne de cristallisation la plus √©lev√©e : {substance_max} ({moyennes[substance_max]:.1f}¬∞C)\") comparaison_substances(donnees)",
    "description": "# 1. Lecture du fichier CSV import csv donnees = {} with open(\"cristallisation.csv\", newline='', encoding='utf-8') as fichier: lecteur = csv.DictReader(fichier) for ligne in lecteur: substance = ligne[\"substance\"] condition = ligne[\"condition\"] temp = float(ligne[\"temp_cristallisation\"]) if substance not in donnees: donnees[substance] = {} donnees[substance][condition] = temp # 2. Affichage des donn√©es for substance in donnees: for condition in donnees[substance]: temp = donnees[substance][condition] print(f\"{substance} cristallise √† {temp}¬∞C {condition.replace('_', ' ')}.\") # 3. Ajout d'une nouvelle condition pour H2O donnees[\"H2O\"][\"en_solution\"] = -5 # 4.",
    "tags": [],
    "title": " Dictionnaires et fichiers texte",
    "uri": "/solutions_ateliers/8_dict_fichiers/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences¬†\u003e¬†\rSolutions des ateliers",
    "content": "import numpy as np # √âtape 1 : Donn√©es exp√©rimentales # np.nan repr√©sente les donn√©es manquantes donnees = np.array([ [12.5, 13.1, 12.9, 13.0, 12.8], # Naturelle [11.2, 11.6, np.nan, 11.5, 11.3], # LED blanche [10.4, 10.1, 10.2, np.nan, np.nan] # LED rouge ]) conditions = [\"Naturelle\", \"LED blanche\", \"LED rouge\"] # √âtape 2 : Calcul des statistiques moyennes = np.nanmean(donnees, axis=1) ecarts_types = np.nanstd(donnees, axis=1) # √âtape 3 : Affichage des r√©sultats for i in range(len(conditions)): print(f\"Moyenne ({conditions[i]}) = {moyennes[i]:.2f} cm, √©cart-type = {ecarts_types[i]:.2f} cm\") # √âtape 4 : Comparaison des moyennes indice_max = np.nanargmax(moyennes) print(f\"Condition avec la plus grande croissance moyenne : {conditions[indice_max]}\")",
    "description": "import numpy as np # √âtape 1 : Donn√©es exp√©rimentales # np.nan repr√©sente les donn√©es manquantes donnees = np.array([ [12.5, 13.1, 12.9, 13.0, 12.8], # Naturelle [11.2, 11.6, np.nan, 11.5, 11.3], # LED blanche [10.4, 10.1, 10.2, np.nan, np.nan] # LED rouge ]) conditions = [\"Naturelle\", \"LED blanche\", \"LED rouge\"] # √âtape 2 : Calcul des statistiques moyennes = np.nanmean(donnees, axis=1) ecarts_types = np.nanstd(donnees, axis=1) # √âtape 3 : Affichage des r√©sultats for i in range(len(conditions)): print(f\"Moyenne ({conditions[i]}) = {moyennes[i]:.",
    "tags": [],
    "title": " R√©vision",
    "uri": "/solutions_ateliers/9_revision/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences¬†\u003e¬†\rSolutions des ateliers",
    "content": "",
    "description": "",
    "tags": [],
    "title": " Fonctions personnalis√©es",
    "uri": "/solutions_ateliers/11_fonctions_perso/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Categories",
    "uri": "/categories/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences¬†\u003e¬†\r√Ä FAIRE",
    "content": "Probl√®me : Probabilit√© que la fl√©chette atteigne la zone blanche Structure de la cible : Zone noire : cercle de rayon 2 cm Zone blanche : anneau entre rayon 2 cm et 3 cm Zone grise : anneau entre rayon 3 cm et 6 cm √âtape 1 ‚Äî Aire totale de la cible La cible est un disque de rayon 6 cm : Aire totale = œÄ √ó 6¬≤ = 36œÄ cm¬≤\n√âtape 2 ‚Äî Aire de la zone blanche La zone blanche est un anneau entre les rayons 2 cm et 3 cm. Donc : Aire blanche = œÄ √ó (3¬≤ - 2¬≤) = œÄ √ó (9 - 4) = 5œÄ cm¬≤\n√âtape 3 ‚Äî Probabilit√© que la fl√©chette tombe dans la zone blanche On suppose que la fl√©chette touche n‚Äôimporte quelle partie de la cible avec une probabilit√© uniforme.\nDonc : Probabilit√© = Aire blanche / Aire totale = (5œÄ) / (36œÄ) = 5 / 36\nR√©ponse finale : La probabilit√© que la fl√©chette atteigne la zone blanche est :\n5 / 36, soit environ 13,9 %.\nSouhaites-tu aussi les formules dans un format Word ou PDF plus lisible visuellement ?",
    "description": "Probl√®me : Probabilit√© que la fl√©chette atteigne la zone blanche Structure de la cible : Zone noire : cercle de rayon 2 cm Zone blanche : anneau entre rayon 2 cm et 3 cm Zone grise : anneau entre rayon 3 cm et 6 cm √âtape 1 ‚Äî Aire totale de la cible La cible est un disque de rayon 6 cm : Aire totale = œÄ √ó 6¬≤ = 36œÄ cm¬≤",
    "tags": [],
    "title": "Maths secondaire 3",
    "uri": "/afaire/maths/index.html"
  },
  {
    "breadcrumb": "",
    "content": "Description du cours Ce cours permet de se familiariser avec la programmation informatique dans un contexte scientifique et de faire le lien entre les technologies et le domaine des sciences.\nL‚Äô√©l√®ve est introduit √† la r√©solution de probl√®mes √† l‚Äôaide d‚Äôalgorithmes. Il doit traduire les algorithmes en code en utilisant un langage de programmation, tout en v√©rifiant le bon fonctionnement de son programme. Il traite des donn√©es et pr√©sente des r√©sultats scientifiques √† l‚Äôaide de la programmation lettr√©e.\nObjectifs du cours Comprendre la gestion des fichiers et dossiers sous Windows Apprendre les bases de la programmation en Python. Introduire les techniques de d√©bogage et de tra√ßage d‚Äôex√©cution. Appliquer la programmation √† des probl√®mes scientifiques (math√©matiques, physique, biologie, etc.). Automatiser des calculs et analyser des donn√©es exp√©rimentales. D√©velopper un raisonnement algorithmique et structur√©. Ma√Ætriser l‚Äôutilisation de Jupyter Notebook pour le d√©veloppement scientifique. Planification du cours et r√®glements du c√©gep Plan du cours",
    "description": "Description du cours Ce cours permet de se familiariser avec la programmation informatique dans un contexte scientifique et de faire le lien entre les technologies et le domaine des sciences.\nL‚Äô√©l√®ve est introduit √† la r√©solution de probl√®mes √† l‚Äôaide d‚Äôalgorithmes. Il doit traduire les algorithmes en code en utilisant un langage de programmation, tout en v√©rifiant le bon fonctionnement de son programme. Il traite des donn√©es et pr√©sente des r√©sultats scientifiques √† l‚Äôaide de la programmation lettr√©e.",
    "tags": [],
    "title": "Programmation en sciences",
    "uri": "/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Tags",
    "uri": "/tags/index.html"
  }
]
