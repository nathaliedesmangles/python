var relearn_searchindex = [
  {
    "breadcrumb": "Programmation en sciences",
    "content": "1. Comporte-toi comme si tu étais déjà en emploi. Arrive à l’heure, sois prêt à travailler, et respecte les échéances. Ton attitude ici prépare ton avenir professionnel.\n2. Respecte-toi, donc agis avec respect. Ton comportement reflète la manière dont tu te considères. Adopte une attitude calme, polie et attentive envers toi-même, les autres et l’enseignant·e.\n3. Sois présent, mentalement et physiquement. Utilise ton cellulaire seulement pour les besoins du cours. Reste concentré·e pendant les activités, comme tu le ferais dans un contexte de travail.\n4. Ose poser des questions, mais aussi écouter. Ton implication est valorisée. La participation active et l’écoute respectueuse des autres sont essentielles à une ambiance d’apprentissage saine.\n5. Travaille avec rigueur et honnêteté. Faire de son mieux, c’est une forme de respect de soi. Le plagiat ou la tricherie nuisent à ton apprentissage réel et à ta crédibilité future.",
    "description": "1. Comporte-toi comme si tu étais déjà en emploi. Arrive à l’heure, sois prêt à travailler, et respecte les échéances. Ton attitude ici prépare ton avenir professionnel.\n2. Respecte-toi, donc agis avec respect. Ton comportement reflète la manière dont tu te considères. Adopte une attitude calme, polie et attentive envers toi-même, les autres et l’enseignant·e.\n3. Sois présent, mentalement et physiquement. Utilise ton cellulaire seulement pour les besoins du cours.",
    "tags": [],
    "title": "Règlements de classe — Comportement attendu",
    "uri": "/regles/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences",
    "content": "Objectifs d’apprentissage À la fin de cette leçon, vous serez en mesure de :\nConnaître les objectifs du cours et les règlements du collège à respecter (Questionnaire interactif Kahoot). Activité guidée :\n2.1 Se connecter à OneDrive\n2.2 Comprendre la gestion de fichiers (Explorateur de fichiers)\n- Créer une structure de dossiers pour le cours.\n- Activez l’affichage de l’extension des fichiers dans l’Explorateur.\n- Télécharger un fichier, le retrouver et le placer dans le bon dossier.\n2.3 Créer un premier fichier .ipynb (Jupyter Notebook) sur Visual Studio Code.\n2.4 Activer la sauvegarde automatique dans Visual Studio Code.\n2.5 Créer et exécuter des cellules (code et texte) avec Jupyter Notebook dans Visual Studio Code. Alternatives à Visual Studio Code (pour la maison) Google Colab PyCharm",
    "description": "Objectifs d’apprentissage À la fin de cette leçon, vous serez en mesure de :\nConnaître les objectifs du cours et les règlements du collège à respecter (Questionnaire interactif Kahoot). Activité guidée :\n2.1 Se connecter à OneDrive\n2.2 Comprendre la gestion de fichiers (Explorateur de fichiers)\n- Créer une structure de dossiers pour le cours.\n- Activez l’affichage de l’extension des fichiers dans l’Explorateur.\n- Télécharger un fichier, le retrouver et le placer dans le bon dossier.",
    "tags": [],
    "title": "Présentation du cours et de l'environnement de travail (OneDrive, VS Code, Jupyter)",
    "uri": "/semaine1/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e \rPrésentation du cours et de l'environnement de travail (OneDrive, VS Code, Jupyter)",
    "content": "OneDrive OneDrive est un stockage et synchronisation de fichiers personnels ou scolaires dans le cloud et accessible à partir de n’importe quel emplacement sur n’importe quel appareil. Idéal pour le travail en cours et le partage avec des personnes spécifiques. Les documents sont privés jusqu’à ce que vous les partagez. 1. Repérer l’icône OneDrive Vous devriez voir l’icône de OneDrive (scolaire = en bleu) (personnel = en gris), sur la barre des tâches, en bas à droite de l’écran (près de l’horloge). Si ce n’est pas le cas, cliquez sur la flèche (encradrée en bleu) pour voir les icônes cachées. Recherchez l’icône de nuage OneDrive ! Si vous ne trouvez pas l’icône de OneDrive, passez à l’étape 2. 2. Se connecter à son compte scolaire/professionnel Aller à l’adresse suivante https://login.microsoftonline.com/?whr=cmontmorency.qc.ca\nEntrer votre nom d’utilisateur, i.e. les 7 derniers chiffres du numéro de DA, soit le nom utilisé pour se connecter sur les ordinateurs du Collège, suivi de « @cmontmorency.qc.ca »\nEntrer votre mot de passe, soit le même que celui pour le sans-fil et pour se connecter sur les ordinateurs du Collège\nN. B. Ce mot de passe initial se trouve dans Col.NET sous “Dossier personnel / Autres informations”. S’il n’y a pas de mot de passe c’est que votre compte n’a pas encore été créé, revérifiez plus tard. Si la connexion échoue, réessayez dans quelques heures, il se peut qu’il y ait un délai. S’il excède 48h, faites une demande sur le portail de service. Cliquer sur « Suivant » au message indiquant « Plus d’informations requises ».\nN. B. Pour configurer votre authentification multifacteur (MFA) avec un numéro de cellulaire, sélectionner « Je veux configurer une autre méthode » au bas de la fenêtre pour et suivre l’étape #7.\n2.1 Lancer la configuration Cliquez sur l’icône OneDrive, puis sur Se connecter. 📸 Capture suggérée : fenêtre “Se connecter à OneDrive” avec champ pour courriel.\n2.2 Entrer votre adresse courriel scolaire/professionnelle Tapez votre adresse (ex. prenom.nom@ecole.ca), puis cliquez sur Se connecter. 📸 Capture suggérée : saisie de l’adresse courriel.\n2.3 Entrer votre mot de passe Vous serez redirigé vers la page de votre établissement pour entrer le mot de passe. Cliquez ensuite sur Suivant. 📸 Capture suggérée : page de connexion Microsoft 365.\nÉtape 3 : Choisir l’emplacement du dossier OneDrive 3.1 Emplacement du dossier OneDrive vous propose un dossier par défaut (généralement dans votre dossier utilisateur). Cliquez sur Suivant pour l’accepter, ou sur Modifier l’emplacement si vous voulez changer. 📸 Capture suggérée : écran “Voici votre dossier OneDrive”.\n☁️ Étape 4 : Synchronisation des fichiers 4.1 Synchronisation automatique Une fois connecté, OneDrive synchronise automatiquement vos fichiers avec le cloud. Les fichiers que vous ajoutez dans ce dossier seront automatiquement sauvegardés en ligne. 📸 Capture suggérée : dossier OneDrive ouvert dans l’Explorateur de fichiers.\nÉtape 5 : Gérer les fichiers et dossiers 5.1 Ajouter un fichier ou dossier Faites un clic droit dans le dossier OneDrive \u003e Nouveau \u003e Dossier ou Document texte, etc. 📸 Capture suggérée : clic droit dans le dossier OneDrive. 5.2 Copier ou déplacer un fichier Glissez-déposez un fichier dans le dossier OneDrive pour qu’il soit sauvegardé automatiquement. 📸 Capture suggérée : déplacement d’un fichier dans OneDrive.\n5.3 Accéder à OneDrive en ligne Faites clic droit sur l’icône OneDrive dans la barre des tâches \u003e Afficher en ligne. Cela ouvre votre OneDrive dans le navigateur. 📸 Capture suggérée : menu clic droit sur l’icône OneDrive avec “Afficher en ligne” sélectionné.\nComprendre les icônes de synchronisation Icône Signification ☁️ Nuage Fichier uniquement en ligne ✅ Cercle vert Fichier synchronisé et disponible hors ligne 🔄 Flèches bleues Synchronisation en cours ❌ Croix rouge Erreur de synchronisation 📸 Capture suggérée : quelques fichiers avec icônes différentes dans OneDrive.\n🎯 Résumé Étape Action 1 Ouvrir OneDrive 2 Se connecter avec son courriel scolaire/professionnel 3 Choisir où stocker le dossier OneDrive 4 Laisser OneDrive synchroniser 5 Gérer ses fichiers dans l’explorateur ou en ligne Pause 5 minutes",
    "description": "OneDrive OneDrive est un stockage et synchronisation de fichiers personnels ou scolaires dans le cloud et accessible à partir de n’importe quel emplacement sur n’importe quel appareil. Idéal pour le travail en cours et le partage avec des personnes spécifiques. Les documents sont privés jusqu’à ce que vous les partagez. 1. Repérer l’icône OneDrive Vous devriez voir l’icône de OneDrive (scolaire = en bleu) (personnel = en gris), sur la barre des tâches, en bas à droite de l’écran (près de l’horloge).",
    "tags": [],
    "title": "OneDrive et gestion des fichiers et dossiers",
    "uri": "/semaine1/onedrive/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e \rPrésentation du cours et de l'environnement de travail (OneDrive, VS Code, Jupyter)",
    "content": "1. Visual Studio Code (VS Code) Visual Studio Code est un éditeur de code moderne, simple et très utilisé pour programmer avec Python. Il vous permet aussi de bien organiser vos projets grâce à une gestion intuitive des dossiers et fichiers.\nCe que vous pouvez faire avec VS Code : Écrire et exécuter du code Python Ouvrir et modifier des notebooks Jupyter (.ipynb) Voir tous les fichiers de votre projet dans un seul endroit Lire les erreurs et déboguer plus facilement Gestion des dossiers et fichiers Avant de commencer, assurez-vous d’être connectés à votre compte OneDrive du cégep.\nDans votre OneDrive, créez un dossier pour le cours d’aujourd’hui (par exemple : python-cours1) dans l’Explorateur Windows.\nOuvrez VS Code Ouvrez le dossier python-cours1 dans VS Code : Sélectionnez le dossier\nDans VS Code, dans le panneau à gauche, vous pouvez : Ajouter un nouveau fichier Créer un nouveau fichier nommé intro-python.ipynb en tapant le nom complet, suivi de la touche Enter.\nCréer un sous-dossier Créer un nouveau dossier nommé exercices en tapant le nom complet, suivi de la touche Enter.\nPour supprimer ou renommer des fichiers ou des dossiers, simplement faites un clic-droit sur le nom du fichier ou dossier, puis choisissez l’option souhaitée. Supprimez le fichier nommé intro-python.ipynb.\nLes fichiers .py (scripts Python) et .ipynb (notebooks) seront tous visibles ici. Notez que\rDans ce cours nous utiliserons uniquement des fichiers .ipynb(iPython NoteBook)\n2. Jupyter Notebook Jupyter Notebook vous permet d’écrire du texte et du code Python dans un même document. C’est un outil idéal pour expérimenter, visualiser des données et commenter vos résultats.\nPourquoi l’utiliser ? On peut écrire du code Python et l’exécuter cellule par cellule. On peut insérer des explications ou des titres entre les blocs de code. Très pratique pour les calculs scientifiques, les graphiques et les analyses de données. Comment l’utiliser dans VS Code À partir de Moodle (Section Semaine 1), téléchargez le fichier introduction.ipynb. Par défaut, le fichier se trouvera dans le dossier Téléchargement.\nVia l’Explorateur de fichiers, déplacer (Glisser-Déposer) le fichier introduction.ipynb du dossier Téléchargement vers le dossier Exercices Revenez dans VS Code, assurez-vous de voir le fichier introduction_pyton.ipynb dans le dossier exercices. Une fois ouvert, à droite, vous verrez des cellules :\nCertaines celules servent à écrire du texte explicatif (format Markdown) D’autres servent à écrire du code Python Cliquez sur ▶ pour exécuter une cellule Bonnes pratiques Organisez bien vos projets : Utilisez un dossier par thème ou par semaine Nommez vos fichiers clairement : calcul_masse.ipynb, analyse_temp.ipynb La sauvegarde automatique ou sauvegardez régulièrement Si un rond blanc est présent à droit du nom du fichier dans l’onglet, c’est parce qu’il n’est PAS sauvegardé (comme dans l’exemple ci-dessous).\nPour activer la sauvegarde automatique, cliquez l’onglet Fichier, puis cliquez sur Enregistrement automatique.\nVous devriez maintenant voir un crochet à gauche de cette option.\nPour ce fichier, VS Code détectera les modifications et fera la sauvegarde automatiquement, mais vous pouvez à tout moment appuyer sur Ctrl + S pour forcer la sauvegarde Il devrait maintenant avoir un X à gauche du nom du fichier dans l’onglet du haut. Ce qui signifie que le fichier est sauvegardé.\nFermez les notebooks proprement En haut à droite du nom d’un notebook, cliquez sur X pour fermer le fichier Pause 5 minutes",
    "description": "1. Visual Studio Code (VS Code) Visual Studio Code est un éditeur de code moderne, simple et très utilisé pour programmer avec Python. Il vous permet aussi de bien organiser vos projets grâce à une gestion intuitive des dossiers et fichiers.\nCe que vous pouvez faire avec VS Code : Écrire et exécuter du code Python Ouvrir et modifier des notebooks Jupyter (.ipynb) Voir tous les fichiers de votre projet dans un seul endroit Lire les erreurs et déboguer plus facilement Gestion des dossiers et fichiers Avant de commencer, assurez-vous d’être connectés à votre compte OneDrive du cégep.",
    "tags": [],
    "title": "Visual Studio Code et Jupyter Notebook",
    "uri": "/semaine1/vscodejupyter/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e \rPrésentation du cours et de l'environnement de travail (OneDrive, VS Code, Jupyter)",
    "content": "Objectifs pédagogiques Identifier les connaissances préalables et les attentes des étudiants. Favoriser une première collaboration en équipe. Prendre contact avec l’environnement de développement (Anaconda et Jupyter Notebook). Manipuler des notions de base : variables, types de données, opérations simples. Questionnaire de départ (~15 minutes) Répondre individuellement aux questions du quiz Apprendre à se connaitre\nSuivi (~5 minutes) :\nDiscussion en petits groupes (3-4 étudiants) Mise en commun de quelques idées (question #9) à l’oral. Mini-lab – Découverte de Python (~1 h 30) En équipe : 2 ou 3 étudiants\nObjectifs :\nComprendre la structure d’un script Python dans Jupyter Modifier des cellules et exécuter du code Manipuler des variables et des opérations de base Discuter et s’entraider au sein de l’équipe Titre : Une calculatrice scientifique de base\nMatériel :\nJupyter Notebook prêt à remplir (Sur Moodle) Contient des cellules à compléter avec des instructions simples Contenu du mini-lab\r# Cellule 1 : Affiche ton nom et ton programme d’études print(\"Nom : _______ - Programme : Sciences de la nature\") # Cellule 2 : Déclare une variable pour ta masse (en kg) et une pour la gravité (9.8 m/s^2) masse = ___ gravite = 9.8 # Cellule 3 : Calcule ton poids en Newton poids = masse * gravite print(\"Ton poids sur Terre est :\", poids, \"N\") # Cellule 4 : Calcule la valeur d’une expression scientifique, par exemple : énergie cinétique vitesse = 3.0 # m/s energie = 0.5 * masse * vitesse ** 2 print(\"Énergie cinétique : \", energie, \"J\")\rRetour en groupe (~10 minutes) Discussion : qu’avez-vous appris aujourd’hui? Quels éléments vous ont surpris ou intéressés? Le notebook .ipynb",
    "description": "Objectifs pédagogiques Identifier les connaissances préalables et les attentes des étudiants. Favoriser une première collaboration en équipe. Prendre contact avec l’environnement de développement (Anaconda et Jupyter Notebook). Manipuler des notions de base : variables, types de données, opérations simples. Questionnaire de départ (~15 minutes) Répondre individuellement aux questions du quiz Apprendre à se connaitre\nSuivi (~5 minutes) :\nDiscussion en petits groupes (3-4 étudiants) Mise en commun de quelques idées (question #9) à l’oral.",
    "tags": [],
    "title": "Activité 1 – Questionnaire + Mini-lab en équipe",
    "uri": "/semaine1/atelier/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences",
    "content": "Objectifs d’apprentissage À la fin de cette leçon vous serez en mesure de:\nDéfinir et utiliser des variables en Python. Manipuler les types de base en Python: int, float, str, bool. Afficher les résultats de manière claire et lisible Gérer les entrées (saisies au clavier) et les sorties (affichage) d’un programme Python. Lire des données entrées par l’utilisateur. Les variables et les types et affichage de données de base Lorsqu’on écrit de vrais programmes, on a souvent besoin de stocker des valeurs ou des résultats de calculs en mémoire.\nQu’est-ce qu’une variable ? Les variables sont utilisées pour stocker ces valeurs ou résultats, pour pouvoir les réutiliser plus tard. Imaginez une boîte dans laquelle vous rangez quelque chose : c’est ça, une variable. Sachez que\rDe manière générale, il est recommandé de donner un nom évocateur à une variable, afin de mieux comprendre ce qu’elle contient.\nDéfinir une variable et lui attribuer une valeur En Python, on utilise le symbole = (appelé opérateur d’affectation) pour attribuer une valeur à une variable. Il est préférable de mettre un espace avant et après le =. Il est aussi possible de chaîner des affectations, par exemple : a = b = 2. Ici les variables a et b valent toutes les deux 2. Exemple de définition d’une variable\njour_de_la_semaine = \"Lundi\"\rExplication du code\nIci, la valeur textuelle \"Lundi\" est enregistrée en mémoire. On peut la réutiliser en appelant le nom de la variable, par exemple : print(jour_de_la_semaine) # Résultat qui s'affiche: Lundi\rLa variable jour_de_la_semaine contient une valeur de type str (chaîne de caractères) : print(type(jour_de_la_semaine)) # \u003cclass 'str'\u003e\rOn peut toujours modifier la valeur d’une variable : jour_de_la_semaine = \"Mardi\"\rMaintenant, la variable contient une nouvelle valeur :\nprint(jour_de_la_semaine) # Résultat qui s'affiche: Mardi\rIl est aussi possible d’attribuer la valeur d’une variable à une autre variable :\nnombre1 = 10 nombre2 = nombre2 # nombre2 vaut aussi 10\rPython permet aussi d’assigner des valeurs de types différents à une même variable. Par exemple :\nmois = \"Décembre\" print(type(mois)) # \u003cclass 'str'\u003e\rPuis :\nmois = 12 print(type(mois)) # \u003cclass 'int'\u003e\rCela fonctionne parce que Python est un langage à typage dynamique. C’est-à-dire, que la variable prends automatiquement le type de la valeur qui lui est assignée.\nNe pas abuser du typage dynamique : dans un long programme, on peut oublier qu’on a changé le type d’une variable, ce qui peut provoquer des erreurs difficiles à trouver.\nRègles pour nommer les variables Comme mentionné plus haut, chaque variable a un nom qui la distingue des autres. Voici les règles à respecter :\nLes noms sont sensibles à la casse (mois ≠ Mois). Un nom doit commencer par une lettre ou un trait de soulignement, et peut contenir des lettres, chiffres ou traits de soulignement (ex. : utilisateur_nom, score1, _compteur). Un nom ne peut pas commencer par un chiffre (ex. : 2q est invalide). Un nom ne doit pas être un mot réservé (mot-clé) du langage. Ne brisez pas ces règles, sinon votre programme ne fonctionnera pas.\nExercices Définir une chaîne de caractères Créez une variable appelée fete avec la valeur \"Journée du roulé à la cannelle\", qui doit être une chaîne de caractères. # définir une nouvelle variable ici fete = \"Journée du roulé à la cannelle\"\rAssignez la chaîne de caractères \"Python\" à la variable prenom. À la ligne 10, remplacez la valeur de la variable prenom par votre vrai prénom. Utilisez une affectation chaînée pour stocker la valeur 13 dans age_jumeau1 et age_jumeau2 à la ligne 15. Les variables non définies NOTICE Si vous essayez d’utiliser une variable non définie, Python renverra une erreur :\nprint(nom_du_mois) # NameError: name 'nom_du_mois' is not defined\rExercices Définissez la variable cours, sans lui donner de valeur. Ensuite utilisez print() pour afficher sa valeur. Que se passe t-il? Définissez la variable maVariable en lui donnant la valeur ``. Ensuite, afficher la valeur de la variable MaVariable. Qu’observez-vous ? Comment pouvez-vous l’expliquer ? Les types des variables La conversion des types de variables Les opérations arithmétiques en Python Python peut effectuer toutes les opérations de base :\nOpération Symbole Exemple Résultat Addition + 2 + 3 5 Soustraction - 7 - 2 5 Multiplication * 4 * 5 20 Division / 10 / 4 2.5 Division entière // 10 // 4 2 Modulo % 10 % 4 2 Puissance ** 2 ** 3 8 Les règles de priorité sont les mêmes qu’en mathématiques. Utilisez les parenthèses pour clarifier vos intentions. Exercices Définissez la variables nombre_initial avec la valeur 9.0 Diviser la valeur stockée dans nombre_initial par 2 et stocker le résultat dans la variable resultat_division. Calculer le reste d’une telle division et stocker le résultat dans la variable reste_division. Multiplier resultat_division par 2 et stocker le résultat dans la variable resultat_multiplication. Ajouter reste_division à resultat_multiplication et stocker le résultat dans la variable somme_finale. Soustraire resultat_multiplication de nombre_initial et stocker le résultat dans la variable difference. Effectuer une division entière de nombre_initial par 2 et stocker le résultat dans la variable division_entiere. Élever resultat_multiplication à la puissance 3 et stocker le résultat dans la variable puissance_trois. Affichez toutes les variables à l’aide de print(). Résultat attendu Affectations raccourcies Une affectation raccourcie est une instruction unique qui combine une opération binaire et une affectation, comme +=, -=, etc. Une expression d’affectation raccourcie comme nombre += 1 peut être réécrite en nombre = nombre + 1 pour obtenir le même résultat.\nExercices Utilisez une affectation raccourcie pour ajouter 5 à la variable nombre et la mettre à jour. number = 9.0 print(“number = \" + str(number)) number -= 2 print(“number = \" + str(number))\nnumber += 5\nprint(“number = \" + str(number))\nOpérateurs booléens Un booléen est un type de valeur qui ne peut être que Vrai (True) ou Faux (False). L’opérateur == (égalité) compare deux variables pour vérifier si elles sont égales. Vous en apprendrez davantage sur les opérateurs booléens dans une tâche ultérieure.\nPour une explication plus structurée et détaillée, vous pouvez consulter cette page de la base de connaissances Hyperskill.\nTâche Vérifiez si la variable deux est égale à trois. Vérifiez si la variable est_egal porte un nom trompeur. Vérifiez si la variable est_faux contient effectivement un mensonge. Utilisez l’opérateur ==. Utilisez la valeur True. Utilisez la valeur False.\nExemple de code en français :\ndeux = 2 trois = 3 est_egal = (deux == trois) # False print(est_egal) est_faux = (est_egal == False) # True print(est_faux)\rComparison operators Conclusion Dans cette leçon, nous avons découvert ce que sont les variables en Python. Nous avons vu comment les définir, leur assigner des valeurs, et les règles à suivre pour les nommer. Ces notions vous seront très utiles pour bien progresser dans l’apprentissage de Python !\nLes entrées de l’utilisateur (via le clavier) Pour demander une valeur à l’utilisateur :\nnom = input(\"Quel est ton nom? \")\rPar défaut, input() retourne une chaîne de caractères (str). Pour effectuer des calculs, vous devez convertir en nombre :\nmasse = float(input(\"Entrer la masse en grammes : \"))\rUtilisez int() pour les entiers et float() pour les décimaux.\nLes sorties (affichage) print(\"Bonjour\", nom) print(\"La concentration est\", concentration, \"mol/L\")\rPour un affichage plus précis :\nprint(f\"La concentration est de {concentration:.2f} mol/L\")\rIci, :.2f signifie : afficher avec 2 chiffres après la virgule.\nErreurs courantes et comment les éviter Type d’erreur Exemple Explication SyntaxError print(\"Bonjour\" Parenthèse fermante manquante TypeError \"masse\" + 10 Mélange de texte et de nombre ZeroDivisionError 10 / 0 Division par zéro ValueError float(\"abc\") Conversion invalide NameError print(resultat) sans déclaration Variable non définie Conseil : Lisez toujours attentivement le message d’erreur. Python vous indique généralement la ligne concernée et le type de problème.\nEn résumé Python sait calculer, mais il faut lui donner des consignes claires. Toujours convertir les entrées input() si vous voulez faire des calculs. Utilisez print() pour afficher vos résultats avec clarté. Ne vous découragez pas face aux erreurs : elles sont des occasions d’apprentissage. Atelier à faire en classe (2 périodes) Exercice 1 Exercice 2 Exercice 3",
    "description": "Objectifs d’apprentissage À la fin de cette leçon vous serez en mesure de:\nDéfinir et utiliser des variables en Python. Manipuler les types de base en Python: int, float, str, bool. Afficher les résultats de manière claire et lisible Gérer les entrées (saisies au clavier) et les sorties (affichage) d’un programme Python. Lire des données entrées par l’utilisateur. Les variables et les types et affichage de données de base Lorsqu’on écrit de vrais programmes, on a souvent besoin de stocker des valeurs ou des résultats de calculs en mémoire.",
    "tags": [],
    "title": "Introduction à Python (variables, types, entrée/sortie)",
    "uri": "/semaine2/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e \rIntroduction à Python (variables, types, entrée/sortie)",
    "content": "Objectifs pédagogiques Identifier et corriger des erreurs fréquentes : types de données, concaténation, calculs Introduire la validation minimale des entrées Revoir les conventions de nommage et la clarté du code Préambule Thème : Loi d’Ohm (U = R × I)\nDurée prévue : 60 à 90 minutes\nTravail en équipe de 2 ou 3\nContexte Un technicien de laboratoire a tenté d’écrire un programme Python pour calculer la tension (U) en volts selon la loi d’Ohm. Il voulait que l’utilisateur entre la valeur de la résistance (en ohms) et du courant (en ampères), puis obtenir la tension. Malheureusement, le script contient plusieurs erreurs.\nVous devez lire, exécuter et corriger le script pour qu’il fonctionne correctement et respecte les bonnes pratiques vues en classe.\nScript initial (erroné) # Calcul de la tension selon la loi d’Ohm resistance = input(\"Entrer la résistance en ohms : \") courant = input(\"Entrer le courant en ampères : \") tension = courant * resistance print(\"La tension est de \" + tension + \" V\")\rConsignes Exécuter le script tel quel et observer les messages d’erreurs. Identifier au moins trois problèmes différents dans le code. Corriger le script pour qu’il fonctionne correctement et soit lisible. Ajouter une explication en commentaire pour chaque correction. Faire valider votre version corrigée avec une autre équipe. Proposer une amélioration facultative (ex. : arrondir le résultat, afficher les unités, utiliser f-strings). Résultat attendu Un script fonctionnel, lisible, commenté, et capable de produire une sortie comme :\nEntrer la résistance en ohms : 10\rEntrer le courant en ampères : 2\rLa tension est de 20.0 V",
    "description": "Objectifs pédagogiques Identifier et corriger des erreurs fréquentes : types de données, concaténation, calculs Introduire la validation minimale des entrées Revoir les conventions de nommage et la clarté du code Préambule Thème : Loi d’Ohm (U = R × I)\nDurée prévue : 60 à 90 minutes\nTravail en équipe de 2 ou 3\nContexte Un technicien de laboratoire a tenté d’écrire un programme Python pour calculer la tension (U) en volts selon la loi d’Ohm.",
    "tags": [],
    "title": "Activité 2.1 - Corriger un script scientifique erroné",
    "uri": "/semaine2/atelier/at1/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e \rIntroduction à Python (variables, types, entrée/sortie)",
    "content": "Objectif Mettre en pratique les opérations arithmétiques et la manipulation de variables en Python dans un contexte scientifique (chimie et physique). Compétences exercées Déclaration et affectation de variables Opérations arithmétiques Affichage de résultats avec formatage Interprétation scientifique d’un problème Contexte : Vous travaillez en équipe de 2 ou 3. Chaque équipe reçoit des situations-problèmes à modéliser en Python.\nExercice 1 : Calcul de concentration molaire Énoncé : Un technicien prépare une solution en dissolvant une masse donnée de soluté dans un certain volume de solvant. Écrire un programme qui calcule la concentration molaire (mol/L) selon la formule :\n$$ C = \\frac{n}{V} \\quad \\text{où} \\quad n = \\frac{m}{M} $$\nm : masse du soluté (en grammes) M : masse molaire du soluté (en g/mol) V : volume de la solution (en litres) Exemple d’utilisation : Entrer la masse, la masse molaire, et le volume. Le programme retourne la concentration.\nExercice 2 : Vitesse moyenne d’une réaction Énoncé : Lors d’une expérience de cinétique chimique, on mesure la variation de la concentration d’un réactif au cours du temps. Écrire un programme qui calcule la vitesse moyenne de disparition selon :\n$$ v = \\frac{\\Delta [A]}{\\Delta t} $$\noù [A] est la concentration du réactif.\nExemple : [Réactif A] passe de 0.80 mol/L à 0.20 mol/L en 120 secondes. Calculer la vitesse moyenne.\nExtension (pour les rapides) Ajouter une vérification pour empêcher la division par zéro et afficher un message d’erreur personnalisé si le volume ou le temps est nul.",
    "description": "Objectif Mettre en pratique les opérations arithmétiques et la manipulation de variables en Python dans un contexte scientifique (chimie et physique). Compétences exercées Déclaration et affectation de variables Opérations arithmétiques Affichage de résultats avec formatage Interprétation scientifique d’un problème Contexte : Vous travaillez en équipe de 2 ou 3. Chaque équipe reçoit des situations-problèmes à modéliser en Python.\nExercice 1 : Calcul de concentration molaire Énoncé : Un technicien prépare une solution en dissolvant une masse donnée de soluté dans un certain volume de solvant.",
    "tags": [],
    "title": "Activité 2.2 – Calculs de concentrations et vitesses de réaction",
    "uri": "/semaine2/atelier/at2/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences",
    "content": "Objectifs d’apprentissage À la fin de cette leçon, vous devrez être capable de :\nÉcrire des instructions conditionnelles en Python Utiliser if, elif et else pour gérer plusieurs cas Évaluer des expressions logiques avec les opérateurs de comparaison (==, !=, \u003c, \u003e, \u003c=, \u003e=) Combiner plusieurs conditions avec les opérateurs logiques (and, or, not) Pourquoi des conditions ? Un programme prend souvent des décisions :\nS’il fait moins de 0 °C, l’eau gèle. Si un patient a une température \u003e 38 °C, il a de la fièvre. Si la vitesse dépasse 120 km/h, une alarme est déclenchée. Ces situations sont modélisées avec des conditions.\nLa structure if de base temp = -5 if temp \u003c 0: print(\"L'eau est solide (glace).\")\rRappel important : L’indentation (espaces ou tabulation) est obligatoire pour indiquer le bloc conditionnel.\nAjouter un cas alternatif avec else** temp = 20 if temp \u003c 0: print(\"Glace\") else: print(\"Pas de glace\")\rGérer plusieurs cas avec elif temp = 100 if temp \u003c 0: print(\"Solide (glace)\") elif temp \u003c 100: print(\"Liquide\") else: print(\"Gaz (vapeur)\")\rNote : Python évalue les conditions dans l’ordre. Dès qu’une condition est vraie, il saute les suivantes.\nOpérateurs de comparaison utiles Opérateur Signification Exemple == égal à a == b != différent de a != b \u003c plus petit que a \u003c b \u003e plus grand que a \u003e b \u003c= inférieur ou égal a \u003c= b \u003e= supérieur ou égal a \u003e= b Combiner les conditions avec and, or, not temp = 80 pression = 1.0 if temp \u003e 0 and temp \u003c 100: print(\"L’eau est liquide à pression normale.\")\rif temp \u003e 100 or pression \u003e 1.5: print(\"Attention à l’ébullition !\")\rApplication scientifique simple temp = float(input(\"Température en °C : \")) if temp \u003c 0: print(\"L’eau est sous forme de glace.\") elif temp \u003c 100: print(\"L’eau est liquide.\") else: print(\"L’eau est sous forme de vapeur.\")\rPetits exercices pratiques Écris un programme qui indique si un étudiant a réussi ou échoué selon sa note (seuil : 60 %). Demande un pH à l’utilisateur et affiche si la solution est acide, neutre ou basique. Crée un programme qui vérifie si un triangle est équilatéral, isocèle ou scalène selon les longueurs des côtés. Pour aller plus loin Que se passe-t-il si aucune condition n’est vraie et qu’il n’y a pas de else ? Peut-on avoir plusieurs elif dans une même structure ? (Réponse : Oui) Peut-on imbriquer des if dans d’autres if ? (Réponse : Oui, mais attention à la lisibilité)",
    "description": "Objectifs d’apprentissage À la fin de cette leçon, vous devrez être capable de :\nÉcrire des instructions conditionnelles en Python Utiliser if, elif et else pour gérer plusieurs cas Évaluer des expressions logiques avec les opérateurs de comparaison (==, !=, \u003c, \u003e, \u003c=, \u003e=) Combiner plusieurs conditions avec les opérateurs logiques (and, or, not) Pourquoi des conditions ? Un programme prend souvent des décisions :\nS’il fait moins de 0 °C, l’eau gèle.",
    "tags": [],
    "title": "Prendre des décisions avec `if`, `elif`, `else`",
    "uri": "/semaine3/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e \rPrendre des décisions avec `if`, `elif`, `else`",
    "content": "Objectifs pédagogiques Utiliser les structures conditionnelles if, elif, else Travailler avec les types numériques (float, int) Comprendre l’effet de la pression sur les températures de fusion et d’ébullition Énoncé L’état physique de l’eau dépend de la température et de la pression. À pression atmosphérique normale (1 atm) :\nL’eau gèle à 0 °C et bout à 100 °C. En altitude, la pression est plus faible, donc l’eau bout à une température plus basse. En autocuiseur, la pression est plus élevée, donc l’eau bout à une température plus élevée. On suppose ici un modèle très simple :\nPression (atm) Température d’ébullition (°C) 0.5 81 1.0 100 1.5 112 2.0 120 Le point de congélation demeure à 0 °C peu importe la pression.\nTâche demandée Écris un programme Python qui :\nDemande à l’utilisateur d’entrer :\nLa température de l’eau en °C La pression en atm (choix parmi 0.5, 1.0, 1.5, 2.0) Détermine et affiche l’état physique de l’eau : \"solide\", \"liquide\" ou \"gaz\".\nExemples de fonctionnement attendus Température (°C) : 50 Pression (atm) : 1.0 → État de l’eau : liquide\rTempérature (°C) : 101 Pression (atm) : 1.0 → État de l’eau : gaz\rTempérature (°C) : -5 Pression (atm) : 2.0 → État de l’eau : solide\rPistes / rappels Utiliser des conditions imbriquées ou combinées (if ... and ..., elif) Pour simplifier, tu peux faire un if ou un match sur la pression pour définir le point d’ébullition Utilise des variables pour stocker les seuils Extension (facultatif) Gérer des cas d’erreurs (ex. : pression invalide) Afficher une petite phrase plus descriptive selon l’état : “L’eau est sous forme de vapeur.” ou “L’eau est liquide à cette température et pression.”",
    "description": "Objectifs pédagogiques Utiliser les structures conditionnelles if, elif, else Travailler avec les types numériques (float, int) Comprendre l’effet de la pression sur les températures de fusion et d’ébullition Énoncé L’état physique de l’eau dépend de la température et de la pression. À pression atmosphérique normale (1 atm) :\nL’eau gèle à 0 °C et bout à 100 °C. En altitude, la pression est plus faible, donc l’eau bout à une température plus basse.",
    "tags": [],
    "title": "Activité 3 - État physique de l’eau selon la température et la pression",
    "uri": "/semaine3/atelier/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences",
    "content": "Objectifs de la leçon Comprendre l’utilité des boucles en programmation Savoir écrire des boucles while et for Appliquer les boucles à des cas concrets en sciences (répétitions, séries de mesures, simulations) Pourquoi utiliser une boucle? Une boucle permet de répéter automatiquement une suite d’instructions tant qu’une condition est vraie (while) ou pour parcourir une série de valeurs (for).\nLa boucle while Syntaxe de base : compteur = 0 while compteur \u003c 5: print(\"Compteur =\", compteur) compteur += 1\rIl faut modifier la condition dans la boucle pour éviter une boucle infinie.\nExemple en sciences : # Simulation d’un refroidissement temp = 100 # température initiale while temp \u003e 0: print(f\"Température : {temp} °C\") temp -= 10\rLa boucle for Syntaxe de base : for i in range(5): print(\"i =\", i)\rrange(n) génère les entiers de 0 à n-1. On peut aussi faire : for i in range(2, 10, 2): # de 2 à 8, par pas de 2 print(i)\rExemple en sciences : # Affichage de mesures prises chaque seconde mesures = [22.5, 22.8, 23.0, 23.3, 23.5] for mesure in mesures: print(f\"Température mesurée : {mesure} °C\")\rComparaison while vs for Situation Utiliser while si… Utiliser for si… Nombre d’itérations inconnu d’avance ✅ ❌ Série connue (liste, range) ❌ ✅ Exercices rapides à faire pendant le cours 1. Afficher les nombres de 1 à 10\nfor i in range(1, 11): print(i)\r2. Compter jusqu’à 100 par bonds de 10 3. Simuler la chute d’un objet de 100 m (baisse de 10 m/s) 4. Lire une température jusqu’à ce qu’elle soit \u003c 0 (entrée utilisateur)\nÀ éviter / pièges fréquents Boucle infinie (while sans mise à jour de la condition) Utiliser range sans comprendre que la fin est exclusive Oublier l’indentation dans le bloc de la boucle À retenir while = tant qu’une condition est vraie for = pour chaque valeur dans une séquence Les boucles permettent d’automatiser les calculs et traitements de données en science",
    "description": "Objectifs de la leçon Comprendre l’utilité des boucles en programmation Savoir écrire des boucles while et for Appliquer les boucles à des cas concrets en sciences (répétitions, séries de mesures, simulations) Pourquoi utiliser une boucle? Une boucle permet de répéter automatiquement une suite d’instructions tant qu’une condition est vraie (while) ou pour parcourir une série de valeurs (for).\nLa boucle while Syntaxe de base : compteur = 0 while compteur \u003c 5: print(\"Compteur =\", compteur) compteur += 1\rIl faut modifier la condition dans la boucle pour éviter une boucle infinie.",
    "tags": [],
    "title": "Répéter avec `for` et `while`",
    "uri": "/semaine4/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e \rRépéter avec `for` et `while`",
    "content": "Objectifs d’apprentissage Utiliser les boucles for et while pour automatiser des tâches répétitives. Appliquer les boucles à une situation scientifique concrète. Travailler en collaboration pour planifier une solution et tester différents scénarios. Partie 1 – Table de multiplication Écrire un programme Python qui affiche la table de multiplication d’un nombre donné par l’usager (entre 1 et 12), jusqu’à 12 × ce nombre.\nExemple de sortie :\nEntrez un nombre entre 1 et 12 : 7\r1 x 7 = 7\r2 x 7 = 14\r3 x 7 = 21\r...\r12 x 7 = 84\rVariante : demander à l’usager s’il veut une table en ordre croissant ou décroissant. Version bonus : utiliser une boucle while pour refaire une autre table tant que l’usager le souhaite. Une expérience consiste à mesurer la température (°C) d’un liquide chaque minute pendant 10 minutes.\nVoici les données recueillies : [20.1, 21.3, 22.0, 22.5, 23.1, 23.7, 24.0, 24.2, 24.5, 24.7]\nTâches demandées Afficher chaque température avec la minute correspondante.\nExemple : Minute 1 : 20.1 °C Calculer la variation moyenne de température par minute.\nDétecter les anomalies : afficher un message si une variation dépasse 1 °C par minute.\n(Optionnel, si le temps le permet) Comparer avec un seuil théorique (24.5 °C) et indiquer à quel moment il est dépassé.\nExemple de sortie partielle Minute 4 : 22.5 °C\rVariation depuis minute 3 : +0.5 °C\rMinute 5 : 23.1 °C\rVariation depuis minute 4 : +0.6 °C\r...\rSeuil de 24.5 °C dépassé à la minute 10.\rDiscussion en équipe (10 minutes) Pourquoi une boucle est-elle utile dans chacun de ces cas? Quelle boucle est préférable dans quel contexte (for vs while)? Quelle stratégie utiliser pour identifier une anomalie dans une séquence?",
    "description": "Objectifs d’apprentissage Utiliser les boucles for et while pour automatiser des tâches répétitives. Appliquer les boucles à une situation scientifique concrète. Travailler en collaboration pour planifier une solution et tester différents scénarios. Partie 1 – Table de multiplication Écrire un programme Python qui affiche la table de multiplication d’un nombre donné par l’usager (entre 1 et 12), jusqu’à 12 × ce nombre.\nExemple de sortie :\nEntrez un nombre entre 1 et 12 : 7\r1 x 7 = 7\r2 x 7 = 14\r3 x 7 = 21\r.",
    "tags": [],
    "title": "Activité 4 – Table de multiplication et données expérimentales",
    "uri": "/semaine4/atelier/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences",
    "content": "Objectifs de la leçon Comprendre ce qu’est une liste et comment la manipuler Utiliser les chaînes de caractères comme des séquences Appliquer les connaissances à des données scientifiques simples Travailler en équipe sur une activité d’analyse de mesures Listes en Python Une liste est une collection ordonnée, modifiable, qui peut contenir différents types de données.\nDéfinir une liste : mesures = [12.1, 13.0, 12.8, 13.5]\rAccéder à un élément print(mesures[0]) # 12.1 print(mesures[-1]) # 13.5 (dernier élément)\rModifier un élément mesures[1] = 13.2\rAjouter ou retirer mesures.append(14.0) # Ajoute à la fin mesures.remove(12.8) # Retire la première occurrence\rLongueur d’une liste len(mesures) # Nombre d’éléments\rChaînes de caractères (strings) Une chaîne de caractères est aussi une séquence (comme une liste), mais immutable (non modifiable).\nmot = \"science\" print(mot[0]) # 's' print(mot[-1]) # 'e' print(len(mot)) # 7\rQuelques méthodes utiles mot.upper() # 'SCIENCE' mot.lower() # 'science' mot.replace(\"c\", \"k\") # 'skience'\rParcourir une liste ou une chaîne (boucle for) for valeur in mesures: print(valeur)\rfor lettre in mot: print(lettre)\rMini-activité en équipe (20 min) Contexte : Une étudiante en biologie a mesuré la croissance d’une colonie bactérienne pendant 5 jours :\ncroissance = [0.8, 1.1, 1.5, 2.2, 2.9]\rTâches (en équipe de 2 ou 3) :\nAffichez la croissance moyenne. Trouvez le jour où la croissance dépasse 2.0. Affichez tous les jours où la croissance a augmenté par rapport à la veille. Ajoutez la valeur du jour 6 (valeur fictive) à la liste. Bonus : Créez une nouvelle liste avec uniquement les valeurs supérieures à 1.5.\nDéfi individuel (10 min) Demande à l’utilisateur de saisir une phrase. Ton programme doit :\nCompter le nombre de mots (en utilisant .split()) Afficher le mot le plus long phrase = input(\"Entrez une phrase : \")\rPour aller plus loin (facultatif) Triez une liste de données (.sort()) Comptez combien de fois un mot ou une valeur apparaît (.count())",
    "description": "Objectifs de la leçon Comprendre ce qu’est une liste et comment la manipuler Utiliser les chaînes de caractères comme des séquences Appliquer les connaissances à des données scientifiques simples Travailler en équipe sur une activité d’analyse de mesures Listes en Python Une liste est une collection ordonnée, modifiable, qui peut contenir différents types de données.\nDéfinir une liste : mesures = [12.1, 13.0, 12.8, 13.5]\rAccéder à un élément print(mesures[0]) # 12.",
    "tags": [],
    "title": "Listes et chaînes de caractères",
    "uri": "/semaine5/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e \rListes et chaînes de caractères",
    "content": "Objectifs d’apprentissage Manipuler des listes en Python Écrire une fonction pour calculer une moyenne mobile Visualiser l’effet du lissage sur une série de données Renforcer les notions de boucles, indices et opérations sur les listes Contexte scientifique En laboratoire, on mesure la concentration d’un produit chimique toutes les 2 minutes pendant une expérience de 20 minutes. Les mesures présentent des fluctuations dues à des imprécisions expérimentales. Pour lisser ces données et observer les tendances, on applique une moyenne mobile sur les résultats.\nDonnées de départ Voici les mesures de concentration (en mg/L) prises toutes les 2 minutes :\nmesures = [10.2, 9.8, 10.5, 10.0, 9.7, 10.1, 10.3, 10.0, 9.9, 10.2]\rTâches à réaliser Étape 1 – Affichage simple des données Afficher chaque mesure avec son indice et le temps correspondant (temps = indice × 2 minutes).\nExemple de sortie :\nTemps : 0 min — Mesure : 10.2 mg/L\rTemps : 2 min — Mesure : 9.8 mg/L\r...\rÉtape 2 – Fonction de moyenne mobile Écrire une fonction moyenne_mobile(liste, k) qui retourne une nouvelle liste contenant la moyenne mobile sur k valeurs consécutives. Exemple : avec k = 3, la moyenne mobile des trois premières valeurs est (10.2 + 9.8 + 10.5)/3 = 10.17. def moyenne_mobile(liste, k): resultats = [] for i in range(len(liste) - k + 1): moyenne = sum(liste[i:i+k]) / k resultats.append(moyenne) return resultats\rÉtape 3 – Comparaison avant/après Afficher les valeurs originales et les valeurs lissées (par exemple avec k = 3) côte à côte. Étape 4 – (Optionnel) Visualisation avec matplotlib Tracer deux courbes :\nla courbe des mesures originales la courbe des mesures lissées L’objectif est de bien voir l’effet du lissage.\nimport matplotlib.pyplot as plt temps = [i * 2 for i in range(len(mesures))] mesures_lissees = moyenne_mobile(mesures, 3) temps_lisse = [i * 2 + 2 for i in range(len(mesures_lissees))] # Décalage pour centrage plt.plot(temps, mesures, label=\"Mesures originales\") plt.plot(temps_lisse, mesures_lissees, label=\"Moyenne mobile (k=3)\") plt.xlabel(\"Temps (min)\") plt.ylabel(\"Concentration (mg/L)\") plt.legend() plt.title(\"Mesures expérimentales avec lissage\") plt.grid(True) plt.show()\rCritères de réussite La fonction moyenne_mobile est fonctionnelle et générale (k variable) Les boucles et les indices sont bien utilisés L’affichage est clair et informatif (Optionnel) Le graphique est lisible et correctement légendé",
    "description": "Objectifs d’apprentissage Manipuler des listes en Python Écrire une fonction pour calculer une moyenne mobile Visualiser l’effet du lissage sur une série de données Renforcer les notions de boucles, indices et opérations sur les listes Contexte scientifique En laboratoire, on mesure la concentration d’un produit chimique toutes les 2 minutes pendant une expérience de 20 minutes. Les mesures présentent des fluctuations dues à des imprécisions expérimentales. Pour lisser ces données et observer les tendances, on applique une moyenne mobile sur les résultats.",
    "tags": [],
    "title": "Activité 5 – Traitement d’une série de mesures et moyenne mobile",
    "uri": "/semaine5/atelier/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences",
    "content": "Objectifs de la leçon À la fin de cette leçon, vous devrez être capable de :\nExpliquer le rôle des fonctions dans un programme Définir une fonction avec ou sans paramètres Appeler une fonction dans un script Réutiliser une fonction pour éviter la répétition de code Comprendre la portée des variables (locale vs globale) Écrire des programmes clairs et efficaces demande de bien structurer son code. Les fonctions permettent de regrouper des blocs d’instructions qu’on peut exécuter plusieurs fois à différents endroits du programme. Elles rendent le code plus lisible, réutilisable et facile à tester.\nDéfinir une fonction Une fonction se définit avec le mot-clé def, suivi du nom de la fonction, de parenthèses et de deux-points.\ndef bonjour(): print(\"Bonjour!\")\rPour exécuter (appeler) cette fonction :\nbonjour()\rParamètres d’une fonction On peut rendre une fonction plus souple en lui donnant des paramètres : des valeurs qu’on lui transmet au moment de l’appel.\ndef saluer(nom): print(f\"Bonjour, {nom}!\")\rAppel de la fonction :\nsaluer(\"Marie\") saluer(\"Paul\")\rOn peut aussi passer plusieurs paramètres :\ndef calculer_tension(resistance, courant): tension = resistance * courant print(f\"La tension est de {tension} V\")\rAppel :\ncalculer_tension(10, 2)\rValeurs de retour (return) Une fonction peut retourner un résultat au lieu de seulement afficher quelque chose.\ndef calculer_tension(resistance, courant): return resistance * courant u = calculer_tension(10, 2) print(f\"Tension : {u} V\")\rCela permet de réutiliser le résultat dans un autre calcul ou de le manipuler.\nPortée des variables Les variables créées à l’intérieur d’une fonction sont locales à cette fonction. Ce qui signifie que seule la fonction peut utiliser la variable.\ndef exemple(): x = 5 print(x) exemple() # print(x) # Provoque une erreur : x n’existe pas ici\rCela permet d’éviter que des variables se mélangent entre différentes parties du programme.\nRésumé des bonnes pratiques Donner des noms clairs aux fonctions Une fonction doit faire une seule chose Éviter de trop dépendre de variables globales (variables à l’extérieur de la fonction Écrire un petit commentaire au-dessus de chaque fonction Mise en pratique (aperçu) Vous allez créer des fonctions pour modéliser des phénomènes simples (loi d’Ohm, formule de l’aire, conversion d’unités) et vous devrez les réutiliser dans un script principal.",
    "description": "Objectifs de la leçon À la fin de cette leçon, vous devrez être capable de :\nExpliquer le rôle des fonctions dans un programme Définir une fonction avec ou sans paramètres Appeler une fonction dans un script Réutiliser une fonction pour éviter la répétition de code Comprendre la portée des variables (locale vs globale) Écrire des programmes clairs et efficaces demande de bien structurer son code. Les fonctions permettent de regrouper des blocs d’instructions qu’on peut exécuter plusieurs fois à différents endroits du programme.",
    "tags": [],
    "title": "Fonctions simples et paramètres",
    "uri": "/semaine6/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e \rFonctions simples et paramètres",
    "content": "Objectif de l’atelier Apprendre à créer une fonction Python qui modélise une loi physique simple et l’utiliser pour explorer des situations concrètes dans un contexte scientifique.\nConsignes Travaillez à deux ou trois, discutez de chaque étape.\nTestez vos fonctions avec plusieurs valeurs.\nCommentez brièvement votre code.\nAjoutez une brève conclusion à la fin du notebook :\nQu’avez-vous observé? Quelle relation la fonction exprime-t-elle? Livrable À la fin de la séance, vous devez avoir un fichier .ipynb propre, documenté, et fonctionnel avec :\nLa fonction Python créée L’affichage des résultats Une conclusion en 2-3 phrases Choix de la loi physique Choisissez un seul des deux modèles suivants à implémenter :\nOption A – Loi d’Ohm (électricité) Formule : V = R × I\nV = tension (en volts) R = résistance (en ohms) I = courant (en ampères)\nÀ faire :\nCréez une fonction nommée calcul_tension(R, I) qui retourne la tension. Affichez un tableau des tensions pour un courant qui varie de 0 à 2 A, par pas de 0.1 A, pour une résistance de 10 ohms. Gérez les cas d’entrée invalides (ex. : valeurs négatives). Option B – Chute libre (sans frottement) Formule : h(t) = h₀ – ½·g·t² (g = 9.8 m/s²)\nh(t) = hauteur à un instant t h₀ = hauteur initiale t = temps en secondes\nÀ faire :\nCréez une fonction nommée calcul_position(h0, t) qui retourne la hauteur à l’instant t. Simulez la chute d’un objet depuis une hauteur de 20 m, à chaque 0.5 s, jusqu’à ce qu’il touche le sol. Affichez les résultats sous forme de tableau (temps et hauteur). Arrêtez la simulation automatiquement quand l’objet atteint le sol.",
    "description": "Objectif de l’atelier Apprendre à créer une fonction Python qui modélise une loi physique simple et l’utiliser pour explorer des situations concrètes dans un contexte scientifique.\nConsignes Travaillez à deux ou trois, discutez de chaque étape.\nTestez vos fonctions avec plusieurs valeurs.\nCommentez brièvement votre code.\nAjoutez une brève conclusion à la fin du notebook :\nQu’avez-vous observé? Quelle relation la fonction exprime-t-elle? Livrable À la fin de la séance, vous devez avoir un fichier .",
    "tags": [],
    "title": "Activité 6 - modélisation d’une loi physique (loi d’Ohm, chute libre).",
    "uri": "/semaine6/atelier/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences",
    "content": "Examen formatif Description Type : Activité formative\nDurée : 2h40\nBut : Révision collaborative, application active\nCette activité n’est pas notée, mais vous recevrez une rétroaction qualitative sur :\nLa clarté et la structure de votre code Votre capacité à repérer et expliquer des erreurs Consigne générale Seul ou en équipe de 2 ou 3, vous devez résoudre 3 exercices de programmation scientifique à l’aide de Jupyter Notebook. Chaque exercice fait appel à des concepts vus dans les semaines 1 à 6.\nRecommandation: À la fin de l’activité, chaque équipe fera une courte rétroaction sur les codes d’une autre équipe.\nExercice 1 – Réaction chimique Un script doit calculer la masse totale de produits d’une réaction chimique. Données d’entrée : deux masses (réactif A et réactif B). Affichage de la masse totale, avec vérification si elle dépasse une certaine valeur critique. Bonus : afficher un message d’alerte si la masse dépasse 50 g. Exercice 2 – Analyse de mesures Le programme doit demander d’entrer 4 mesures expérimentales (valeurs numériques) et calculer et afficher :\nLa moyenne La différence maximale entre deux valeurs Un message si une valeur est très éloignée de la moyenne Exercice 3 – Débogage en équipe Dans le script formatif.ipynb fourni, vous devez.\nIdentifier au moins 3 erreurs Corriger le code Ajouter les commentaires explicatifs Proposer une amélioration",
    "description": "Examen formatif Description Type : Activité formative\nDurée : 2h40\nBut : Révision collaborative, application active\nCette activité n’est pas notée, mais vous recevrez une rétroaction qualitative sur :\nLa clarté et la structure de votre code Votre capacité à repérer et expliquer des erreurs Consigne générale Seul ou en équipe de 2 ou 3, vous devez résoudre 3 exercices de programmation scientifique à l’aide de Jupyter Notebook. Chaque exercice fait appel à des concepts vus dans les semaines 1 à 6.",
    "tags": [],
    "title": "Examen 1 (30%)",
    "uri": "/semaine7/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences",
    "content": "Objectifs de la leçon À la fin de cette leçon, vous devrez être capable de :\nCréer et manipuler une liste pour stocker une collection ordonnée de données Créer un dictionnaire pour représenter des associations clé-valeur Choisir la structure appropriée selon le contexte scientifique Listes (list) Une liste est une structure ordonnée et modifiable.\nCréation d’une liste temperatures = [22.1, 23.5, 21.8] prenoms = [\"louise\", \"georges\", \"mohammed\", \"julie\"]\rAccès aux éléments print(temperatures[0]) # Affiche : 22.1 print(prenoms[2]) # Affiche : mohammed\rAjout, suppression et modification temperatures.append(24.0) # Ajout temperatures[1] = 23.0 # Modification del temperatures[0] # Suppression\rParcours d’une liste for t in temperatures: print(t)\rDictionnaires (dict) Un dictionnaire permet d’associer une clé à une valeur. Il est non ordonné (jusqu’à Python 3.6) mais très utile pour organiser des données complexes.\nExemple element = { \"symbole\": \"O\", \"nom\": \"Oxygène\", \"masse\": 15.999 }\rUtilisations typiques Propriétés d’un élément chimique Informations biologiques sur une espèce Données de capteurs (clé = date, valeur = mesure) Combinaison des deux structures On peut combiner les structures entre elles :\nListe de dictionnaires especes = [ {\"nom\": \"Grenouille\", \"taille\": 9}, {\"nom\": \"Salamandre\", \"taille\": 15} ]\rComparaison des structures Structure Ordonnée Modifiable Accès par Utilisation typique Liste Oui Oui Index Série de données homogènes (températures, notes, etc.) Dictionnaire Non* Oui Clé Représenter des objets complexes (éléments, espèces, mesures par date) * En pratique, depuis Python 3.7+, l’ordre des clés est conservé.",
    "description": "Objectifs de la leçon À la fin de cette leçon, vous devrez être capable de :\nCréer et manipuler une liste pour stocker une collection ordonnée de données Créer un dictionnaire pour représenter des associations clé-valeur Choisir la structure appropriée selon le contexte scientifique Listes (list) Une liste est une structure ordonnée et modifiable.\nCréation d’une liste temperatures = [22.1, 23.5, 21.8] prenoms = [\"louise\", \"georges\", \"mohammed\", \"julie\"]\rAccès aux éléments print(temperatures[0]) # Affiche : 22.",
    "tags": [],
    "title": "Structures de données (listes, dictionnaires)",
    "uri": "/semaine8/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e \rStructures de données (listes, dictionnaires)",
    "content": "Sujet Thème : Structures de données (listes et dictionnaires) Durée prévue : 1 h 30 à 1 h 50 Travail en équipe de 2 ou 3\nObjectifs pédagogiques Savoir représenter des entités scientifiques sous forme de structures de données Python Utiliser les dictionnaires pour associer des clés et des valeurs significatives Accéder et modifier les éléments d’une structure Appliquer ces compétences à des situations authentiques en sciences Contexte Les structures de données comme les dictionnaires et les listes sont très utiles pour représenter de l’information scientifique structurée. Cette activité propose trois mini-situations où vous devrez utiliser ces outils pour modéliser et manipuler des données pertinentes.\nPartie 1 – Mini-tableau périodique (Dictionnaire) On souhaite représenter certains éléments du tableau périodique dans un dictionnaire Python. Chaque élément est représenté par son symbole, et on veut stocker son nom et sa masse atomique.\nelements = { \"H\": {\"nom\": \"Hydrogène\", \"masse\": 1.008}, \"O\": {\"nom\": \"Oxygène\", \"masse\": 15.999}, \"C\": {\"nom\": \"Carbone\", \"masse\": 12.011} }\rTâches\nAjouter un nouvel élément (N pour azote, masse 14.007) Afficher la masse atomique de l’oxygène Afficher tous les symboles et noms avec une boucle Partie 2 – Masse molaire d’une molécule (Listes et dictionnaire) Une molécule est une liste d’atomes, et on veut calculer sa masse molaire à partir des masses de ses éléments.\neau = [\"H\", \"H\", \"O\"] # molécule d’eau\rTâches\nUtiliser le dictionnaire précédent pour calculer la masse molaire de la molécule d’eau Tester avec une autre molécule simple comme le dioxyde de carbone ([\"C\", \"O\", \"O\"]) Ajouter une fonction masse_molaire(molecule) qui retourne la masse totale Partie 3 – Données biologiques (Liste de dictionnaires) On veut représenter des observations d’un biologiste sous forme de structures Python. Chaque observation contient le nom d’une espèce, sa taille moyenne (cm) et son habitat.\nobservations = [ {\"espèce\": \"Grenouille verte\", \"taille_cm\": 9, \"habitat\": \"Marais\"}, {\"espèce\": \"Salamandre tachetée\", \"taille_cm\": 15, \"habitat\": \"Forêt\"}, {\"espèce\": \"Triton du nord\", \"taille_cm\": 10, \"habitat\": \"Étang\"} ]\rTâches\nAfficher les espèces vivant en forêt Calculer la taille moyenne de toutes les espèces Trier les observations par taille (optionnel) Résultat attendu Un script bien structuré utilisant :\nau moins un dictionnaire imbriqué une ou deux fonctions simples des boucles pour le traitement des données",
    "description": "Sujet Thème : Structures de données (listes et dictionnaires) Durée prévue : 1 h 30 à 1 h 50 Travail en équipe de 2 ou 3\nObjectifs pédagogiques Savoir représenter des entités scientifiques sous forme de structures de données Python Utiliser les dictionnaires pour associer des clés et des valeurs significatives Accéder et modifier les éléments d’une structure Appliquer ces compétences à des situations authentiques en sciences Contexte Les structures de données comme les dictionnaires et les listes sont très utiles pour représenter de l’information scientifique structurée.",
    "tags": [],
    "title": "Activité 8 - tableau périodique, molécule, données biologiques",
    "uri": "/semaine8/atelier/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences",
    "content": "Objectifs d’apprentissage À la fin de cette leçon, vous devrez être capable de :\nComprendre le rôle de NumPy pour le calcul scientifique rapide avec des tableaux. Utiliser Pandas pour manipuler des tableaux de données (DataFrame). Charger des données à partir d’un fichier CSV et faire des analyses simples. Appliquer des opérations mathématiques et statistiques de base. Pourquoi utiliser NumPy et Pandas? Python est très puissant pour l’analyse de données scientifiques. Deux bibliothèques sont incontournables :\nNumPy (Numerical Python) : pour le calcul rapide sur des tableaux de données numériques. Pandas : pour organiser, filtrer et analyser des tableaux de données avec des étiquettes (colonnes/indices). Quand utiliser quoi? Tu veux faire des calculs rapides, des matrices, des moyennes, des sinusoïdes → NumPy Tu veux lire un fichier de données expérimentales, calculer une moyenne par groupe, trier ou filtrer → Pandas Introduction à NumPy Importation de la bibliothèque import numpy as np\rCréation d’un tableau (array) a = np.array([1, 2, 3, 4]) print(a)\rOpérations mathématiques sur des tableaux b = a * 2 # Multiplie chaque élément par 2 c = np.sqrt(a) # Racine carrée de chaque élément\rQuelques fonctions utiles np.mean(a) # Moyenne np.max(a) # Maximum np.min(a) # Minimum np.std(a) # Écart-type\rTableaux multidimensionnels matrice = np.array([[1, 2], [3, 4]]) print(matrice.shape) # Affiche les dimensions (2 lignes, 2 colonnes)\rIntroduction à Pandas Importation de la bibliothèque import pandas as pd\rLecture d’un fichier CSV df = pd.read_csv(\"donnees.csv\") print(df.head()) # Affiche les 5 premières lignes\rAccès à une colonne df[\"Température\"]\rStatistiques de base df.mean() df[\"pH\"].max()\rFiltrage des données df[df[\"Température\"] \u003e 25] # Sélectionne les lignes où la température dépasse 25\rMoyenne par groupe df.groupby(\"Échantillon\")[\"Concentration\"].mean()\rComparaison Pandas vs NumPy Tâche NumPy Pandas Calculs numériques rapides ✅ ❌ (moins rapide) Données avec étiquettes ❌ ✅ (DataFrame avec colonnes) Lecture de fichiers CSV ❌ ✅ Visualisation rapide ❌ ✅ (avec .plot() ou matplotlib) Conclusion NumPy est idéal pour les tableaux numériques purs. Pandas est parfait pour manipuler des données tabulaires structurées comme celles qu’on retrouve en laboratoire ou en recherche scientifique. Ces deux bibliothèques sont souvent utilisées ensemble.",
    "description": "Objectifs d’apprentissage À la fin de cette leçon, vous devrez être capable de :\nComprendre le rôle de NumPy pour le calcul scientifique rapide avec des tableaux. Utiliser Pandas pour manipuler des tableaux de données (DataFrame). Charger des données à partir d’un fichier CSV et faire des analyses simples. Appliquer des opérations mathématiques et statistiques de base. Pourquoi utiliser NumPy et Pandas? Python est très puissant pour l’analyse de données scientifiques.",
    "tags": [],
    "title": "Introduction à NumPy et Pandas",
    "uri": "/semaine9/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e \rIntroduction à NumPy et Pandas",
    "content": "Objectif Utiliser NumPy pour effectuer des calculs sur des données numériques, et Pandas pour analyser un fichier CSV contenant des données environnementales.\nDurée : Entre 45 et 60 minutes, à faire en équipe de 2.\nPartie 1 – Calculs avec NumPy Crée un tableau NumPy contenant les températures suivantes (en °C) mesurées chaque heure : import numpy as np temperatures = np.array([18.5, 19.0, 20.1, 21.3, 22.8, 23.4, 22.9, 21.0])\rCalcule et affiche :\nLa température moyenne L’écart-type La température maximale Toutes les températures converties en degrés Fahrenheit (formule : F = C × 9/5 + 32) Partie 2 – Analyse avec Pandas Télécharge le fichier capteurs.csv (fourni par l’enseignant), contenant des mesures de capteurs environnementaux : Heure,Température,Humidité,pH\r08:00,18.5,55,6.8\r09:00,19.0,53,6.9\r10:00,20.1,51,7.0\r11:00,21.3,49,7.1\r12:00,22.8,47,7.1\r13:00,23.4,45,7.2\r14:00,22.9,44,7.3\r15:00,21.0,46,7.2\rUtilise Pandas pour :\nLire le fichier Afficher les 5 premières lignes Afficher la moyenne de chaque variable Trouver à quelle heure la température est la plus élevée Filtrer les lignes où le pH est supérieur à 7.0 Bonus : ajoute une nouvelle colonne Indice_confort selon cette règle :\nSi température ≥ 22 et humidité \u003c 50 → “Élevé” Sinon → “Modéré” Résultat attendu (exemples) Température moyenne : 21.125 °C Températures en Fahrenheit : [65.3 66.2 68.2 ...] Heure avec température max : 13:00",
    "description": "Objectif Utiliser NumPy pour effectuer des calculs sur des données numériques, et Pandas pour analyser un fichier CSV contenant des données environnementales.\nDurée : Entre 45 et 60 minutes, à faire en équipe de 2.\nPartie 1 – Calculs avec NumPy Crée un tableau NumPy contenant les températures suivantes (en °C) mesurées chaque heure : import numpy as np temperatures = np.array([18.5, 19.0, 20.1, 21.3, 22.8, 23.4, 22.9, 21.0])\rCalcule et affiche :",
    "tags": [],
    "title": "Activité 9 - Analyse de données environnementales",
    "uri": "/semaine9/atelier/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences",
    "content": "Objectif de la leçon Apprendre à tracer des graphiques simples en 2D à partir de données scientifiques à l’aide de la bibliothèque matplotlib.\nDurée : 50 minutes de théorie + 1 h 50 de pratique\nContexte Les scientifiques visualisent souvent des données sous forme de graphiques pour interpréter plus facilement des tendances, des anomalies ou des corrélations. Python permet de produire des graphiques de haute qualité grâce à la bibliothèque matplotlib.\nDans cette leçon, on apprend à créer des graphiques de base : courbe, points, étiquettes et titres. On travaille dans Jupyter Notebook à l’intérieur de l’environnement Anaconda.\nNotions abordées Importation de la bibliothèque\nimport matplotlib.pyplot as plt\rTracé simple d’une courbe\nx = [0, 1, 2, 3, 4] y = [0, 1, 4, 9, 16] plt.plot(x, y) plt.show()\rAjout de titres et étiquettes\nplt.title(\"Croissance quadratique\") plt.xlabel(\"Temps (s)\") plt.ylabel(\"Distance (m)\")\rPersonnalisation de la courbe\nStyle de ligne, couleur, marqueur plt.plot(x, y, color='green', linestyle='--', marker='o')\rTracer plusieurs courbes sur un même graphique\nplt.plot(x, y, label=\"objet A\") plt.plot(x, [i**1.5 for i in x], label=\"objet B\") plt.legend()\rEnregistrement du graphique\nplt.savefig(\"mon_graphique.png\")\rExercice pratique Titre : Température d’un liquide en fonction du temps But : À partir des données fournies, tracer la courbe de température d’un liquide chauffé pendant 10 minutes.\nDonnées :\ntemps = [0, 2, 4, 6, 8, 10] temperature = [20, 35, fifty, 65, 72, 74] # Erreur volontaire à corriger\rRésultat attendu Un graphique clair et lisible du type :\nTitre : Température du liquide en fonction du temps Axe X : Temps (min) Axe Y : Température (°C) Ligne rouge en pointillés avec des cercles Fichier PNG enregistré dans le dossier de travail",
    "description": "Objectif de la leçon Apprendre à tracer des graphiques simples en 2D à partir de données scientifiques à l’aide de la bibliothèque matplotlib.\nDurée : 50 minutes de théorie + 1 h 50 de pratique\nContexte Les scientifiques visualisent souvent des données sous forme de graphiques pour interpréter plus facilement des tendances, des anomalies ou des corrélations. Python permet de produire des graphiques de haute qualité grâce à la bibliothèque matplotlib.",
    "tags": [],
    "title": "Visualisation de données avec matplotlib (bases)",
    "uri": "/semaine10/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e \rVisualisation de données avec matplotlib (bases)",
    "content": "Objectif : Utiliser matplotlib pour tracer une courbe représentant l’évolution de la température dans le temps, à partir de données expérimentales.\nActivité : Courbe de refroidissement d’un liquide Contexte\nUn laboratoire a mesuré la température d’un liquide en refroidissement toutes les 5 minutes pendant une heure. On souhaite visualiser la courbe de refroidissement pour interpréter le comportement thermique du système.\nConsignes Importer la bibliothèque matplotlib.pyplot et configurer l’affichage dans Jupyter Notebook. Tracer un graphique en ligne (line plot) de la température en fonction du temps. Ajouter un titre, des étiquettes d’axes et une grille. Ajouter un point de départ et un point final avec des marqueurs distinctifs. En bonus : ajouter une ligne horizontale représentant la température ambiante (ex. 22 °C). Travail d’équipe (formative)\nDiscuter des anomalies possibles dans les données. Comment cette courbe pourrait-elle être utilisée pour modéliser un phénomène (loi de Newton du refroidissement, par exemple) ? Données fournies Les données sont fournies sous forme de deux listes Python :\n# Temps en minutes temps = [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60] # Température en degrés Celsius temperature = [90, 78, 69, 62, 56, 52, 48, 45, 43, 41, 40, 39.5, 39]",
    "description": "Objectif : Utiliser matplotlib pour tracer une courbe représentant l’évolution de la température dans le temps, à partir de données expérimentales.\nActivité : Courbe de refroidissement d’un liquide Contexte\nUn laboratoire a mesuré la température d’un liquide en refroidissement toutes les 5 minutes pendant une heure. On souhaite visualiser la courbe de refroidissement pour interpréter le comportement thermique du système.\nConsignes Importer la bibliothèque matplotlib.pyplot et configurer l’affichage dans Jupyter Notebook.",
    "tags": [],
    "title": "Activité 10 - tracer un graphique de données expérimentales.",
    "uri": "/semaine10/atelier/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences",
    "content": "Objectif de la leçon Apprendre à lire et écrire des fichiers .csv (valeurs séparées par des virgules) avec Python pour automatiser le traitement de données scientifiques (ex. : résultats de laboratoire, données expérimentales).\nQu’est-ce qu’un fichier CSV? Un fichier texte simple où chaque ligne contient une série de valeurs séparées par des virgules (ou des points-virgules). Utilisé pour représenter des tableaux de données : résultats d’expériences, séries de mesures, etc. Peut être ouvert avec un tableur comme Excel ou LibreOffice Calc. Exemple de fichier mesures.csv :\ntemps,temperature 0,22.5 5,24.1 10,26.3 15,28.0\rLecture de fichier CSV sans module (méthode simple avec open()) with open(\"mesures.csv\", \"r\") as fichier: lignes = fichier.readlines() for ligne in lignes[1:]: # Ignorer l’en-tête temps, temperature = ligne.strip().split(\",\") print(f\"Temps : {temps} min, Température : {temperature} °C\")\rÉcriture de données dans un fichier CSV with open(\"resultats.csv\", \"w\") as fichier: fichier.write(\"temps,temperature\\n\") fichier.write(\"0,22.5\\n\") fichier.write(\"5,24.1\\n\")\rBonne pratique : toujours fermer le fichier (ou utiliser with)",
    "description": "Objectif de la leçon Apprendre à lire et écrire des fichiers .csv (valeurs séparées par des virgules) avec Python pour automatiser le traitement de données scientifiques (ex. : résultats de laboratoire, données expérimentales).\nQu’est-ce qu’un fichier CSV? Un fichier texte simple où chaque ligne contient une série de valeurs séparées par des virgules (ou des points-virgules). Utilisé pour représenter des tableaux de données : résultats d’expériences, séries de mesures, etc. Peut être ouvert avec un tableur comme Excel ou LibreOffice Calc.",
    "tags": [],
    "title": "Lecture/écriture de fichiers texte (CSV)",
    "uri": "/semaine11/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e \rLecture/écriture de fichiers texte (CSV)",
    "content": "Objectif pédagogique Apprendre à lire et traiter un fichier contenant des données expérimentales, effectuer des calculs simples, et produire un résumé statistique à l’aide de Python.\nExercice 1 : Analyse de données de température Contexte : Un technicien a mesuré la température d’un liquide toutes les 5 minutes pendant 30 minutes. Les données sont enregistrées dans un fichier CSV.\nÉtapes :\nTélécharger et lire le fichier donnees_temp.csv fourni par l’enseignant.\nAfficher les données ligne par ligne, avec mise en forme : « À t = 10 min, T = 25.8 °C »\nCalculer la température moyenne à partir des données lues.\nÉcrire un nouveau fichier analyse.csv qui contient :\nUne colonne « temps » Une colonne « température » Une colonne « écart à la moyenne » Bonus : Tracer les données avec matplotlib (si le temps le permet).\nÉléments d’évaluation formative (en équipe)\nCapacité à extraire et utiliser les données du fichier Respect des bonnes pratiques (indentation, noms de variables, commentaires) Clarté du fichier CSV généré Travail collaboratif dans la répartition des tâches Exercice 2 : Impact de la température sur le pH de l’eau Contexte : Une équipe d’étudiants en chimie a réalisé une série de mesures du pH d’un échantillon d’eau à différentes températures, à raison de 3 mesures par température. Les données ont été consignées dans un fichier CSV.\nContenu du fichier ph_mesures.csv :\nTempérature (°C),Mesure1,Mesure2,Mesure3 10,7.12,7.10,7.13 15,7.05,7.06,7.04 20,6.98,6.97,6.99 25,6.92,6.91,6.93 30,6.85,6.86,6.87\rConsignes Lecture du fichier :\nUtiliser Python (avec csv ou pandas) pour lire les données. Traitement des données :\nCalculer la moyenne du pH pour chaque température. Conserver les résultats dans une nouvelle structure de données (liste ou dictionnaire). Analyse simple :\nIdentifier s’il y a une tendance du pH en fonction de la température. Ajouter une colonne “Moyenne_pH” aux données. Affichage des résultats :\nAfficher les résultats dans une table lisible. Écrire les résultats dans un nouveau fichier CSV : ph_moyennes.csv. Extension (facultative) :\nTracer un graphique température vs moyenne du pH à l’aide de matplotlib. Livrable attendu : Un script Python complet et bien commenté, ainsi qu’un fichier CSV de sortie contenant les moyennes.\nDiscussion en équipe (20 minutes) : En petits groupes (2-3), comparer les résultats, discuter de la fiabilité des mesures et de l’impact de la température sur le pH de l’eau. Chaque équipe propose une conclusion en 2-3 phrases à partager au groupe.",
    "description": "Objectif pédagogique Apprendre à lire et traiter un fichier contenant des données expérimentales, effectuer des calculs simples, et produire un résumé statistique à l’aide de Python.\nExercice 1 : Analyse de données de température Contexte : Un technicien a mesuré la température d’un liquide toutes les 5 minutes pendant 30 minutes. Les données sont enregistrées dans un fichier CSV.\nÉtapes :\nTélécharger et lire le fichier donnees_temp.csv fourni par l’enseignant.",
    "tags": [],
    "title": "Activité 11 - Traitement de résultats de laboratoire",
    "uri": "/semaine11/atelier/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences",
    "content": "Examen formatif Description Type : Activité formative\nDurée : 2h40\nBut : Révision collaborative, application active\nModalité : Individuelle – Accès aux notes de cours permis, mais aucun partage entre étudiants. Outils autorisés : Jupyter Notebook avec Anaconda (numpy, pandas, matplotlib intégrés)\nCette activité n’est pas notée, mais vous recevrez une rétroaction qualitative sur :\nLa clarté et la structure de votre code Votre capacité à repérer et expliquer des erreurs Notions évaluées\nFonctions définies par l’utilisateur Structures de données (listes et dictionnaires) Bibliothèques numpy et pandas Visualisation avec matplotlib Lecture/écriture de fichiers CSV Consigne générale Contexte scientifique : Étude d’une expérience de fermentation Un laboratoire a mesuré la concentration de dioxyde de carbone (CO₂) produite par un mélange de levure et de sucre dans un récipient fermé, à intervalles de 10 minutes pendant 2 heures. Ces données ont été enregistrées dans un fichier CSV.\nFichier fourni : fermentation_co2.csv Contenu du fichier :\nTemps (min),CO2 (mg/L) 0,0 10,5.2 20,10.4 30,17.5 40,25.1 50,32.0 60,38.5 70,43.2 80,46.0 90,48.1 100,49.2 110,49.8 120,50.0\rPartie 1 – Lecture et traitement des données (30 %) Lire le fichier CSV à l’aide de pandas.\nConvertir la colonne CO2 en tableau numpy et calculer :\nla moyenne l’écart-type la variation maximale entre deux mesures consécutives Créer un dictionnaire associant chaque temps à la variation de CO₂ depuis la mesure précédente.\nPartie 2 – Fonctions personnalisées (25 %) Écrire une fonction variation(co2) qui prend une liste de valeurs de CO₂ et retourne une nouvelle liste des variations absolues entre chaque mesure et la précédente. Écrire une fonction alerte_variation(var, seuil) qui retourne les indices où la variation dépasse un seuil donné (par exemple 5 mg/L). Partie 3 – Visualisation des données (20 %) Tracer un graphique montrant la concentration de CO₂ en fonction du temps. Ajouter au graphique une ligne horizontale représentant la moyenne de CO₂. Ajouter une annotation (flèche ou texte) au moment où la variation maximale s’est produite. Partie 4 – Exportation des résultats (15 %) Ajouter une colonne “Variation_CO2” au DataFrame.\nÉcrire un nouveau fichier fermentation_analyse.csv avec les colonnes :\nTemps (min) CO2 (mg/L) Variation_CO2 Partie 5 – Interprétation et conclusion (10 %) En 4 à 5 lignes, résumez :\nL’allure générale de l’évolution du CO₂ Le moment où l’activité fermentaire est la plus intense Une hypothèse sur le ralentissement ou la stabilisation observée Critères de correction (résumé) Section Pondération Éléments évalués Lecture et traitement 30 % Lecture correcte, calculs numpy, dictionnaire Fonctions 25 % Syntaxe, utilité, bon usage des structures Graphique 20 % Clarté, précision, annotations Fichier exporté 15 % Structure correcte, données exactes Interprétation scientifique 10 % Clarté, pertinence de l’analyse",
    "description": "Examen formatif Description Type : Activité formative\nDurée : 2h40\nBut : Révision collaborative, application active\nModalité : Individuelle – Accès aux notes de cours permis, mais aucun partage entre étudiants. Outils autorisés : Jupyter Notebook avec Anaconda (numpy, pandas, matplotlib intégrés)\nCette activité n’est pas notée, mais vous recevrez une rétroaction qualitative sur :\nLa clarté et la structure de votre code Votre capacité à repérer et expliquer des erreurs Notions évaluées",
    "tags": [],
    "title": "Examen 2 (30%)",
    "uri": "/semaine12/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences",
    "content": "Remue-méninges et planification # Fiche de projet final – Programmation en sciences avec Python ## Informations de l'étudiant - **Nom :** - **Date :** --- ## 1. Titre du projet *(Donne un titre clair et descriptif à ton projet)* --- ## 2. Objectif du projet *(Explique en une ou deux phrases ce que ton programme permettra d’analyser, de simuler ou de résoudre.)* --- ## 3. Description du fonctionnement prévu - **Entrées attendues :** *(Quelles données l’utilisateur devra-t-il fournir?)* - **Traitement effectué :** *(Que fera ton programme avec les données?)* - **Sorties générées :** *(Quels résultats ou visualisations seront produits?)* --- ## 4. Plan de développement | Étape | Description | Échéancier prévu | |-------|-------------|------------------| | 1 | | | | 2 | | | | 3 | | | --- ## 5. Fonctions ou modules prévus *(Liste les fonctions ou sections principales de ton programme)* - - - --- ## 6. Obstacles ou questions *(Y a-t-il des éléments que tu ne maîtrises pas encore? Des données difficiles à trouver?)* --- ## 7. Format prévu pour la présentation finale *(Coche ou indique le format souhaité)* - [ ] Jupyter Notebook (avec explications dans les cellules Markdown) - [ ] Démonstration orale en classe - [ ] Capsule vidéo préenregistrée --- ## 8. Autres commentaires *(Facultatif – Ajoute tout ce qui pourrait aider à mieux comprendre ton projet.)*",
    "description": "Remue-méninges et planification # Fiche de projet final – Programmation en sciences avec Python ## Informations de l'étudiant - **Nom :** - **Date :** --- ## 1. Titre du projet *(Donne un titre clair et descriptif à ton projet)* --- ## 2. Objectif du projet *(Explique en une ou deux phrases ce que ton programme permettra d’analyser, de simuler ou de résoudre.)* --- ## 3. Description du fonctionnement prévu - **Entrées attendues :** *(Quelles données l’utilisateur devra-t-il fournir?",
    "tags": [],
    "title": "Introduction au projet final (40%)",
    "uri": "/semaine13/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e \rIntroduction au projet final (40%)",
    "content": "Consigne du projet final Contexte : Dans ce projet, vous allez analyser l’impact de la consommation de caféine sur la fréquence cardiaque. Les données collectées concernent la fréquence cardiaque de quatre sujets avant et après consommation de café à des intervalles de 30 minutes.\nObjectifs Importer et manipuler les données : Vous allez charger les données dans un DataFrame pandas à partir du fichier CSV fourni et effectuer un traitement pour extraire les informations pertinentes. Analyser la variation de la fréquence cardiaque après la consommation de café. Visualiser les tendances de la fréquence cardiaque pour chaque sujet avec un graphique linéaire, en mettant en évidence l’effet de la consommation de café sur la fréquence cardiaque. Faire des comparaisons entre les sujets et interpréter les résultats. Vous allez calculer des statistiques descriptives (moyenne, écart-type) et identifier les variations notables dans les données. Rédiger une conclusion sur l’impact de la caféine sur la fréquence cardiaque, en basant votre analyse sur les résultats obtenus. Consignes spécifiques : Lecture et traitement des données :\nImportez les données à l’aide de pandas et affichez un résumé des données. Utilisez numpy pour effectuer des calculs comme la moyenne et l’écart-type de la fréquence cardiaque pour chaque sujet avant et après l’ingestion de café. Création des fonctions :\nCréez une fonction variation(frequence) qui calcule les variations de fréquence cardiaque entre les mesures (avant et après). Créez une fonction analyser_impact(frequences_avant, frequences_apres) qui retourne la différence moyenne de la fréquence cardiaque et des statistiques de variation. Visualisation :\nUtilisez matplotlib pour tracer l’évolution de la fréquence cardiaque pour chaque sujet avant et après l’ingestion de café. Ajoutez une ligne horizontale pour la fréquence cardiaque moyenne avant consommation et une autre pour la fréquence après consommation. Exportation :\nExportez un fichier CSV contenant les résultats de votre analyse, incluant les variations de fréquence cardiaque pour chaque sujet. Données : Le fichier CSV problematique_1_cafeine.csv contient les données à analyser. Il est structuré comme suit :\nSujet : Nom du sujet (A, B, C, D) Temps (min) : Temps écoulé depuis le début de l’expérience (en minutes) Frequence (bpm) : Fréquence cardiaque (battements par minute) Critères d’évaluation : Précision de l’analyse : Exactitude des calculs et des interprétations statistiques. Qualité du code : Clarté et organisation du code, utilisation adéquate des structures de données (pandas, numpy). Visualisation : Graphiques clairs et pertinents, avec une bonne utilisation de matplotlib. Clarté de la conclusion : Interprétation logique des résultats et conclusion sur l’effet de la caféine sur la fréquence cardiaque. Format du projet : Délai : Le projet est à rendre dans trois semaines (fin de la semaine 15).\nLivrables :\nUn notebook Jupyter contenant le code et les analyses. Le fichier CSV exporté avec les résultats. Un document PDF ou une section dans le notebook avec la conclusion. Ressources : Pandas : https://pandas.pydata.org/ Matplotlib : https://matplotlib.org/",
    "description": "Consigne du projet final Contexte : Dans ce projet, vous allez analyser l’impact de la consommation de caféine sur la fréquence cardiaque. Les données collectées concernent la fréquence cardiaque de quatre sujets avant et après consommation de café à des intervalles de 30 minutes.\nObjectifs Importer et manipuler les données : Vous allez charger les données dans un DataFrame pandas à partir du fichier CSV fourni et effectuer un traitement pour extraire les informations pertinentes.",
    "tags": [],
    "title": "Projet: Effet de la caféine sur la fréquence cardiaque",
    "uri": "/semaine13/projet1/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e \rIntroduction au projet final (40%)",
    "content": "Consigne du projet final Contexte : Dans ce projet, vous allez analyser la cinétique d’une réaction chimique en utilisant des données simulées de la concentration d’un réactif au cours du temps. Ces données vous permettront de déterminer la vitesse de la réaction et d’observer l’évolution de la concentration.\nObjectifs : Importer et manipuler les données : Charger les données à partir du fichier CSV fourni, puis traiter et préparer les informations pour l’analyse. Analyser la cinétique de la réaction chimique : Déterminer l’évolution de la concentration en fonction du temps et estimer des paramètres de la réaction (comme la vitesse de réaction). Visualiser les données avec un graphique montrant l’évolution de la concentration en fonction du temps. Rédiger une conclusion : Basée sur l’analyse des résultats, vous devrez expliquer la forme de la courbe de concentration et déterminer la nature de la réaction (par exemple, réaction de premier ordre, second ordre, etc.). Consignes spécifiques : Lecture et traitement des données :\nImportez les données à l’aide de pandas et affichez un résumé des données. Utilisez numpy pour effectuer des calculs comme la variation moyenne de la concentration entre chaque mesure. Création des fonctions :\nCréez une fonction taux_reaction(concentration_initiale, concentration_finale, temps) qui calcule la vitesse de la réaction en fonction des concentrations initiale et finale et du temps. Créez une fonction analyse_reaction(temps, concentrations) qui permet d’analyser la courbe et de déterminer la nature de la réaction (ordre de réaction). Visualisation :\nUtilisez matplotlib pour tracer la courbe de la concentration du réactif en fonction du temps. Ajoutez une ligne pour la concentration initiale, la concentration finale et tracez la pente de la courbe si applicable. Exportation :\nExportez un fichier CSV contenant les résultats de votre analyse, incluant la concentration du réactif à chaque instant et les vitesses de réaction calculées. Données : Le fichier CSV problematique_3_reaction.csv contient les données à analyser. Il est structuré comme suit :\nTemps (s) : Temps écoulé depuis le début de la réaction (en secondes) Concentration (mol/L) : Concentration du réactif à chaque instant de temps mesuré Critères d’évaluation : Précision de l’analyse : Exactitude des calculs et des interprétations des résultats. Qualité du code : Clarté et organisation du code, utilisation appropriée des bibliothèques (pandas, numpy). Visualisation : Graphiques clairs et pertinents, avec une bonne utilisation de matplotlib. Interprétation des résultats : Excellente capacité à interpréter les données et à déterminer la nature de la réaction chimique. Format du projet : Délai : Le projet est à rendre dans trois semaines (fin de la semaine 15).\nLivrables :\nUn notebook Jupyter contenant le code et les analyses. Le fichier CSV exporté avec les résultats. Un document PDF ou une section dans le notebook avec la conclusion sur la cinétique de la réaction. Ressources : Pandas : https://pandas.pydata.org/ Matplotlib : https://matplotlib.org/",
    "description": "Consigne du projet final Contexte : Dans ce projet, vous allez analyser la cinétique d’une réaction chimique en utilisant des données simulées de la concentration d’un réactif au cours du temps. Ces données vous permettront de déterminer la vitesse de la réaction et d’observer l’évolution de la concentration.\nObjectifs : Importer et manipuler les données : Charger les données à partir du fichier CSV fourni, puis traiter et préparer les informations pour l’analyse.",
    "tags": [],
    "title": "Projet: Cinétique d'une réaction chimique",
    "uri": "/semaine13/projet2/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e \rIntroduction au projet final (40%)",
    "content": "Consigne du projet final Contexte : Une équipe d’étudiants a participé à un programme d’entraînement visant à améliorer leurs performances en course à pied. Des tests de temps de course (sur une même distance) ont été réalisés avant et après le programme. Vous devez analyser ces données pour déterminer si le programme a été efficace.\nObjectifs : Importer et manipuler les données : Charger les données à partir d’un fichier CSV, puis préparer les données pour l’analyse. Comparer les performances avant et après l’entraînement. Visualiser les résultats de manière claire et significative. Interpréter les résultats pour conclure sur l’efficacité du programme d’entraînement. Consignes spécifiques : Lecture et traitement des données :\nCharger les données avec pandas. Calculer la différence entre les temps “avant” et “après” pour chaque élève. Ajouter une colonne \"Amélioration\" (temps avant - temps après). Création de fonctions :\nCréez une fonction calculer_amelioration(df) qui retourne les améliorations individuelles et les statistiques globales (moyenne, écart-type). Créez une fonction interpreter_resultats(améliorations) qui détermine si l’amélioration est significative pour l’ensemble des participants. Visualisation avec matplotlib :\nDiagramme en barres comparant les temps “avant” et “après” pour chaque élève. Histogramme des améliorations individuelles. Option : tracer une ligne horizontale représentant l’amélioration moyenne. Exportation :\nExportez un fichier CSV avec les colonnes suivantes : Nom, Avant, Après, Amélioration. Données : Le fichier problematique_4_course.csv contient les temps de course (en secondes) de plusieurs élèves avant et après un programme d’entraînement. Colonnes :\nNom Avant (s) Apres (s) Critères d’évaluation : Précision de l’analyse : Calculs corrects et cohérence des conclusions. Qualité du code : Code clair, bien commenté et bien structuré. Visualisation : Graphiques clairs, bien étiquetés, pertinents. Interprétation : Interprétation logique, soutenue par les données, sur l’efficacité du programme. Format du projet : Durée : Projet à remettre à la fin de la semaine 15.\nLivrables :\nUn fichier .ipynb (notebook Jupyter) avec votre analyse complète. Le fichier CSV exporté avec les résultats. Une section “Conclusion” claire dans le notebook ou en fichier PDF séparé.",
    "description": "Consigne du projet final Contexte : Une équipe d’étudiants a participé à un programme d’entraînement visant à améliorer leurs performances en course à pied. Des tests de temps de course (sur une même distance) ont été réalisés avant et après le programme. Vous devez analyser ces données pour déterminer si le programme a été efficace.\nObjectifs : Importer et manipuler les données : Charger les données à partir d’un fichier CSV, puis préparer les données pour l’analyse.",
    "tags": [],
    "title": "Projet: Analyse de l’impact de l'entraînement sur la performance physique",
    "uri": "/semaine13/projet3/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e \rIntroduction au projet final (40%)",
    "content": "Consigne du projet final Contexte : Vous avez mené une expérience de croissance bactérienne dans un milieu nutritif contrôlé. La concentration bactérienne a été mesurée à différents moments. Vous devez analyser ces données pour comprendre la dynamique de croissance et déterminer le modèle le plus approprié (linéaire, exponentiel, logistique).\nObjectifs : Charger et manipuler les données expérimentales. Analyser la progression de la population bactérienne dans le temps. Visualiser les résultats pour identifier un modèle de croissance. Tirer des conclusions sur les caractéristiques de la croissance. Consignes spécifiques : Lecture et traitement des données :\nCharger un fichier CSV contenant les mesures de concentration bactérienne (cfu/mL) en fonction du temps (heures). Vérifier les types de données et nettoyer si nécessaire. Création de fonctions :\nUne fonction calculer_taux_croissance(df) pour calculer le taux de croissance moyen entre chaque intervalle de temps. Une fonction modeliser_croissance(df) pour proposer un modèle de croissance à partir des données observées. Visualisation avec matplotlib :\nGraphique de la croissance (courbe de concentration vs. temps). Visualisation du taux de croissance par intervalle. Comparaison avec un modèle mathématique si applicable (optionnel). Exportation :\nExport d’un fichier CSV contenant le temps, la concentration, les taux de croissance entre les mesures. Données : Le fichier problematique_1_croissance.csv contient deux colonnes :\nTemps (h) Concentration (cfu/mL) Critères d’évaluation : Analyse correcte des données : traitements justes, interprétations logiques. Clarté et structure du code. Pertinence des visualisations et interprétations. Capacité à proposer une modélisation simple. Format du projet : Durée : À remettre à la fin de la semaine 15.\nLivrables :\nUn notebook Jupyter (.ipynb) avec votre travail complet. Le fichier CSV exporté avec vos résultats. Une section de conclusion expliquant la nature de la croissance observée.",
    "description": "Consigne du projet final Contexte : Vous avez mené une expérience de croissance bactérienne dans un milieu nutritif contrôlé. La concentration bactérienne a été mesurée à différents moments. Vous devez analyser ces données pour comprendre la dynamique de croissance et déterminer le modèle le plus approprié (linéaire, exponentiel, logistique).\nObjectifs : Charger et manipuler les données expérimentales. Analyser la progression de la population bactérienne dans le temps. Visualiser les résultats pour identifier un modèle de croissance.",
    "tags": [],
    "title": "Projet: Analyse de la croissance bactérienne",
    "uri": "/semaine13/projet4/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences",
    "content": "Présentation préliminaire (code, intention, défis). Révision par les pairs",
    "description": "Présentation préliminaire (code, intention, défis). Révision par les pairs",
    "tags": [],
    "title": "Travail sur le projet final.",
    "uri": "/semaine14/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences",
    "content": "Vous devez remettre votre code en plus de la vidéo",
    "description": "Vous devez remettre votre code en plus de la vidéo",
    "tags": [],
    "title": "Projet final (Remise présentation en vidéo, démonstration du code)",
    "uri": "/semaine15/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences",
    "content": "Si vous cherchez une alternative simple et accessible à VS Code avec Jupyter, Google Colab est une excellente option. Colab est un environnement de notebooks en ligne gratuit, offert par Google, qui ne nécessite aucune installation. Il vous permet d’écrire et d’exécuter du code Python directement dans votre navigateur, tout en profitant d’un accès facile à des bibliothèques scientifiques populaires comme NumPy, pandas, ou matplotlib. C’est l’outil idéal pour débuter en programmation scientifique ou collaborer à distance, puisqu’il s’intègre à Google Drive et permet de partager vos notebooks aussi facilement qu’un document Google Docs.\nDe son côté, PyCharm est un environnement de développement intégré (IDE) puissant conçu spécialement pour Python. Contrairement à Google Colab, il s’installe sur votre ordinateur, mais offre une panoplie de fonctionnalités avancées comme l’autocomplétion intelligente, le débogueur intégré, et la gestion de projets complexes. Pour les débutants ou les utilisateurs intermédiaires qui souhaitent aller plus loin que les notebooks Jupyter, PyCharm représente une solution robuste et professionnelle. Il existe en version gratuite (Community) et en version payante (Professional) avec essai gratuit.",
    "description": "Si vous cherchez une alternative simple et accessible à VS Code avec Jupyter, Google Colab est une excellente option. Colab est un environnement de notebooks en ligne gratuit, offert par Google, qui ne nécessite aucune installation. Il vous permet d’écrire et d’exécuter du code Python directement dans votre navigateur, tout en profitant d’un accès facile à des bibliothèques scientifiques populaires comme NumPy, pandas, ou matplotlib. C’est l’outil idéal pour débuter en programmation scientifique ou collaborer à distance, puisqu’il s’intègre à Google Drive et permet de partager vos notebooks aussi facilement qu’un document Google Docs.",
    "tags": [],
    "title": "(Colab et PyCharm)",
    "uri": "/alternatives/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e \r(Colab et PyCharm)",
    "content": "Google Colab, ou Colaboratory, est un service cloud gratuit proposé par Google, basé sur Jupyter Notebook. Colab permet d’exécuter du code Python directement dans le navigateur sans nécessiter de configuration préalable, tout en offrant un accès gratuit aux processeurs graphiques, pour accélérer les calculs.\nAccéder à Google Colab Pour commencer à utiliser Google Colab, suivez ces étapes simples :\nMéthode 1: Via le site de Google Colab Allez sur le site: Google Colab. Cliquez sur le bouton Open Colab. Si la fenêtre Ouvrir le notebook s’ouvre, cliquez sur le bouton + Nouveau notebook pour créer un nouveau notebook. Sinon, une fois sur l’interface de Colab, vous pouvez créer un nouveau notebook en utilisant le menu Fichier et en sélectionnant Nouveau notebook. Les notebooks Colab permettent d’écrire et d’exécuter du code Python. Par exemple, pour exécuter une cellule de code, cliquez dessus et appuyez sur le bouton de lecture ou utilisez le raccourci clavier Ctrl+Entrée.\nMéthode 2: Via votre compte Google Drive (Si vous en avez un) Ouvrez votre compte Google Drive, cliquez sur Nouveau, puis sur Plus et sélectionnez Google Colaboratory. Importer un fichier de l’ordinateur vers Colab Pour importer un fichier .ipynb (notebook Jupyter) ou .csv (fichier de données) depuis votre ordinateur local vers Google Colab, vous pouvez utiliser l’une des deux méthodes suivantes :\nMéthode 1 : Utiliser l’interface de Google Colab (plus simple) Pour un fichier .ipynb : Va sur https://colab.research.google.com/ Clique sur l’onglet “Téléverser” (Upload). Sélectionne ton fichier .ipynb depuis ton ordinateur. Pour un fichier .csv : Dans un notebook Colab ouvert, exécute la cellule suivante :\nfrom google.colab import files uploaded = files.upload()\rCela ouvrira une boîte de dialogue pour téléverser des fichiers.\nUne fois le fichier .csv téléversé, tu peux l’utiliser comme suit :\nimport pandas as pd df = pd.read_csv('nom_du_fichier.csv') df.head()\rMéthode 2 : Monter Google Drive et accéder aux fichiers Si tu veux garder les fichiers disponibles à long terme :\nMonte ton Google Drive :\nfrom google.colab import drive drive.mount('/content/drive')\rAccède aux fichiers (ex. un .csv) avec un chemin comme :\ndf = pd.read_csv('/content/drive/MyDrive/chemin/vers/fichier.csv')\rUtilisation des bibliothèques Python Colab permet d’utiliser des bibliothèques populaires pour l’analyse et la visualisation des données. Par exemple, pour générer des données aléatoires avec NumPy et les visualiser avec Matplotlib :\nimport numpy as np import matplotlib.pyplot as plt ys = 200 + np.random.randn(100) x = [x for x in range(len(ys))] plt.figure(figsize=(10, 6)) plt.plot(x, ys, '-') plt.fill_between(x, ys, 195, where=(ys \u003e 195), facecolor='g', alpha=0.6) plt.show()\rLes notebooks Colab sont enregistrés dans votre compte Google Drive, ce qui facilite le partage et la collaboration. Vous pouvez partager vos notebooks avec d’autres utilisateurs, qui peuvent les commenter ou les modifier.\nPour en savoir plus sur Colab Lire ce notebook",
    "description": "Google Colab, ou Colaboratory, est un service cloud gratuit proposé par Google, basé sur Jupyter Notebook. Colab permet d’exécuter du code Python directement dans le navigateur sans nécessiter de configuration préalable, tout en offrant un accès gratuit aux processeurs graphiques, pour accélérer les calculs.\nAccéder à Google Colab Pour commencer à utiliser Google Colab, suivez ces étapes simples :\nMéthode 1: Via le site de Google Colab Allez sur le site: Google Colab.",
    "tags": [],
    "title": "Google Colab",
    "uri": "/alternatives/google-colab/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e \r(Colab et PyCharm)",
    "content": "Développé par JetBrains, PyCharm est à ce jour une plateforme très populaire pour Python. Cette plateforme hybride est couramment utilisée pour le développement d’applications Python, et notamment par de grandes entreprises telles que Twitter, Facebook, Amazon ou Pinterest.\nCompatible avec Windows, Linux et macOS, PyCharm contient des modules et des packages aidant les développeurs à programmer des logiciels avec Python plus rapidement et avec moins d’efforts.\nInstallation et configuration Télécharger PyCharm Téléchargez PyCharm en cliquant sur le lien de téléchargement.\nCliquez sur le bouton Download\nSauvegardez le fichier .exe (en date de juin 2025, c’est pycharm-2025.1.1.1.exe) Installation Les instructions varient selon votre système d’exploitation. Pour Windows: Lancez l’installation en cliquant deux fois sur le fichier pycharm-2025.1.1.1.exe téléchargé précédemment. Autorisez l’application Suivez les étapes en cliquant sur *Next. Cochez les cases de configuration de PyCharm, puis cliquez sur Next, puis Install Patientez, le temps que l’installation se fasse6. (environ 2-3 minutes). Redémarrer votre ordinateur. Deux choix possibles: Choisir l’option Reboot now, puis cliquez sur Finish. Choisir l’option I want to manually reboot later, pour redémarrer l’ordinateur plus tard. Cliquez sur Finish. Lancer PyCharm Retrouvez l’application PyCharm à l’aide de la loupe Recherche sur la barre des tâches Lors du premier lancement de PyCharm, il vous sera demandé de vous connecter à votre compte JetBrains ou de démarrer une évaluation gratuite.\nÉcran d’accueil Lorsque vous ouvrez PyCharm pour la première fois, vous êtes accueilli par l’écran d’accueil.\nDepuis l’écran d’accueil de PyCharm, vous pouvez explorer cinq sections principales :\nOnglet “Learn PyCharm” : il contient des liens vers la documentation et d’autres ressources. Vous pouvez également vous inscrire à l’outil interactif “Feature Trainer”, conçu pour vous enseigner rapidement des astuces de productivité dans PyCharm.\nOnglet “Plugins” : il vous permet d’installer des extensions supplémentaires comme des thèmes personnalisés ou des raccourcis clavier (keymaps), utiles si vous venez d’un autre éditeur ou IDE.\nKeymaps : installer des keymaps facilite la transition depuis d’autres éditeurs. Pour rechercher, commencez à taper “keymaps”, par exemple, et PyCharm vous proposera les keymaps disponibles pour les éditeurs les plus populaires. Choisissez celui qui vous convient le mieux et cliquez pour l’installer.\nSection “Customize” : elle vous permet de modifier certains paramètres courants. Par exemple, vous pouvez changer le thème Darcula pour IntelliJ Light. Vous pouvez également synchroniser l’apparence avec celle de votre système d’exploitation. Si vous avez installé un keymap ou un thème, vous devrez les activer ici.\nOnglet “Projects” : c’est ici que vous pouvez créer, ouvrir ou cloner un projet pour commencer à travailler.\nVidéo sur YouTube L’installation en vidéo\nCréer un premier projet dans PyCharm. Pour cette étape, vous pouvez:\nRegarder la vidéo sur YouTube: vidéo ou Lire (en anglais) les instruction sur le site de PyCharm Comprendre l’interface de PyCharm Pour cette étape, vous pouvez:\nRegarder la vidéo sur YouTube: vidéo Ou Lire le tutoriel sur le site de PyCharm",
    "description": "Développé par JetBrains, PyCharm est à ce jour une plateforme très populaire pour Python. Cette plateforme hybride est couramment utilisée pour le développement d’applications Python, et notamment par de grandes entreprises telles que Twitter, Facebook, Amazon ou Pinterest.\nCompatible avec Windows, Linux et macOS, PyCharm contient des modules et des packages aidant les développeurs à programmer des logiciels avec Python plus rapidement et avec moins d’efforts.\nInstallation et configuration Télécharger PyCharm Téléchargez PyCharm en cliquant sur le lien de téléchargement.",
    "tags": [],
    "title": "PyCharm",
    "uri": "/alternatives/pycharm/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences",
    "content": "Semaine 1 Cours Mettre à jour infos tableau planification de cours Préparer la démo sur Anaconda et Jupyter Préparer guide installation sur Windows 11: https://www.datacamp.com/fr/tutorial/installing-anaconda-windows Semaine 2 Cours Réviser Activité 2.1 Créer ipynb Activité 2.2 Contexte à confirmer Mise en forme des formule Vérifier ipynb Semaine 3 Cours Activité 3 Semaine 4 Cours Activité 4 Semaine 5 Cours Activité 5 Semaine 6 Cours Activité 6",
    "description": "Semaine 1 Cours Mettre à jour infos tableau planification de cours Préparer la démo sur Anaconda et Jupyter Préparer guide installation sur Windows 11: https://www.datacamp.com/fr/tutorial/installing-anaconda-windows Semaine 2 Cours Réviser Activité 2.1 Créer ipynb Activité 2.2 Contexte à confirmer Mise en forme des formule Vérifier ipynb Semaine 3 Cours Activité 3 Semaine 4 Cours Activité 4 Semaine 5 Cours Activité 5 Semaine 6 Cours Activité 6",
    "tags": [],
    "title": "À FAIRE",
    "uri": "/afaire/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Categories",
    "uri": "/categories/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e \rÀ FAIRE",
    "content": "🎯 Problème : Probabilité que la fléchette atteigne la zone blanche Structure de la cible : Zone noire : cercle de rayon 2 cm Zone blanche : anneau entre rayon 2 cm et 3 cm Zone grise : anneau entre rayon 3 cm et 6 cm Étape 1 — Aire totale de la cible La cible est un disque de rayon 6 cm : Aire totale = π × 6² = 36π cm²\nÉtape 2 — Aire de la zone blanche La zone blanche est un anneau entre les rayons 2 cm et 3 cm. Donc : Aire blanche = π × (3² - 2²) = π × (9 - 4) = 5π cm²\nÉtape 3 — Probabilité que la fléchette tombe dans la zone blanche On suppose que la fléchette touche n’importe quelle partie de la cible avec une probabilité uniforme.\nDonc : Probabilité = Aire blanche / Aire totale = (5π) / (36π) = 5 / 36\n✅ Réponse finale : La probabilité que la fléchette atteigne la zone blanche est :\n5 / 36, soit environ 13,9 %.\nSouhaites-tu aussi les formules dans un format Word ou PDF plus lisible visuellement ?",
    "description": "🎯 Problème : Probabilité que la fléchette atteigne la zone blanche Structure de la cible : Zone noire : cercle de rayon 2 cm Zone blanche : anneau entre rayon 2 cm et 3 cm Zone grise : anneau entre rayon 3 cm et 6 cm Étape 1 — Aire totale de la cible La cible est un disque de rayon 6 cm : Aire totale = π × 6² = 36π cm²",
    "tags": [],
    "title": "maths",
    "uri": "/afaire/maths/index.html"
  },
  {
    "breadcrumb": "",
    "content": "Pondération : 1-2-3 Durée par semaine : 2h40 ~50 min théorie ~1h50 pratique Description du cours Ce cours permet de se familiariser avec la programmation informatique dans un contexte scientifique et de faire le lien entre les technologies et le domaine des sciences.\nL’élève est introduit à la résolution de problèmes à l’aide d’algorithmes. Il doit traduire les algorithmes en code en utilisant un langage de programmation, tout en vérifiant le bon fonctionnement de son programme. Il traite des données et présente des résultats scientifiques à l’aide de la programmation lettrée.\nObjectifs du cours Apprendre les bases de la programmation en Python Appliquer la programmation à des problèmes scientifiques (mathématiques, physique, biologie, etc.) Automatiser des calculs et analyser des données expérimentales Développer un raisonnement algorithmique et structuré Maîtriser l’utilisation d’Anaconda et de Jupyter Notebook pour le développement scientifique Comprendre la gestion des fichiers et dossiers sous Windows Introduire les techniques de débogage et de traçage d’exécution Évaluations Évaluations formatives Ateliers hebdomadaires Évaluations sommatives Examen 1 (30%, semaine 7) Examen 2 (30%, semaine 12) Projet final (40%, semaines 13 à 15)",
    "description": "Pondération : 1-2-3 Durée par semaine : 2h40 ~50 min théorie ~1h50 pratique Description du cours Ce cours permet de se familiariser avec la programmation informatique dans un contexte scientifique et de faire le lien entre les technologies et le domaine des sciences.\nL’élève est introduit à la résolution de problèmes à l’aide d’algorithmes. Il doit traduire les algorithmes en code en utilisant un langage de programmation, tout en vérifiant le bon fonctionnement de son programme.",
    "tags": [],
    "title": "Programmation en sciences",
    "uri": "/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Tags",
    "uri": "/tags/index.html"
  }
]
