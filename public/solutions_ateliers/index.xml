<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Solutions des ateliers :: 420-SN1-RE</title>
    <link>https://example.org/solutions_ateliers/index.html</link>
    <description>02. Variables, types, entrées et fonctions&#xA;03. Structures conditionnelles&#xA;04. Boucles et débogage simple&#xA;06. Listes, chaines et visualisation des données&#xA;07. Dictionnaires&#xA;08. Tableaux NumPy et droite de régression linéaire</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="https://example.org/solutions_ateliers/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title> Variables, types, entrées et fonction</title>
      <link>https://example.org/solutions_ateliers/2_variables_types_entrees_fn/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.org/solutions_ateliers/2_variables_types_entrees_fn/index.html</guid>
      <description>Exercice #1 - Expérience en chimie # Constantes q_initiale = 400 # en mL t_minutes = 10 + 15/60 # conversion des 15 s en minutes =&gt; 10.25 minutes taux_evaporation = 25 # en mL/min # Formule : q(t) = 400 - 25 * t quantite_restante = q_initiale - taux_evaporation * t_minutes print(f&#34;Quantité restante après {t_minutes} minutes : {quantite_restante:.2f} mL.&#34;)&#xD;Résultat attendu :&#xA;Quantité restante après 10.25 minutes : 143.75 mL.</description>
    </item>
    <item>
      <title> Structures conditionnelles</title>
      <link>https://example.org/solutions_ateliers/3_struct_cond/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.org/solutions_ateliers/3_struct_cond/index.html</guid>
      <description># Demander les données à l&#39;utilisateur temperature = float(input(&#34;Température de l&#39;eau en °C : &#34;)) pression = float(input(&#34;Pression en atm (0.5, 1.0, 1.5 ou 2.0) : &#34;)) # Déterminer le point d’ébullition selon la pression if pression == 0.5: ebullition = 81 elif pression == 1.0: ebullition = 100 elif pression == 1.5: ebullition = 112 elif pression == 2.0: ebullition = 120 else: # Version améliorée: gestion d&#39;une pression invalide print(&#34;Pression invalide.</description>
    </item>
    <item>
      <title> Boucles de débogage simple</title>
      <link>https://example.org/solutions_ateliers/4_boucles_debogage/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.org/solutions_ateliers/4_boucles_debogage/index.html</guid>
      <description>Exercice 1 : Réaction chimique # Réaction : 1 mL de A + 2 mL de B a_dispo = int(input(&#34;Quantité de A disponible (en mL) : &#34;)) b_dispo = int(input(&#34;Quantité de B disponible (en mL) : &#34;)) nb_reactions = 0 while a_dispo &gt;= 1 and b_dispo &gt;= 2: a_dispo -= 1 b_dispo -= 2 nb_reactions += 1 print(&#34;La réaction a eu lieu&#34;, nb_reactions, &#34;fois.&#34;) print(&#34;Il reste&#34;, a_dispo, &#34;mL de A et&#34;, b_dispo, &#34;mL de B.</description>
    </item>
    <item>
      <title> Listes, chaines et visualisation des données</title>
      <link>https://example.org/solutions_ateliers/6_listes_chaines_visualisation/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.org/solutions_ateliers/6_listes_chaines_visualisation/index.html</guid>
      <description>import matplotlib.pyplot as plt # Données temperatures = [ [15, 16, 14, 14, 17, 18, 19], # Ville A [22, 23, 21, 20, 24, 25, 26], # Ville B [5, 7, 6, 6, 8, 9, 7], # Ville C [10, 11, 12, 10, 13, 14, 15] # Ville D ] villes = [&#34;Ville A&#34;, &#34;Ville B&#34;, &#34;Ville C&#34;, &#34;Ville D&#34;] jours = [&#34;Lun&#34;, &#34;Mar&#34;, &#34;Mer&#34;, &#34;Jeu&#34;, &#34;Ven&#34;, &#34;Sam&#34;, &#34;Dim&#34;] # 1.</description>
    </item>
    <item>
      <title> Dictionnaires</title>
      <link>https://example.org/solutions_ateliers/7_dictionnaires/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.org/solutions_ateliers/7_dictionnaires/index.html</guid>
      <description>Exercice - Physique import matplotlib.pyplot as plt # Constante gravitationnelle g = 9.8 # Création des dictionnaires vitesses = {} positions = {} for t in range(6): # temps de 0 à 5 vitesses[t] = g * t positions[t] = 0.5 * g * (t**2) print(&#34;Vitesses :&#34;, vitesses) print(&#34;Positions :&#34;, positions) # Préparation des données pour les graphiques temps = list(vitesses.keys()) valeurs_v = list(vitesses.values()) valeurs_y = list(positions.values()) # Tracé des graphes plt.</description>
    </item>
    <item>
      <title> Tableaux NumPy et droite de régression</title>
      <link>https://example.org/solutions_ateliers/8_numpy_regression/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.org/solutions_ateliers/8_numpy_regression/index.html</guid>
      <description>Exercice 1 import numpy as np import matplotlib.pyplot as plt # Données avec valeurs manquantes hauteurs = np.array([ [12.5, 13.1, 12.9, 13.0, 12.8], [11.2, 11.6, np.nan, 11.5, 11.3], [10.4, 10.1, 10.2, np.nan, np.nan] ]) conditions = [&#34;Naturelle&#34;, &#34;LED blanche&#34;, &#34;LED rouge&#34;] # Moyenne et écart-type en ignorant les données manquantes (NaN) moyennes = np.nanmean(hauteurs, axis=1) ecarts_type = np.nanstd(hauteurs, axis=1) # Affichage du résumé # Pour chaque hauteur: conditions; moyennes et écarts-type for i in range(3): print(f&#34;Moyenne ({conditions[i]}) = {moyennes[i]:.</description>
    </item>
  </channel>
</rss>