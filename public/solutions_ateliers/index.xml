<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Solutions des ateliers :: 420-SN1-RE</title>
    <link>https://example.org/solutions_ateliers/index.html</link>
    <description>02. Variables, types, entrées et fonctions&#xA;03. Structures conditionnelles&#xA;04. Boucles et débogage simple&#xA;06. Listes, chaines et visualisation des données&#xA;07. Tableaux NumPy et droite de régression&#xA;08. Dictionnaires et fichiers texte&#xA;09. Révision&#xA;11. Fonctions personnalisées</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="https://example.org/solutions_ateliers/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title> Variables, types, entrées et fonction</title>
      <link>https://example.org/solutions_ateliers/2_variables_types_entrees_fn/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.org/solutions_ateliers/2_variables_types_entrees_fn/index.html</guid>
      <description>Exercice #1 - Quantité restante après évaporation # Constantes q_initiale = 400 # en mL t_minutes = 10 + 15/60 # conversion des 15 s en minutes =&gt; 10.25 minutes taux_evaporation = 25 # en mL/min # Formule : q(t) = 400 - 25 * t quantite_restante = q_initiale - taux_evaporation * t_minutes print(f&#34;Quantité restante après {t_minutes} minutes : {quantite_restante:.2f} mL.&#34;)&#xD;Résultat attendu :&#xA;Quantité restante après 10.25 minutes : 143.</description>
    </item>
    <item>
      <title> Structures conditionnelles</title>
      <link>https://example.org/solutions_ateliers/3_struct_cond/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.org/solutions_ateliers/3_struct_cond/index.html</guid>
      <description># Demander les données à l&#39;utilisateur temperature = float(input(&#34;Température de l&#39;eau en °C : &#34;)) pression = float(input(&#34;Pression en atm (0.5, 1.0, 1.5 ou 2.0) : &#34;)) # Déterminer le point d’ébullition selon la pression if pression == 0.5: ebullition = 81 elif pression == 1.0: ebullition = 100 elif pression == 1.5: ebullition = 112 elif pression == 2.0: ebullition = 120 else: print(&#34;Pression invalide. Veuillez entrer 0.5, 1.0, 1.</description>
    </item>
    <item>
      <title> Boucles de débogage simple</title>
      <link>https://example.org/solutions_ateliers/4_boucles_debogage/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.org/solutions_ateliers/4_boucles_debogage/index.html</guid>
      <description>Exercice 1 : Réaction chimique # Réaction : 1 mL de A + 2 mL de B a_dispo = int(input(&#34;Quantité de A disponible (en mL) : &#34;)) b_dispo = int(input(&#34;Quantité de B disponible (en mL) : &#34;)) nb_reactions = 0 while a_dispo &gt;= 1 and b_dispo &gt;= 2: a_dispo -= 1 b_dispo -= 2 nb_reactions += 1 print(&#34;La réaction a eu lieu&#34;, nb_reactions, &#34;fois.&#34;) print(&#34;Il reste&#34;, a_dispo, &#34;mL de A et&#34;, b_dispo, &#34;mL de B.</description>
    </item>
    <item>
      <title> Listes, chaines et visualisation des données</title>
      <link>https://example.org/solutions_ateliers/6_listes_chaines_visualisation/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.org/solutions_ateliers/6_listes_chaines_visualisation/index.html</guid>
      <description>import matplotlib.pyplot as plt # Données brutes sous forme de chaînes donnees = [ &#34;12.3, 16.8, 14.0&#34;, # jour 1 : matin, midi, soir &#34;11.5, 18.2, 15.4&#34;, &#34;10.8, 17.6, 14.9&#34;, &#34;13.0, 19.1, 16.3&#34;, &#34;14.1, 20.2, 18.5&#34;, &#34;12.9, 18.7, 16.2&#34;, &#34;11.7, 17.8, 15.0&#34; ] # 1. Extraction et nettoyage temperatures = [] # liste imbriquée for ligne in donnees: trio = ligne.split(&#34;,&#34;) trio_float = [float(valeur.strip()) for valeur in trio] temperatures.append(trio_float) print(&#34;Liste des températures (liste imbriquée) :&#34;) print(temperatures) # 2.</description>
    </item>
    <item>
      <title> Tableaux NumPy et droite de régression</title>
      <link>https://example.org/solutions_ateliers/7_numpy_regression/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.org/solutions_ateliers/7_numpy_regression/index.html</guid>
      <description>Résumé des résultats : Moyenne (Naturelle) = 12.86 cm, écart-type = 0.21 cm Moyenne (LED blanche) = 11.40 cm, écart-type = 0.16 cm Moyenne (LED rouge) = 10.23 cm, écart-type = 0.12 cm Condition avec la plus grande croissance moyenne : Naturelle&#xD;import numpy as np import matplotlib.pyplot as plt # Données avec valeurs manquantes hauteurs = np.array([ [12.5, 13.1, 12.9, 13.0, 12.8], [11.2, 11.6, np.nan, 11.5, 11.3], [10.4, 10.1, 10.</description>
    </item>
    <item>
      <title> Dictionnaires et fichiers texte</title>
      <link>https://example.org/solutions_ateliers/8_dict_fichiers/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.org/solutions_ateliers/8_dict_fichiers/index.html</guid>
      <description># 1. Lecture du fichier CSV import csv donnees = {} with open(&#34;cristallisation.csv&#34;, newline=&#39;&#39;, encoding=&#39;utf-8&#39;) as fichier: lecteur = csv.DictReader(fichier) for ligne in lecteur: substance = ligne[&#34;substance&#34;] condition = ligne[&#34;condition&#34;] temp = float(ligne[&#34;temp_cristallisation&#34;]) if substance not in donnees: donnees[substance] = {} donnees[substance][condition] = temp # 2. Affichage des données for substance in donnees: for condition in donnees[substance]: temp = donnees[substance][condition] print(f&#34;{substance} cristallise à {temp}°C {condition.replace(&#39;_&#39;, &#39; &#39;)}.&#34;) # 3. Ajout d&#39;une nouvelle condition pour H2O donnees[&#34;H2O&#34;][&#34;en_solution&#34;] = -5 # 4.</description>
    </item>
    <item>
      <title> Révision</title>
      <link>https://example.org/solutions_ateliers/9_revision/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.org/solutions_ateliers/9_revision/index.html</guid>
      <description>import pandas as pd import numpy as np import matplotlib.pyplot as plt # Étape 1 - Lecture df = pd.read_csv(&#34;croissance_algues.csv&#34;) # Vérifier les NaN print(df.isna().sum()) df = df.dropna() # Conversion NumPy temperatures = df[&#34;Température&#34;].to_numpy() taux = df[&#34;Taux&#34;].to_numpy() # Étape 2 - Analyse par espèce donnees_par_espece = {} for _, ligne in df.iterrows(): espece = ligne[&#34;Espèce&#34;] taux_val = ligne[&#34;Taux&#34;] if espece not in donnees_par_espece: donnees_par_espece[espece] = [] donnees_par_espece[espece].append(taux_val) resume = {} for espece, valeurs in donnees_par_espece.</description>
    </item>
    <item>
      <title> Fonctions personnalisées</title>
      <link>https://example.org/solutions_ateliers/11_fonctions_perso/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.org/solutions_ateliers/11_fonctions_perso/index.html</guid>
      <description>Exercice : Calcul de dilution (C₁V₁ = C₂V₂) # Fonction qui lit les données d&#39;entrée (sans paramètres) def lire_donnees(): print(&#34;--- Programme de dilution ---&#34;) # Lecture de la concentration de la solution mère C1 = float(input(&#34;Concentration de la solution mère (mol/L) : &#34;)) # Lecture de la concentration finale souhaitée C2 = float(input(&#34;Concentration finale souhaitée (mol/L) : &#34;)) # Lecture du volume final V2 = float(input(&#34;Volume final de la solution (L) : &#34;)) return C1, C2, V2 # Fonction qui calcule V1 à partir de C1, C2 et V2 (avec paramètres, retourne un résultat) def calculer_v1(C1, C2, V2): # Formule : V1 = (C2 × V2) / C1 V1 = (C2 * V2) / C1 return V1 # Fonction qui affiche le résultat (avec paramètre, ne retourne rien) def afficher_resultat(V1): # Arrondi à 2 décimales V1_arrondi = round(V1, 2) print(f&#34;Il faut prélever {V1_arrondi} L de solution mère pour préparer la solution diluée.</description>
    </item>
  </channel>
</rss>