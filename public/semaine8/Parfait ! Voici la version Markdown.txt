Parfait ! Voici la version **Markdown standard** avec une petite phrase dâ€™introduction pour chaque exemple :

````markdown
# Exercices

> ðŸ’¡ **Graphiques**  
> Le choix des **couleurs**, des **marqueurs** et des **styles de traits** est libre.  
> Vous pouvez vous amuser Ã  changer la mise en forme.

---

### Exercice 1 : Chute libre verticale et rÃ©gression linÃ©aire

Un objet est lÃ¢chÃ© dâ€™une hauteur **h = 20 m** sans vitesse initiale.  
La formule de la position est :

$$
y(t) = h - \tfrac{1}{2} g t^2
$$

avec $ g = 9.8 \, m/s^2$

1. Importez NumPy et Matplotlib.  
2. DÃ©finissez les deux constantes `g` et `h`.  
3. CrÃ©ez un tableau `t` de 0 Ã  2 secondes avec 21 valeurs (`np.linspace(0, 2, 21)`).  
4. Calculez la position `y` avec la formule ci-dessus.  
5. Affichez les **5 premiÃ¨res valeurs** de `y` (`y[:5]`).  
6. Tracez le graphique de la position (`y`) en fonction du temps (`plt.plot(t, y)`).  
7. Ajoutez une **droite de rÃ©gression linÃ©aire** sur la portion `0.5 â‰¤ t â‰¤ 1.5` :  

   ```python
   masque = (t >= 0.5) & (t <= 1.5)
   coef = np.polyfit(t[masque], y[masque], 1)
   droite = np.polyval(coef, t)
   plt.plot(t, droite)
````

**RÃ©sultats** :

```
5 premiÃ¨res valeurs de y : [20.    19.951 19.804 19.559 19.216]
```

![graphique 1](./graphe_exo1.png)

---

## Exercice 2 : Mouvement rectiligne uniforme et rÃ©gression linÃ©aire

Une voiture roule Ã  vitesse constante **v = 15 m/s**.
Sa position est donnÃ©e par :

$$
x(t) = v \cdot t
$$

1. DÃ©finissez la vitesse constante (`v = 15`).
2. CrÃ©ez un tableau `t` allant de 0 Ã  10 s avec un pas de 0.5 (`np.arange(0, 10.5, 0.5)`).
3. Calculez la position `x` avec la formule ci-dessus.
4. Affichez la **derniÃ¨re valeur de `x`** (`x[-1]`).
5. Tracez la position en fonction du temps (`plt.plot(t, x)`).
6. Ajoutez une **droite de rÃ©gression linÃ©aire** pour vÃ©rifier que la relation est bien proportionnelle.

**RÃ©sultats** :

```
DerniÃ¨re position : 150.0
```

![graphique 2](./graphe_exo2.png)

---

## Exercice 3 : Ã‰nergie cinÃ©tique et barres dâ€™erreur

La formule de l'Ã©nergie cinÃ©tique est :

$$
E_c = \tfrac{1}{2} m v^2
$$

Un objet de masse **m = 2.0 kg** accÃ©lÃ¨re de 0 Ã  20 m/s.

1. CrÃ©ez un tableau `v` de 0 Ã  20 avec un pas de 2 (`np.arange`).
2. Calculez `Ec`.
3. Affichez les Ã©nergies calculÃ©es.
4. VÃ©rifiez la valeur maximale avec `np.max(Ec)`.
5. Affichez les **3 derniÃ¨res valeurs** et la **sous-plage 2â€“8 m/s**.
6. Tracez un **graphique Ã  barres** des Ã©nergies en fonction de la vitesse, en ajoutant des **barres dâ€™erreur** (Â±5%).

   ```python
   erreurs = 0.05 * Ec
   plt.bar(v, Ec, yerr=erreurs)
   ```

**RÃ©sultats** :

```
Ã‰nergies : [  0.   4.  16.  36.  64. 100. 144. 196. 256. 324. 400.]
Max : 400.0
Trois derniÃ¨res : [256. 324. 400.]
Vitesses 2â€“8 : [2 4 6 8]
Ã‰nergies : [ 4. 16. 36. 64.]
```

![graphique 3](./graphe_exo3.png)

---

### Exercice 4 : Oscillations harmoniques

La position dâ€™un oscillateur est donnÃ©e par :

$$
x(t) = A \cos(\omega t)
$$

avec $A = 0.1 , m$ et $\omega = 2 \pi , rad/s$

1. CrÃ©ez un tableau `t` de 0 Ã  2 s avec 101 valeurs (`np.linspace`).
2. Calculez la position `x`.
3. Trouvez les valeurs extrÃªmes (`np.max`, `np.min`).
4. Tracez le graphique de lâ€™oscillation.

**RÃ©sultats** :

```
Max : 0.1
Min : -0.1
```

![graphique 4](./graphe_exo4.png)

---

# Cours

*NumPy* est une bibliothÃ¨que Python conÃ§ue pour manipuler des donnÃ©es numÃ©riques sous forme de **tableaux (arrays)**. Elle est particuliÃ¨rement utile pour appliquer rapidement des **formules** sur plusieurs valeurs.

## 1. CrÃ©ation de tableaux

```python
import numpy as np

# CrÃ©er un tableau Ã  partir dâ€™une liste
a = np.array([1, 2, 3])       # â†’ [1 2 3]

# CrÃ©er des valeurs espacÃ©es rÃ©guliÃ¨rement
b = np.arange(0, 5, 1)        # â†’ [0 1 2 3 4]

# CrÃ©er un nombre fixÃ© de valeurs Ã©galement espacÃ©es
c = np.linspace(0, 1, 5)      # â†’ [0.   0.25 0.5  0.75 1. ]

# CrÃ©er un tableau rempli de 1
d = np.ones(3)                # â†’ [1. 1. 1.]

# CrÃ©er un tableau rempli de 0
e = np.zeros(3)               # â†’ [0. 0. 0.]
```

## 2. OpÃ©rations arithmÃ©tiques

```python
a = np.array([1, 2, 3, 4])
b = np.array([10, 20, 30, 40])

# Addition Ã©lÃ©ment par Ã©lÃ©ment
a + b    # â†’ [11 22 33 44]

# Soustraction Ã©lÃ©ment par Ã©lÃ©ment
a - b    # â†’ [-9 -18 -27 -36]

# Multiplication Ã©lÃ©ment par Ã©lÃ©ment
a * b    # â†’ [10 40 90 160]

# Division Ã©lÃ©ment par Ã©lÃ©ment
a / b    # â†’ [0.1 0.1 0.1 0.1]

# Puissance Ã©lÃ©ment par Ã©lÃ©ment
a ** 2   # â†’ [ 1  4  9 16]

# Valeur absolue
np.abs([-3, -5])   # â†’ [3 5]
```

## 3. Statistiques

```python
x = np.array([1, 2, 3, 4])

# Valeur maximale
np.max(x)    # â†’ 4

# Valeur minimale
np.min(x)    # â†’ 1

# Moyenne
np.mean(x)   # â†’ 2.5

# MÃ©diane
np.median(x) # â†’ 2.5

# Somme
np.sum(x)    # â†’ 10

# Produit
np.prod(x)   # â†’ 24

# Variance
np.var(x)    # â†’ 1.25

# Ã‰cart-type
np.std(x)    # â†’ 1.118...
```

## 4. Fonctions mathÃ©matiques

```python
# Racine carrÃ©e
np.sqrt([4, 9])    # â†’ [2. 3.]

# Racine cubique
np.cbrt(27)        # â†’ 3.0

# Exponentielle
np.exp(1)          # â†’ 2.718...

# Logarithme naturel
np.log(np.e)       # â†’ 1.0

# Logarithme base 2
np.log2(8)         # â†’ 3.0

# Logarithme base 10
np.log10(1000)     # â†’ 3.0
```

## 5. Arrondis

```python
y = np.array([3.14159, 2.71828])

# Arrondi Ã  2 dÃ©cimales
np.round(y, 2)   # â†’ [3.14 2.72]

# Arrondi supÃ©rieur
np.ceil(y)       # â†’ [4. 3.]

# Arrondi infÃ©rieur
np.floor(y)      # â†’ [3. 2.]

# Tronquer la partie dÃ©cimale
np.trunc(y)      # â†’ [3. 2.]
```

## 6. TrigonomÃ©trie

```python
# Sinus
np.sin(np.pi/2)   # â†’ 1.0

# Cosinus
np.cos(0)         # â†’ 1.0

# Tangente
np.tan(np.pi/4)   # â†’ 1.0

# Sinus inverse
np.arcsin(1)      # â†’ 1.5707... (â‰ˆ Ï€/2)

# Cosinus inverse
np.arccos(0)      # â†’ 1.5707...

# Tangente inverse
np.arctan(1)      # â†’ 0.7853... (â‰ˆ Ï€/4)

# Arctangente avec quadrant correct
np.arctan2(1,1)   # â†’ 0.7853... (â‰ˆ Ï€/4)

# Conversion degrÃ©s â†’ radians
np.deg2rad(180)   # â†’ 3.14159...

# Conversion radians â†’ degrÃ©s
np.rad2deg(np.pi) # â†’ 180.0
```

## 7. Divers

```python
# DiffÃ©rences entre Ã©lÃ©ments consÃ©cutifs
np.diff([1, 3, 6, 10])    # â†’ [2 3 4]

# Ajustement polynÃ´mial (rÃ©gression linÃ©aire)
x = np.array([0, 1, 2])
y = np.array([1, 3, 5])
np.polyfit(x, y, 1)       # â†’ [2. 1.]  (pente=2, intercept=1)
```

## 8. Constantes

```python
# Valeur de Ï€
np.pi   # â†’ 3.14159...

# Base du logarithme naturel
np.e    # â†’ 2.71828...
```



# Tableau rÃ©capitulatif des fonctions et opÃ©rations NumPy

| CatÃ©gorie                    | Fonction / OpÃ©ration               | Description                                               |
| ---------------------------- | ---------------------------------- | --------------------------------------------------------- |
| **CrÃ©ation de tableaux**     | `np.array()`                       | CrÃ©e un tableau NumPy Ã  partir dâ€™une liste Python.        |
|                              | `np.arange(debut, fin, pas)`       | CrÃ©e des valeurs espacÃ©es rÃ©guliÃ¨rement avec un pas fixe. |
|                              | `np.linspace(debut, fin, n)`       | CrÃ©e un nombre fixÃ© de valeurs Ã©galement espacÃ©es.        |
|                              | `np.ones(n)`                       | CrÃ©e un tableau rempli de 1.                              |
|                              | `np.zeros(n)`                      | CrÃ©e un tableau rempli de 0.                              |
| **OpÃ©rations arithmÃ©tiques** | `a + b`, `a - b`, `a * b`, `a / b` | OpÃ©rations Ã©lÃ©ment par Ã©lÃ©ment.                           |
|                              | `a ** 2`                           | Ã‰lÃ¨ve chaque Ã©lÃ©ment au carrÃ©.                            |
|                              | `np.abs(a)` / `np.fabs(a)`         | Valeur absolue entiÃ¨re ou flottante.                      |
| **Statistiques**             | `np.max(x)` / `np.min(x)`          | Valeur maximale ou minimale du tableau.                   |
|                              | `np.mean(x)`                       | Moyenne des valeurs.                                      |
|                              | `np.median(x)`                     | MÃ©diane.                                                  |
|                              | `np.sum(x)`                        | Somme des valeurs.                                        |
|                              | `np.prod(x)`                       | Produit des valeurs.                                      |
|                              | `np.var(x)`                        | Variance.                                                 |
|                              | `np.std(x)`                        | Ã‰cart-type.                                               |
| **Fonctions mathÃ©matiques**  | `np.sqrt(x)`                       | Racine carrÃ©e.                                            |
|                              | `np.cbrt(x)`                       | Racine cubique.                                           |
|                              | `np.exp(x)`                        | Exponentielle.                                            |
|                              | `np.log(x)`                        | Logarithme naturel.                                       |
|                              | `np.log2(x)`                       | Logarithme en base 2.                                     |
|                              | `np.log10(x)`                      | Logarithme en base 10.                                    |
| **Arrondis**                 | `np.round(x, n)`                   | Arrondit Ã  `n` dÃ©cimales.                                 |
|                              | `np.ceil(x)`                       | Plafond (arrondi supÃ©rieur).                              |
|                              | `np.floor(x)`                      | Plancher (arrondi infÃ©rieur).                             |
|                              | `np.trunc(x)`                      | Tronque la partie dÃ©cimale.                               |
| **TrigonomÃ©trie**            | `np.sin(x)` / `np.cos(x)`          | Sinus et cosinus (en radians).                            |
|                              | `np.tan(x)`                        | Tangente.                                                 |
|                              | `np.arcsin(x)` / `np.arccos(x)`    | Sinus et cosinus inverses.                                |
|                              | `np.arctan(x)`                     | Tangente inverse.                                         |
|                              | `np.arctan2(y,x)`                  | Arctangente de `y/x` avec quadrant correct.               |
|                              | `np.deg2rad(x)` / `np.rad2deg(x)`  | Conversion degrÃ©s â†” radians.                              |
| **Divers**                   | `np.diff(x)`                       | DiffÃ©rences entre Ã©lÃ©ments consÃ©cutifs.                   |
|                              | `np.polyfit(x, y, deg)`            | Ajuste un polynÃ´me (rÃ©gression).                          |
| **Constantes**               | `np.pi`                            | Constante Ï€.                                              |
|                              | `np.e`                             | Constante e (base du log).                                |

---


<!--
