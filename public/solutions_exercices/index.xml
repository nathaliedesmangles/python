<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Solutions des exercices :: 420-SN1-RE</title>
    <link>https://example.org/solutions_exercices/index.html</link>
    <description>02. Variables, types de donnees et algorithme&#xA;03. Saisie au clavier, fonctions et débogage&#xA;05. Décider avec IF-ELIF-ELSE et les opérateurs&#xA;06. Répéter avec FOR et WHILE&#xA;07. Listes, chaines et graphiques de base&#xA;09. Tableaux NumPy&#xA;10. Traitement de fichiers CSV et graphiques scientifiques</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="https://example.org/solutions_exercices/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title> Variables, types de données et algorithme</title>
      <link>https://example.org/solutions_exercices/2_variables/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.org/solutions_exercices/2_variables/index.html</guid>
      <description>Exercice 1 : Conversion de température # 1. Stocker la température en degrés Celsius temp_celsius = 25 # Exemple : 25 °C # 2. Convertir en Fahrenheit et en Kelvin temp_fahrenheit = (temp_celsius * 9/5) + 32 temp_kelvin = temp_celsius + 273.15 # 3. Afficher les trois valeurs avec des messages clairs print(&#34;Température en Celsius : {temp_celsius}°C&#34;) print(&#34;Température en Fahrenheit : {temp_fahrenheit}°F&#34;) print(&#34;Température en Kelvin : {temp_kelvin}K&#34;)&#xD;Exercice 2 : Calcul de concentration molaire # Données connues m = 10.</description>
    </item>
    <item>
      <title> Saisie au clavier, fonctions et débogage</title>
      <link>https://example.org/solutions_exercices/3_input_fonctions_debug/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.org/solutions_exercices/3_input_fonctions_debug/index.html</guid>
      <description>Exercice 1 : La loi d’Ohm # Étape 1 : Demander la résistance à l&#39;utilisateur (en ohms) resistance = float(input(&#34;Entrer la résistance en ohms : &#34;)) # Étape 2 : Demander le courant à l&#39;utilisateur (en ampères) courant = float(input(&#34;Entrer le courant en ampères : &#34;)) # Étape 3 : Calculer la tension à l&#39;aide de la formule U = R * I tension = resistance * courant # Étape 4 : Afficher le résultat print(f&#34;La tension est de {tension} V&#34;)&#xD;Exercice 2 : Élément chimique # Demander à l&#39;utilisateur d&#39;entrer le nom d’un élément chimique element = input(&#34;Entrer le nom d&#39;un élément chimique : &#34;) # Afficher le message avec l’élément choisi print(f&#34;L’élément choisi est : {element}&#34;)&#xD;Exercice 3 : Convertir Celsius en Kelvin # Définition de la fonction def convertir_C_en_K(celsius): kelvin = celsius + 273.</description>
    </item>
    <item>
      <title> Décider avec if-elif-else et les opérateurs</title>
      <link>https://example.org/solutions_exercices/5_if/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.org/solutions_exercices/5_if/index.html</guid>
      <description>Partie 1 – Opérateurs de comparaison # 1.1 a = 10 b = 7 print(a &gt; b) # True print(a == 7) # False # 1.2 # Résultats : 5 != 3 # True 8 &lt;= 8 # True 4 &gt; 10 # False 3 == 3 # True&#xD;Partie 2 – Opérateurs logiques # 2.1 (5 &gt; 2) and (7 &lt; 10) # True and True = True (3 !</description>
    </item>
    <item>
      <title> Répéter avec FOR et WHILE</title>
      <link>https://example.org/solutions_exercices/6_boucles/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.org/solutions_exercices/6_boucles/index.html</guid>
      <description>Exercice 1 a. Afficher les nombres de 1 à 10&#xA;Boucle recommandée : for Pourquoi ? Le nombre d’itérations est connu d’avance. for i in range(1, 11): print(i)&#xD;b. Compter jusqu’à 100 par bonds de 10&#xA;Boucle recommandée : for Pourquoi ? La progression est régulière et le nombre d’itérations est connu. for i in range(0, 101, 10): print(i)&#xD;c. Simuler la chute d’un objet de 100 m (baisse de 10 m/s)</description>
    </item>
    <item>
      <title> Listes, chaines de caractères et graphiques de base</title>
      <link>https://example.org/solutions_exercices/7_listes_chaines_visualisation/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.org/solutions_exercices/7_listes_chaines_visualisation/index.html</guid>
      <description>Listes Exercice 1 animaux = [&#34;chat&#34;, &#34;chien&#34;, &#34;lapin&#34;, &#34;perroquet&#34;, &#34;tigre&#34;] for animal in animaux: print(f&#34;Voici un/une {animal}&#34;)&#xD;Exercice 2 grille = [ [1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16], [17, 18, 19, 20] ] for ligne in grille: for chiffre in ligne: print(chiffre)&#xD;Exercice 3 noms = [] for i in range(3): nom = input(f&#34;Entrez le nom {i+1} : &#34;) noms.append(nom) print(&#34;Ordre alphabétique croissant :&#34;) for nom in sorted(noms): print(nom) print(&#34;Ordre alphabétique décroissant :&#34;) for nom in sorted(noms, reverse=True): print(nom)&#xD;Exercice 4 suspects = [ [&#34;A&#34;, &#34;T&#34;, &#34;C&#34;, &#34;G&#34;], [&#34;G&#34;, &#34;A&#34;, &#34;T&#34;, &#34;G&#34;], [&#34;A&#34;, &#34;T&#34;, &#34;T&#34;, &#34;G&#34;] ] print(suspects[0][1]) # 2e base de la 1re séquence → T print(suspects[2][-1]) # dernière base de la 3e séquence → G&#xD;Chaînes de caractères Exercice 5 mots = [&#34;chlorophylle&#34;, &#34;atome&#34;, &#34;protéine&#34;] nb_lettres = [] for mot in mots: nb_lettres.</description>
    </item>
    <item>
      <title> Tableaux NumPy</title>
      <link>https://example.org/solutions_exercices/9_numpy/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.org/solutions_exercices/9_numpy/index.html</guid>
      <description>## Exercice 1 – Solubilité d’un sel&#xA;**Données** :&#xA;import numpy as np sol = np.array(\[32.0, 35.5, np.nan, 37.2, 39.0])&#xD;### 1. Affiche les valeurs&#xA;print(f&#34;Solubilités : {sol}&#34;)&#xD;### 2. Moyenne sans la valeur manquante&#xA;moyenne = np.nanmean(sol) print(f&#34;Moyenne (sans valeur manquante) : {moyenne:.2f} g/100mL&#34;)&#xD;### 3. Écart type&#xA;ecart = np.nanstd(sol) print(f&#34;Écart type : {ecart:.2f}&#34;)&#xD;## Exercice 2 – Températures journalières&#xA;**Données** :&#xA;temperatures = np.array(\[ &amp;nbsp; \[12.1, 17.3, 14.</description>
    </item>
    <item>
      <title> Traitement de fichiers CSV avec Pandas et graphiques scientifiques</title>
      <link>https://example.org/solutions_exercices/10_pandas_graphes_sc/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.org/solutions_exercices/10_pandas_graphes_sc/index.html</guid>
      <description></description>
    </item>
  </channel>
</rss>