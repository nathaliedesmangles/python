<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Solutions des exercices :: 420-SN1-RE</title>
    <link>https://example.org/solutions_exercices/index.html</link>
    <description>02. Variables, types, entrées et fonctions&#xA;03. Structures conditionnelles&#xA;04. Boucles et débogage simple&#xA;06. Listes, chaines et visualisation des données&#xA;07. Dictionnaires 08. Tableaux NumPy et droite de régression&#xA;09. Lecture et écriture de fichiers de données</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="https://example.org/solutions_exercices/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title> Variables, types, entrées et fonctions</title>
      <link>https://example.org/solutions_exercices/2_variables_types_entree_fn/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.org/solutions_exercices/2_variables_types_entree_fn/index.html</guid>
      <description>Exercice 1 : Distance parcourue # Données vitesse = 6.5 # en m/s temps_minutes = 12 # Conversion du temps en secondes temps_secondes = temps_minutes * 60 # Calcul de la distance distance = vitesse * temps_secondes # Affichage print(f&#34;Le cycliste a parcouru {distance} mètres en {temps_minutes} minutes.&#34;)&#xD;Résultat :&#xA;Le cycliste a parcouru 4680.0 mètres en 12 minutes.&#xD;Exercice 2 : Conversion de température # Donnée temperature_celsius = 38 # Conversions temperature_fahrenheit = (temperature_celsius * 9 / 5) + 32 temperature_kelvin = temperature_celsius + 273.</description>
    </item>
    <item>
      <title> Structures conditionnelles</title>
      <link>https://example.org/solutions_exercices/3_struct_cond/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.org/solutions_exercices/3_struct_cond/index.html</guid>
      <description>Exercice 1 : Demi-vie radioactive # Constantes masse_initiale = 100 # en grammes demi_vie = 5 # en années # Entrée utilisateur temps_ecoule = float(input(&#34;Combien d&#39;années se sont écoulées ? &#34;)) # Calcul nb_periodes = temps_ecoule / demi_vie masse_restante = masse_initiale * (0.5) ** nb_periodes # Affichage conditionnel if masse_restante &lt; 1: print(f&#34;La masse restante est très faible : {masse_restante:.4f} g. L’isotope est presque entièrement désintégré.&#34;) else: print(f&#34;Masse restante après {temps_ecoule} ans : {masse_restante:.</description>
    </item>
    <item>
      <title> Boucles et débogage simple</title>
      <link>https://example.org/solutions_exercices/4_boucles_debogage/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.org/solutions_exercices/4_boucles_debogage/index.html</guid>
      <description>Exercice 1 – For ou While ? a. Afficher les nombres de 1 à 10 Boucle : for (on connaît le début et la fin)&#xA;for i in range(1, 11): print(i)&#xD;b. Compter jusqu’à 100 par bonds de 10 Boucle : for&#xA;for i in range(0, 101, 10): print(i)&#xD;c. Simuler la chute d’un objet de 100 m (baisse de 10 m/s) Boucle : while (on ne connaît pas d’avance le nombre de répétitions, mais on connaît la condition d’arrêt)</description>
    </item>
    <item>
      <title> Listes, chaines et visualisation des données</title>
      <link>https://example.org/solutions_exercices/6_listes_chaines_visualisation/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.org/solutions_exercices/6_listes_chaines_visualisation/index.html</guid>
      <description>Listes Exercice 1 animaux = [&#34;chat&#34;, &#34;chien&#34;, &#34;lapin&#34;, &#34;perroquet&#34;, &#34;tigre&#34;] for animal in animaux: print(f&#34;Voici un/une {animal}&#34;)&#xD;Exercice 2 grille = [ [1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16], [17, 18, 19, 20] ] for ligne in grille: for chiffre in ligne: print(chiffre)&#xD;Exercice 3 prenoms = [] for i in range(3): prenom = input(f&#34;Entrez le prénom {i+1} : &#34;) prenoms.append(prenom) print(&#34;Ordre alphabétique croissant :&#34;) for prenom in sorted(prenoms): print(prenom) print(&#34;Ordre alphabétique décroissant :&#34;) for prenom in sorted(prenoms, reverse=True): print(prenom)&#xD;Exercice 4 suspects = [ [&#34;A&#34;, &#34;T&#34;, &#34;C&#34;, &#34;G&#34;], [&#34;G&#34;, &#34;A&#34;, &#34;T&#34;, &#34;G&#34;], [&#34;A&#34;, &#34;T&#34;, &#34;T&#34;, &#34;G&#34;] ] print(suspects[0][1]) # 2e base de la 1re séquence → T print(suspects[2][-1]) # dernière base de la 3e séquence → G&#xD;Chaînes de caractères Exercice 5 mots = [&#34;chlorophylle&#34;, &#34;atome&#34;, &#34;protéine&#34;] nb_lettres = [] for mot in mots: nb_lettres.</description>
    </item>
    <item>
      <title> Dictionnaires</title>
      <link>https://example.org/solutions_exercices/7_dictionnaires/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.org/solutions_exercices/7_dictionnaires/index.html</guid>
      <description>Exercice 1 : Créer un dictionnaire # Création d&#39;un dictionnaire vide cubes = {} # Ajout des clés et valeurs avec une boucle for i in range(1, 6): cubes[i] = i**3 print(&#34;Dictionnaire des cubes :&#34;, cubes)&#xD;Exercice 2 : Extraire clés et valeurs cles = list(cubes.keys()) valeurs = list(cubes.values()) print(&#34;Clés :&#34;, cles) print(&#34;Valeurs :&#34;, valeurs)&#xD;Exercice 3 : Parcourir items() for cle, valeur in cubes.items(): print(f&#34;Le cube de {cle} est {valeur}&#34;)&#xD;Exercice 4 : Modifier et supprimer # 1.</description>
    </item>
    <item>
      <title> Tableaux NumPy et droite de régression</title>
      <link>https://example.org/solutions_exercices/8_numpy_regression/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.org/solutions_exercices/8_numpy_regression/index.html</guid>
      <description>Exercice 1 – Chute libre verticale et régression linéaire import numpy as np import matplotlib.pyplot as plt # Constantes g = 9.8 h = 20 # Tableau de temps t = np.linspace(0, 2, 21) # Position y = h - 0.5 * g * t**2 print(&#34;5 premières valeurs de y :&#34;, y[:5]) # Régression linéaire entre 0.5s et 1.5s masque = (t &gt;= 0.5) &amp; (t &lt;= 1.5) pente, ordonnee = np.</description>
    </item>
    <item>
      <title> Lecture et écriture de fichiers de données</title>
      <link>https://example.org/solutions_exercices/9_fichiers/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.org/solutions_exercices/9_fichiers/index.html</guid>
      <description>Exercice 1 (NumPy) import numpy as np vitesses = np.array([ [5.2, 6.1, 5.8, 6.0], [5.5, 6.2, 6.1, 6.3], [5.9, 6.0, 5.7, 6.1] ]) np.savetxt(&#34;vitesses.txt&#34;, vitesses, fmt=&#34;%.2f&#34;) # Lire le fichier donnees = np.loadtxt(&#34;vitesses.txt&#34;) # Calcul des moyennes par colonne moyennes = np.mean(donnees, axis=0) # Sauvegarder le fichier des moyennes np.savetxt(&#34;moyennes.txt&#34;, moyennes, fmt=&#34;%.2f&#34;)&#xD;Exercice 2 (NumPy) import numpy as np # 1. Lecture du fichier CSV (avec en-tête) # On lit seulement la colonne numérique (températures) # et on ignore la première ligne qui contient les titres.</description>
    </item>
  </channel>
</rss>